
DisplayILI9488.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040dc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080042a0  080042a0  000142a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042c4  080042c4  00032c30  2**0
                  CONTENTS
  4 .ARM          00000008  080042c4  080042c4  000142c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042cc  080042cc  00032c30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042cc  080042cc  000142cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042d0  080042d0  000142d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00012c30  20000000  080042d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20012c30  08016f04  00032c30  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012dbc  08016f04  00032dbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00032c30  2**0
                  CONTENTS, READONLY
 12 .debug_info   000117d6  00000000  00000000  00032c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002943  00000000  00000000  00044436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  00046d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb0  00000000  00000000  00047d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000225ac  00000000  00000000  00048c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013fd7  00000000  00000000  0006b1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf1ce  00000000  00000000  0007f1b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014e381  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004120  00000000  00000000  0014e3d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20012c30 	.word	0x20012c30
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004288 	.word	0x08004288

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20012c34 	.word	0x20012c34
 8000200:	08004288 	.word	0x08004288

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <Button_Init>:
static button_t btn1;

/* List of button handles (order must match button_id_t enum) */
static button_t *button_list[BTN_CNT] = {&btn1};

void Button_Init(void) {
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
	btn1 = (button_t) {
 800050e:	4b05      	ldr	r3, [pc, #20]	; (8000524 <Button_Init+0x1c>)
 8000510:	4a05      	ldr	r2, [pc, #20]	; (8000528 <Button_Init+0x20>)
 8000512:	ca07      	ldmia	r2, {r0, r1, r2}
 8000514:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.id = BTN_ID_1,
		.counter = 0,
		.port = B1_GPIO_Port,
		.pin = B1_Pin
	};
}
 8000518:	bf00      	nop
 800051a:	3714      	adds	r7, #20
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	20012c4c 	.word	0x20012c4c
 8000528:	080042a0 	.word	0x080042a0

0800052c <Button_PressedHandler>:

/**
 * @brief Callback function when button pressed
 * @param id (button_id_t) - id of button pressed
 */
static void Button_PressedHandler(button_id_t id) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
	switch (id) {
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d103      	bne.n	8000544 <Button_PressedHandler+0x18>
		case BTN_ID_1:
			Led_Toggle(LED_ID_1);
 800053c:	2000      	movs	r0, #0
 800053e:	f000 fe7b 	bl	8001238 <Led_Toggle>
			break;
 8000542:	e000      	b.n	8000546 <Button_PressedHandler+0x1a>
		default:
			break;
 8000544:	bf00      	nop
	}
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <Button_ReleasedHandler>:

/**
 * @brief Callback function when button released
 * @param id (button_id_t) - id of button released
 */
static void Button_ReleasedHandler(button_id_t id) {
 800054e:	b480      	push	{r7}
 8000550:	b083      	sub	sp, #12
 8000552:	af00      	add	r7, sp, #0
 8000554:	4603      	mov	r3, r0
 8000556:	71fb      	strb	r3, [r7, #7]
	switch (id) {
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	2b00      	cmp	r3, #0
		case BTN_ID_1:
			break;
		default:
			break;
 800055c:	bf00      	nop
	}
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
	...

0800056c <Button_Debounce>:

void Button_Debounce(void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < BTN_CNT; i++) {
 8000572:	2300      	movs	r3, #0
 8000574:	73fb      	strb	r3, [r7, #15]
 8000576:	e03c      	b.n	80005f2 <Button_Debounce+0x86>
		// get next button to debounce
		button_t *btn = button_list[i];
 8000578:	7bfb      	ldrb	r3, [r7, #15]
 800057a:	4a22      	ldr	r2, [pc, #136]	; (8000604 <Button_Debounce+0x98>)
 800057c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000580:	60bb      	str	r3, [r7, #8]

		// Read current state of button
		bool pressed = !HAL_GPIO_ReadPin(btn->port, btn->pin);
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	685a      	ldr	r2, [r3, #4]
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	689b      	ldr	r3, [r3, #8]
 800058a:	b29b      	uxth	r3, r3
 800058c:	4619      	mov	r1, r3
 800058e:	4610      	mov	r0, r2
 8000590:	f001 fe46 	bl	8002220 <HAL_GPIO_ReadPin>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	bf0c      	ite	eq
 800059a:	2301      	moveq	r3, #1
 800059c:	2300      	movne	r3, #0
 800059e:	71fb      	strb	r3, [r7, #7]

		if (!pressed) {
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	f083 0301 	eor.w	r3, r3, #1
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d00c      	beq.n	80005c6 <Button_Debounce+0x5a>
			// if button released then call callback function if it exists
			if (btn->counter == DEBOUNCE_TIME + 1) {
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	785b      	ldrb	r3, [r3, #1]
 80005b0:	2b15      	cmp	r3, #21
 80005b2:	d104      	bne.n	80005be <Button_Debounce+0x52>
				Button_PressedHandler(btn->id);
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff ffb7 	bl	800052c <Button_PressedHandler>
			}

			// button not pressed so reset counter
			btn->counter = 0;
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	2200      	movs	r2, #0
 80005c2:	705a      	strb	r2, [r3, #1]
 80005c4:	e012      	b.n	80005ec <Button_Debounce+0x80>
		} else {
			// do not allow counter to overflow
			if (btn->counter <= DEBOUNCE_TIME) {
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	785b      	ldrb	r3, [r3, #1]
 80005ca:	2b14      	cmp	r3, #20
 80005cc:	d80e      	bhi.n	80005ec <Button_Debounce+0x80>
				btn->counter++;
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	785b      	ldrb	r3, [r3, #1]
 80005d2:	3301      	adds	r3, #1
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	705a      	strb	r2, [r3, #1]
				// if counter reaches debounce time then register press
				if (btn->counter == DEBOUNCE_TIME) {
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	785b      	ldrb	r3, [r3, #1]
 80005de:	2b14      	cmp	r3, #20
 80005e0:	d104      	bne.n	80005ec <Button_Debounce+0x80>
					Button_ReleasedHandler(btn->id);
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff ffb1 	bl	800054e <Button_ReleasedHandler>
	for (uint8_t i = 0; i < BTN_CNT; i++) {
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	3301      	adds	r3, #1
 80005f0:	73fb      	strb	r3, [r7, #15]
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d0bf      	beq.n	8000578 <Button_Debounce+0xc>
				}
			}
		}
	}
}
 80005f8:	bf00      	nop
 80005fa:	bf00      	nop
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000000 	.word	0x20000000

08000608 <Display_Init>:

/* External reference to display SPI handle */
extern SPI_HandleTypeDef hspi2;

void Display_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	/* Hardware reset display */
	Display_HWReset();
 800060c:	f000 f824 	bl	8000658 <Display_HWReset>

	/* Software reset */
	Display_TransmitCmd(DISPLAY_SWRESET);
 8000610:	2001      	movs	r0, #1
 8000612:	f000 f837 	bl	8000684 <Display_TransmitCmd>
	HAL_Delay(250);
 8000616:	20fa      	movs	r0, #250	; 0xfa
 8000618:	f001 fb38 	bl	8001c8c <HAL_Delay>

	/* Exit sleep mode */
	Display_TransmitCmd(DISPLAY_SLEEPOUT);
 800061c:	2011      	movs	r0, #17
 800061e:	f000 f831 	bl	8000684 <Display_TransmitCmd>
	HAL_Delay(100);
 8000622:	2064      	movs	r0, #100	; 0x64
 8000624:	f001 fb32 	bl	8001c8c <HAL_Delay>

	/* 4-line serial interface mode control */
	Display_TransmitCmdParam(DISPLAY_INTMCTRL, 0x00);
 8000628:	2100      	movs	r1, #0
 800062a:	20b0      	movs	r0, #176	; 0xb0
 800062c:	f000 f86e 	bl	800070c <Display_TransmitCmdParam>

	/* 3-bit RGB interface pixel format */
	Display_TransmitCmdParam(DISPLAY_INTPXLFMT, 0x01);
 8000630:	2101      	movs	r1, #1
 8000632:	203a      	movs	r0, #58	; 0x3a
 8000634:	f000 f86a 	bl	800070c <Display_TransmitCmdParam>

	/* Memory access control sets scanning direction of frame memory */
	// was 0x08
	Display_TransmitCmdParam(DISPLAY_MEMACTRL, 0x08);
 8000638:	2108      	movs	r1, #8
 800063a:	2036      	movs	r0, #54	; 0x36
 800063c:	f000 f866 	bl	800070c <Display_TransmitCmdParam>

	/* TODO modify positive, negative, and digital gamma settings */

	/* Exit sleep mode */
	Display_TransmitCmd(DISPLAY_SLEEPOUT);
 8000640:	2011      	movs	r0, #17
 8000642:	f000 f81f 	bl	8000684 <Display_TransmitCmd>
	HAL_Delay(250);
 8000646:	20fa      	movs	r0, #250	; 0xfa
 8000648:	f001 fb20 	bl	8001c8c <HAL_Delay>

	/* Turn display on */
	Display_TransmitCmd(DISPLAY_DISPON);
 800064c:	2029      	movs	r0, #41	; 0x29
 800064e:	f000 f819 	bl	8000684 <Display_TransmitCmd>
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <Display_HWReset>:

void Display_HWReset(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	/* Hold RESET pin LOW with delay */
	HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	2101      	movs	r1, #1
 8000660:	4807      	ldr	r0, [pc, #28]	; (8000680 <Display_HWReset+0x28>)
 8000662:	f001 fdf5 	bl	8002250 <HAL_GPIO_WritePin>
	HAL_Delay(DISPLAY_RESET_TIME_MS);
 8000666:	200a      	movs	r0, #10
 8000668:	f001 fb10 	bl	8001c8c <HAL_Delay>

	/* Set RESET pin HIGH and wait for system reset to complete */
	HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	2101      	movs	r1, #1
 8000670:	4803      	ldr	r0, [pc, #12]	; (8000680 <Display_HWReset+0x28>)
 8000672:	f001 fded 	bl	8002250 <HAL_GPIO_WritePin>
	HAL_Delay(DISPLAY_RESET_TIME_MS);
 8000676:	200a      	movs	r0, #10
 8000678:	f001 fb08 	bl	8001c8c <HAL_Delay>
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40020800 	.word	0x40020800

08000684 <Display_TransmitCmd>:

void Display_TransmitCmd(uint8_t cmd)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
	/* DC/RS LOW since writing command */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2101      	movs	r1, #1
 8000692:	480b      	ldr	r0, [pc, #44]	; (80006c0 <Display_TransmitCmd+0x3c>)
 8000694:	f001 fddc 	bl	8002250 <HAL_GPIO_WritePin>

	/* Set CS LOW */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	2110      	movs	r1, #16
 800069c:	4808      	ldr	r0, [pc, #32]	; (80006c0 <Display_TransmitCmd+0x3c>)
 800069e:	f001 fdd7 	bl	8002250 <HAL_GPIO_WritePin>

	/* Write SPI data */
	HAL_SPI_Transmit(&hspi2, &cmd, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80006a2:	1df9      	adds	r1, r7, #7
 80006a4:	2364      	movs	r3, #100	; 0x64
 80006a6:	2201      	movs	r2, #1
 80006a8:	4806      	ldr	r0, [pc, #24]	; (80006c4 <Display_TransmitCmd+0x40>)
 80006aa:	f002 fc76 	bl	8002f9a <HAL_SPI_Transmit>

	/* Set CS HIGH */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	2110      	movs	r1, #16
 80006b2:	4803      	ldr	r0, [pc, #12]	; (80006c0 <Display_TransmitCmd+0x3c>)
 80006b4:	f001 fdcc 	bl	8002250 <HAL_GPIO_WritePin>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40020400 	.word	0x40020400
 80006c4:	20012c68 	.word	0x20012c68

080006c8 <Display_TransmitParam>:

void Display_TransmitParam(uint8_t param)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
	/* DC/RS HIGH since writing data */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	2101      	movs	r1, #1
 80006d6:	480b      	ldr	r0, [pc, #44]	; (8000704 <Display_TransmitParam+0x3c>)
 80006d8:	f001 fdba 	bl	8002250 <HAL_GPIO_WritePin>

	/* Set CS LOW */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	2110      	movs	r1, #16
 80006e0:	4808      	ldr	r0, [pc, #32]	; (8000704 <Display_TransmitParam+0x3c>)
 80006e2:	f001 fdb5 	bl	8002250 <HAL_GPIO_WritePin>

	/* Write SPI data */
	HAL_SPI_Transmit(&hspi2, &param, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80006e6:	1df9      	adds	r1, r7, #7
 80006e8:	2364      	movs	r3, #100	; 0x64
 80006ea:	2201      	movs	r2, #1
 80006ec:	4806      	ldr	r0, [pc, #24]	; (8000708 <Display_TransmitParam+0x40>)
 80006ee:	f002 fc54 	bl	8002f9a <HAL_SPI_Transmit>

	/* Set CS HIGH */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	2110      	movs	r1, #16
 80006f6:	4803      	ldr	r0, [pc, #12]	; (8000704 <Display_TransmitParam+0x3c>)
 80006f8:	f001 fdaa 	bl	8002250 <HAL_GPIO_WritePin>
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40020400 	.word	0x40020400
 8000708:	20012c68 	.word	0x20012c68

0800070c <Display_TransmitCmdParam>:

void Display_TransmitCmdParam(uint8_t cmd, uint8_t param)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	460a      	mov	r2, r1
 8000716:	71fb      	strb	r3, [r7, #7]
 8000718:	4613      	mov	r3, r2
 800071a:	71bb      	strb	r3, [r7, #6]
	/* Send command */
	Display_TransmitCmd(cmd);
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ffb0 	bl	8000684 <Display_TransmitCmd>

	/* Send parameter */
	Display_TransmitParam(param);
 8000724:	79bb      	ldrb	r3, [r7, #6]
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ffce 	bl	80006c8 <Display_TransmitParam>
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <Display_SetWindow>:

void Display_SetWindow(uint16_t xs, uint16_t ys, uint16_t xe, uint16_t ye)
{
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	4604      	mov	r4, r0
 800073c:	4608      	mov	r0, r1
 800073e:	4611      	mov	r1, r2
 8000740:	461a      	mov	r2, r3
 8000742:	4623      	mov	r3, r4
 8000744:	80fb      	strh	r3, [r7, #6]
 8000746:	4603      	mov	r3, r0
 8000748:	80bb      	strh	r3, [r7, #4]
 800074a:	460b      	mov	r3, r1
 800074c:	807b      	strh	r3, [r7, #2]
 800074e:	4613      	mov	r3, r2
 8000750:	803b      	strh	r3, [r7, #0]
	/* Check coordinate are not out of range */
	if ((xs > xe) || (xe > DISPLAY_MAX_X) || (ys > ye) || (ye > DISPLAY_MAX_Y)) {
 8000752:	88fa      	ldrh	r2, [r7, #6]
 8000754:	887b      	ldrh	r3, [r7, #2]
 8000756:	429a      	cmp	r2, r3
 8000758:	f200 808b 	bhi.w	8000872 <Display_SetWindow+0x13e>
 800075c:	887b      	ldrh	r3, [r7, #2]
 800075e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000762:	f080 8086 	bcs.w	8000872 <Display_SetWindow+0x13e>
 8000766:	88ba      	ldrh	r2, [r7, #4]
 8000768:	883b      	ldrh	r3, [r7, #0]
 800076a:	429a      	cmp	r2, r3
 800076c:	f200 8081 	bhi.w	8000872 <Display_SetWindow+0x13e>
 8000770:	883b      	ldrh	r3, [r7, #0]
 8000772:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000776:	d27c      	bcs.n	8000872 <Display_SetWindow+0x13e>
		/* Error so do nothing */
		return;
	}

	/* Set column range */
	Display_TransmitCmd(DISPLAY_COLADDRSET);
 8000778:	202a      	movs	r0, #42	; 0x2a
 800077a:	f7ff ff83 	bl	8000684 <Display_TransmitCmd>

	/* Set DC/RS LOW since transmitting date */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_SET);
 800077e:	2201      	movs	r2, #1
 8000780:	2101      	movs	r1, #1
 8000782:	483e      	ldr	r0, [pc, #248]	; (800087c <Display_SetWindow+0x148>)
 8000784:	f001 fd64 	bl	8002250 <HAL_GPIO_WritePin>

	/* Hold CS LOW until all parameters have been sent */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	2110      	movs	r1, #16
 800078c:	483b      	ldr	r0, [pc, #236]	; (800087c <Display_SetWindow+0x148>)
 800078e:	f001 fd5f 	bl	8002250 <HAL_GPIO_WritePin>

	/* Write column start and end data */
	uint8_t byte = ys >> 8;	// SC[15:8]
 8000792:	88bb      	ldrh	r3, [r7, #4]
 8000794:	0a1b      	lsrs	r3, r3, #8
 8000796:	b29b      	uxth	r3, r3
 8000798:	b2db      	uxtb	r3, r3
 800079a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 800079c:	f107 010f 	add.w	r1, r7, #15
 80007a0:	2364      	movs	r3, #100	; 0x64
 80007a2:	2201      	movs	r2, #1
 80007a4:	4836      	ldr	r0, [pc, #216]	; (8000880 <Display_SetWindow+0x14c>)
 80007a6:	f002 fbf8 	bl	8002f9a <HAL_SPI_Transmit>
	byte = ys & 0xFF;		// SC[7:0]
 80007aa:	88bb      	ldrh	r3, [r7, #4]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80007b0:	f107 010f 	add.w	r1, r7, #15
 80007b4:	2364      	movs	r3, #100	; 0x64
 80007b6:	2201      	movs	r2, #1
 80007b8:	4831      	ldr	r0, [pc, #196]	; (8000880 <Display_SetWindow+0x14c>)
 80007ba:	f002 fbee 	bl	8002f9a <HAL_SPI_Transmit>
	byte = ye >> 8;			// EC[15:8]
 80007be:	883b      	ldrh	r3, [r7, #0]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80007c8:	f107 010f 	add.w	r1, r7, #15
 80007cc:	2364      	movs	r3, #100	; 0x64
 80007ce:	2201      	movs	r2, #1
 80007d0:	482b      	ldr	r0, [pc, #172]	; (8000880 <Display_SetWindow+0x14c>)
 80007d2:	f002 fbe2 	bl	8002f9a <HAL_SPI_Transmit>
	byte = ye & 0xFF;		// EC[7:0]
 80007d6:	883b      	ldrh	r3, [r7, #0]
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80007dc:	f107 010f 	add.w	r1, r7, #15
 80007e0:	2364      	movs	r3, #100	; 0x64
 80007e2:	2201      	movs	r2, #1
 80007e4:	4826      	ldr	r0, [pc, #152]	; (8000880 <Display_SetWindow+0x14c>)
 80007e6:	f002 fbd8 	bl	8002f9a <HAL_SPI_Transmit>

	/* Last parameter sent so end transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80007ea:	2201      	movs	r2, #1
 80007ec:	2110      	movs	r1, #16
 80007ee:	4823      	ldr	r0, [pc, #140]	; (800087c <Display_SetWindow+0x148>)
 80007f0:	f001 fd2e 	bl	8002250 <HAL_GPIO_WritePin>

	/* Set page range */
	Display_TransmitCmd(DISPLAY_PGADDRSET);
 80007f4:	202b      	movs	r0, #43	; 0x2b
 80007f6:	f7ff ff45 	bl	8000684 <Display_TransmitCmd>

	/* Set DC/RS LOW since transmitting date */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2101      	movs	r1, #1
 80007fe:	481f      	ldr	r0, [pc, #124]	; (800087c <Display_SetWindow+0x148>)
 8000800:	f001 fd26 	bl	8002250 <HAL_GPIO_WritePin>

	/* Begin multi-parameter transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2110      	movs	r1, #16
 8000808:	481c      	ldr	r0, [pc, #112]	; (800087c <Display_SetWindow+0x148>)
 800080a:	f001 fd21 	bl	8002250 <HAL_GPIO_WritePin>

	/* Write page start and end data */
	byte = xs >> 8;		// SP[15:8]
 800080e:	88fb      	ldrh	r3, [r7, #6]
 8000810:	0a1b      	lsrs	r3, r3, #8
 8000812:	b29b      	uxth	r3, r3
 8000814:	b2db      	uxtb	r3, r3
 8000816:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 8000818:	f107 010f 	add.w	r1, r7, #15
 800081c:	2364      	movs	r3, #100	; 0x64
 800081e:	2201      	movs	r2, #1
 8000820:	4817      	ldr	r0, [pc, #92]	; (8000880 <Display_SetWindow+0x14c>)
 8000822:	f002 fbba 	bl	8002f9a <HAL_SPI_Transmit>
	byte = xs & 0xFF;	// SP[7:0]
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 800082c:	f107 010f 	add.w	r1, r7, #15
 8000830:	2364      	movs	r3, #100	; 0x64
 8000832:	2201      	movs	r2, #1
 8000834:	4812      	ldr	r0, [pc, #72]	; (8000880 <Display_SetWindow+0x14c>)
 8000836:	f002 fbb0 	bl	8002f9a <HAL_SPI_Transmit>
	byte = xe >> 8;		// EP[15:8]
 800083a:	887b      	ldrh	r3, [r7, #2]
 800083c:	0a1b      	lsrs	r3, r3, #8
 800083e:	b29b      	uxth	r3, r3
 8000840:	b2db      	uxtb	r3, r3
 8000842:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 8000844:	f107 010f 	add.w	r1, r7, #15
 8000848:	2364      	movs	r3, #100	; 0x64
 800084a:	2201      	movs	r2, #1
 800084c:	480c      	ldr	r0, [pc, #48]	; (8000880 <Display_SetWindow+0x14c>)
 800084e:	f002 fba4 	bl	8002f9a <HAL_SPI_Transmit>
	byte = xe & 0xFF;	// EP[7:0]
 8000852:	887b      	ldrh	r3, [r7, #2]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 8000858:	f107 010f 	add.w	r1, r7, #15
 800085c:	2364      	movs	r3, #100	; 0x64
 800085e:	2201      	movs	r2, #1
 8000860:	4807      	ldr	r0, [pc, #28]	; (8000880 <Display_SetWindow+0x14c>)
 8000862:	f002 fb9a 	bl	8002f9a <HAL_SPI_Transmit>

	/* Last parameter sent so end transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000866:	2201      	movs	r2, #1
 8000868:	2110      	movs	r1, #16
 800086a:	4804      	ldr	r0, [pc, #16]	; (800087c <Display_SetWindow+0x148>)
 800086c:	f001 fcf0 	bl	8002250 <HAL_GPIO_WritePin>
 8000870:	e000      	b.n	8000874 <Display_SetWindow+0x140>
		return;
 8000872:	bf00      	nop
}
 8000874:	3714      	adds	r7, #20
 8000876:	46bd      	mov	sp, r7
 8000878:	bd90      	pop	{r4, r7, pc}
 800087a:	bf00      	nop
 800087c:	40020400 	.word	0x40020400
 8000880:	20012c68 	.word	0x20012c68

08000884 <Display_SendColor>:


void Display_SendColor(uint32_t npixels, uint8_t color) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	460b      	mov	r3, r1
 800088e:	70fb      	strb	r3, [r7, #3]
	/* Set up writing to frame buffer */
	Display_TransmitCmd(DISPLAY_MEMWR);
 8000890:	202c      	movs	r0, #44	; 0x2c
 8000892:	f7ff fef7 	bl	8000684 <Display_TransmitCmd>

	/* Set up sending data to display */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_SET);
 8000896:	2201      	movs	r2, #1
 8000898:	2101      	movs	r1, #1
 800089a:	4815      	ldr	r0, [pc, #84]	; (80008f0 <Display_SendColor+0x6c>)
 800089c:	f001 fcd8 	bl	8002250 <HAL_GPIO_WritePin>

	/* Set CS LOW to begin transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2110      	movs	r1, #16
 80008a4:	4812      	ldr	r0, [pc, #72]	; (80008f0 <Display_SendColor+0x6c>)
 80008a6:	f001 fcd3 	bl	8002250 <HAL_GPIO_WritePin>

	/* If odd number of pixels pad a data byte to fill byte */
	if (npixels % 2 != 0) {
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d002      	beq.n	80008ba <Display_SendColor+0x36>
		npixels++;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3301      	adds	r3, #1
 80008b8:	607b      	str	r3, [r7, #4]
	}

	/* 2 pixel data stored per byte, so divide npixels by 2 */
	for (uint32_t i = 0; i < npixels / 2; i++) {
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	e008      	b.n	80008d2 <Display_SendColor+0x4e>
		HAL_SPI_Transmit(&hspi2, &color, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80008c0:	1cf9      	adds	r1, r7, #3
 80008c2:	2364      	movs	r3, #100	; 0x64
 80008c4:	2201      	movs	r2, #1
 80008c6:	480b      	ldr	r0, [pc, #44]	; (80008f4 <Display_SendColor+0x70>)
 80008c8:	f002 fb67 	bl	8002f9a <HAL_SPI_Transmit>
	for (uint32_t i = 0; i < npixels / 2; i++) {
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	3301      	adds	r3, #1
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d3f1      	bcc.n	80008c0 <Display_SendColor+0x3c>
	}

	/* Set CS HIGH to end transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	2110      	movs	r1, #16
 80008e0:	4803      	ldr	r0, [pc, #12]	; (80008f0 <Display_SendColor+0x6c>)
 80008e2:	f001 fcb5 	bl	8002250 <HAL_GPIO_WritePin>
}
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40020400 	.word	0x40020400
 80008f4:	20012c68 	.word	0x20012c68

080008f8 <Display_SendData>:

void Display_SendData(uint32_t data_len, uint8_t *data) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]

	/* Set up writing to frame buffer */
	Display_TransmitCmd(DISPLAY_MEMWR);
 8000902:	202c      	movs	r0, #44	; 0x2c
 8000904:	f7ff febe 	bl	8000684 <Display_TransmitCmd>

	/* Set up sending data to display */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_SET);
 8000908:	2201      	movs	r2, #1
 800090a:	2101      	movs	r1, #1
 800090c:	4811      	ldr	r0, [pc, #68]	; (8000954 <Display_SendData+0x5c>)
 800090e:	f001 fc9f 	bl	8002250 <HAL_GPIO_WritePin>

	/* Set CS LOW to begin transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2110      	movs	r1, #16
 8000916:	480f      	ldr	r0, [pc, #60]	; (8000954 <Display_SendData+0x5c>)
 8000918:	f001 fc9a 	bl	8002250 <HAL_GPIO_WritePin>

	for (uint32_t i = 0; i < data_len; i++) {
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	e00a      	b.n	8000938 <Display_SendData+0x40>
		HAL_SPI_Transmit(&hspi2, &(data[i]), sizeof(uint8_t), SPI_TIMEOUT_MS);
 8000922:	683a      	ldr	r2, [r7, #0]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	18d1      	adds	r1, r2, r3
 8000928:	2364      	movs	r3, #100	; 0x64
 800092a:	2201      	movs	r2, #1
 800092c:	480a      	ldr	r0, [pc, #40]	; (8000958 <Display_SendData+0x60>)
 800092e:	f002 fb34 	bl	8002f9a <HAL_SPI_Transmit>
	for (uint32_t i = 0; i < data_len; i++) {
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	3301      	adds	r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fa      	ldr	r2, [r7, #12]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	429a      	cmp	r2, r3
 800093e:	d3f0      	bcc.n	8000922 <Display_SendData+0x2a>
	}

	/* Set CS HIGH to end transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000940:	2201      	movs	r2, #1
 8000942:	2110      	movs	r1, #16
 8000944:	4803      	ldr	r0, [pc, #12]	; (8000954 <Display_SendData+0x5c>)
 8000946:	f001 fc83 	bl	8002250 <HAL_GPIO_WritePin>
}
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40020400 	.word	0x40020400
 8000958:	20012c68 	.word	0x20012c68

0800095c <Encoder_Init>:
} encoder_t;

static encoder_t enc1;
static encoder_t *encoder_list[ENC_CNT] = {&enc1};

void Encoder_Init(void) {
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
	/* Get gray code */
	GPIO_PinState pinA = 0;//HAL_GPIO_ReadPin(enc->port, enc->pin);
 8000962:	2300      	movs	r3, #0
 8000964:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState pinB = 0;//HAL_GPIO_ReadPin(enc->port, enc->pin);
 8000966:	2300      	movs	r3, #0
 8000968:	73bb      	strb	r3, [r7, #14]

	/* Convert gray code to binary */
	int8_t binary = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	737b      	strb	r3, [r7, #13]
	binary |= (pinA << 1);
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	b25a      	sxtb	r2, r3
 8000974:	7b7b      	ldrb	r3, [r7, #13]
 8000976:	4313      	orrs	r3, r2
 8000978:	737b      	strb	r3, [r7, #13]
	binary |= (pinB << 0);
 800097a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800097e:	7b7b      	ldrb	r3, [r7, #13]
 8000980:	4313      	orrs	r3, r2
 8000982:	737b      	strb	r3, [r7, #13]

	enc1 = (encoder_t) {
 8000984:	7b7a      	ldrb	r2, [r7, #13]
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <Encoder_Init+0x4c>)
 8000988:	2100      	movs	r1, #0
 800098a:	7019      	strb	r1, [r3, #0]
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <Encoder_Init+0x4c>)
 800098e:	705a      	strb	r2, [r3, #1]
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <Encoder_Init+0x4c>)
 8000992:	2200      	movs	r2, #0
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <Encoder_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
		.id = ENC_ID_1,
		.last_code = binary,
		.port = 0,
		.pin = 0,
	};
}
 800099c:	bf00      	nop
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	20012c58 	.word	0x20012c58

080009ac <Encoder_CWHandler>:

/**
 * @brief Callback function when encoder turned clockwise
 * @param id (encoder_id_t) - id of encoder rotated
 */
static void Encoder_CWHandler(encoder_id_t id) {
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
	switch (id) {
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	2b00      	cmp	r3, #0
		case ENC_ID_1:
			break;
		default:
			break;
 80009ba:	bf00      	nop
	}
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <Encoder_CCWHandler>:

/**
 * @brief Callback function when encoder turned counter-clockwise
 * @param id (encoder_id_t) - id of encoder rotated
 */
static void Encoder_CCWHandler(encoder_id_t id) {
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
	switch (id) {
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2b00      	cmp	r3, #0
		case ENC_ID_1:
			break;
		default:
			break;
 80009d6:	bf00      	nop
	}
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <Encoder_Debounce>:

void Encoder_Debounce(void) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
	/* Iterate through all encoders */
	for (uint8_t i = 0; i < ENC_CNT; i++) {
 80009ea:	2300      	movs	r3, #0
 80009ec:	73fb      	strb	r3, [r7, #15]
 80009ee:	e037      	b.n	8000a60 <Encoder_Debounce+0x7c>
		encoder_t *enc = encoder_list[i];
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	4a1f      	ldr	r2, [pc, #124]	; (8000a70 <Encoder_Debounce+0x8c>)
 80009f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f8:	60bb      	str	r3, [r7, #8]

		/* Get gray code */
		GPIO_PinState pinA = 0;//HAL_GPIO_ReadPin(enc->port, enc->pin);
 80009fa:	2300      	movs	r3, #0
 80009fc:	71fb      	strb	r3, [r7, #7]
		GPIO_PinState pinB = 0;//HAL_GPIO_ReadPin(enc->port, enc->pin);
 80009fe:	2300      	movs	r3, #0
 8000a00:	71bb      	strb	r3, [r7, #6]

		/* Convert gray code to binary */
		int8_t binary = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	717b      	strb	r3, [r7, #5]
		binary |= (pinA << 1);
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	b25a      	sxtb	r2, r3
 8000a0c:	797b      	ldrb	r3, [r7, #5]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	717b      	strb	r3, [r7, #5]
		binary |= (pinB << 0);
 8000a12:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8000a16:	797b      	ldrb	r3, [r7, #5]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	717b      	strb	r3, [r7, #5]

		/* Check if encoder state has changed */
		if (binary != enc->last_code) {
 8000a1c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000a20:	68ba      	ldr	r2, [r7, #8]
 8000a22:	7852      	ldrb	r2, [r2, #1]
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d015      	beq.n	8000a54 <Encoder_Debounce+0x70>
			uint8_t diff = enc->last_code - binary;
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	785a      	ldrb	r2, [r3, #1]
 8000a2c:	797b      	ldrb	r3, [r7, #5]
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	713b      	strb	r3, [r7, #4]
			if (diff == -1 || diff == 3) {
 8000a32:	793b      	ldrb	r3, [r7, #4]
 8000a34:	2b03      	cmp	r3, #3
 8000a36:	d105      	bne.n	8000a44 <Encoder_Debounce+0x60>
				Encoder_CWHandler(enc->id);
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ffb5 	bl	80009ac <Encoder_CWHandler>
 8000a42:	e007      	b.n	8000a54 <Encoder_Debounce+0x70>
			} else if (diff == 1 || diff == -3) {
 8000a44:	793b      	ldrb	r3, [r7, #4]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d104      	bne.n	8000a54 <Encoder_Debounce+0x70>
				Encoder_CCWHandler(enc->id);
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff ffba 	bl	80009c8 <Encoder_CCWHandler>
			}
		}

		/* Update state */
		enc->last_code = binary;
 8000a54:	797a      	ldrb	r2, [r7, #5]
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < ENC_CNT; i++) {
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	73fb      	strb	r3, [r7, #15]
 8000a60:	7bfb      	ldrb	r3, [r7, #15]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d0c4      	beq.n	80009f0 <Encoder_Debounce+0xc>
	}
}
 8000a66:	bf00      	nop
 8000a68:	bf00      	nop
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000004 	.word	0x20000004

08000a74 <Gfx_Init>:
	0b1110000, // 7
	0b1111111, // 8
	0b1110011  // 9
};

void Gfx_Init(void) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	Gfx_SetBackground(COLOR_BLACK);
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f000 f803 	bl	8000a84 <Gfx_SetBackground>
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <Gfx_SetBackground>:

void Gfx_SetBackground(uint8_t color) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af02      	add	r7, sp, #8
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
	background_color = color;
 8000a8e:	4a08      	ldr	r2, [pc, #32]	; (8000ab0 <Gfx_SetBackground+0x2c>)
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	7013      	strb	r3, [r2, #0]
	Gfx_DrawFilledRect(0, 0, DISPLAY_SIZE_X, DISPLAY_SIZE_Y, color);
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000a9c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f000 f806 	bl	8000ab4 <Gfx_DrawFilledRect>
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20012c64 	.word	0x20012c64

08000ab4 <Gfx_DrawFilledRect>:

void Gfx_DrawFilledRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t color) {
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4604      	mov	r4, r0
 8000abc:	4608      	mov	r0, r1
 8000abe:	4611      	mov	r1, r2
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4623      	mov	r3, r4
 8000ac4:	80fb      	strh	r3, [r7, #6]
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	80bb      	strh	r3, [r7, #4]
 8000aca:	460b      	mov	r3, r1
 8000acc:	807b      	strh	r3, [r7, #2]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	803b      	strh	r3, [r7, #0]
	if (x + w > DISPLAY_MAX_X || y + h > DISPLAY_MAX_Y) {
 8000ad2:	88fa      	ldrh	r2, [r7, #6]
 8000ad4:	887b      	ldrh	r3, [r7, #2]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000adc:	da21      	bge.n	8000b22 <Gfx_DrawFilledRect+0x6e>
 8000ade:	88ba      	ldrh	r2, [r7, #4]
 8000ae0:	883b      	ldrh	r3, [r7, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000ae8:	da1b      	bge.n	8000b22 <Gfx_DrawFilledRect+0x6e>
		/* Do nothing if arguments are invalid */
		return;
	}

	/* Set window of rectangle */
	Display_SetWindow(x, y, x + w - 1, y + h - 1);
 8000aea:	88fa      	ldrh	r2, [r7, #6]
 8000aec:	887b      	ldrh	r3, [r7, #2]
 8000aee:	4413      	add	r3, r2
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	3b01      	subs	r3, #1
 8000af4:	b29c      	uxth	r4, r3
 8000af6:	88ba      	ldrh	r2, [r7, #4]
 8000af8:	883b      	ldrh	r3, [r7, #0]
 8000afa:	4413      	add	r3, r2
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	3b01      	subs	r3, #1
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	88b9      	ldrh	r1, [r7, #4]
 8000b04:	88f8      	ldrh	r0, [r7, #6]
 8000b06:	4622      	mov	r2, r4
 8000b08:	f7ff fe14 	bl	8000734 <Display_SetWindow>

	/* Send pixel data */
	Display_SendColor(w * h, color);
 8000b0c:	887b      	ldrh	r3, [r7, #2]
 8000b0e:	883a      	ldrh	r2, [r7, #0]
 8000b10:	fb02 f303 	mul.w	r3, r2, r3
 8000b14:	461a      	mov	r2, r3
 8000b16:	7e3b      	ldrb	r3, [r7, #24]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	f7ff feb2 	bl	8000884 <Display_SendColor>
 8000b20:	e000      	b.n	8000b24 <Gfx_DrawFilledRect+0x70>
		return;
 8000b22:	bf00      	nop
}
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd90      	pop	{r4, r7, pc}

08000b2a <Gfx_DrawImage>:
void Gfx_DrawNumber(uint16_t x, uint16_t y, uint8_t number, uint8_t font_height, uint8_t color) {
	Gfx_Draw7SegDigit(x, y, number % 10, font_height, color);
	Gfx_Draw7SegDigit(x + (font_height * 3 / 2), y, number / 10, font_height, color);
}

void Gfx_DrawImage(image_t *img, uint16_t x, uint16_t y) {
 8000b2a:	b590      	push	{r4, r7, lr}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
 8000b32:	460b      	mov	r3, r1
 8000b34:	807b      	strh	r3, [r7, #2]
 8000b36:	4613      	mov	r3, r2
 8000b38:	803b      	strh	r3, [r7, #0]
	/* Set window to display image */
	Display_SetWindow(x, y, x + img->w -1, y + img->h - 1);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	889a      	ldrh	r2, [r3, #4]
 8000b3e:	887b      	ldrh	r3, [r7, #2]
 8000b40:	4413      	add	r3, r2
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	3b01      	subs	r3, #1
 8000b46:	b29c      	uxth	r4, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	88da      	ldrh	r2, [r3, #6]
 8000b4c:	883b      	ldrh	r3, [r7, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	3b01      	subs	r3, #1
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	8839      	ldrh	r1, [r7, #0]
 8000b58:	8878      	ldrh	r0, [r7, #2]
 8000b5a:	4622      	mov	r2, r4
 8000b5c:	f7ff fdea 	bl	8000734 <Display_SetWindow>

	/* Send image data */
	Display_SendData(img->data_len, img->data);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	68da      	ldr	r2, [r3, #12]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	f7ff fec4 	bl	80008f8 <Display_SendData>
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd90      	pop	{r4, r7, pc}

08000b78 <Gfx_Draw7SegDigit>:


void Gfx_Draw7SegDigit(uint16_t x, uint16_t y, int8_t digit, uint8_t font_height, uint8_t color) {
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b087      	sub	sp, #28
 8000b7c:	af02      	add	r7, sp, #8
 8000b7e:	4604      	mov	r4, r0
 8000b80:	4608      	mov	r0, r1
 8000b82:	4611      	mov	r1, r2
 8000b84:	461a      	mov	r2, r3
 8000b86:	4623      	mov	r3, r4
 8000b88:	80fb      	strh	r3, [r7, #6]
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	80bb      	strh	r3, [r7, #4]
 8000b8e:	460b      	mov	r3, r1
 8000b90:	70fb      	strb	r3, [r7, #3]
 8000b92:	4613      	mov	r3, r2
 8000b94:	70bb      	strb	r3, [r7, #2]
	/* Digits 0-9 will map directly to display that digit, -1 will delete the digit */
	if (digit != -1 && (digit < 0 || digit > 9)) {
 8000b96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b9e:	d009      	beq.n	8000bb4 <Gfx_Draw7SegDigit+0x3c>
 8000ba0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	f2c0 810a 	blt.w	8000dbe <Gfx_Draw7SegDigit+0x246>
 8000baa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000bae:	2b09      	cmp	r3, #9
 8000bb0:	f300 8105 	bgt.w	8000dbe <Gfx_Draw7SegDigit+0x246>
		// Do nothing if digit is not a valid value
		return;
	}

	/* Thickness of each segment */
	uint8_t thickness = font_height / 10;
 8000bb4:	78bb      	ldrb	r3, [r7, #2]
 8000bb6:	4a84      	ldr	r2, [pc, #528]	; (8000dc8 <Gfx_Draw7SegDigit+0x250>)
 8000bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bbc:	08db      	lsrs	r3, r3, #3
 8000bbe:	73fb      	strb	r3, [r7, #15]

	/* Length of each segment */
	uint8_t seg_len = (font_height - (thickness * 2)) / 2;
 8000bc0:	78ba      	ldrb	r2, [r7, #2]
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	0fda      	lsrs	r2, r3, #31
 8000bca:	4413      	add	r3, r2
 8000bcc:	105b      	asrs	r3, r3, #1
 8000bce:	73bb      	strb	r3, [r7, #14]

	/* For small fonts make the segments slightly thicker */
	if (font_height < 40) {
 8000bd0:	78bb      	ldrb	r3, [r7, #2]
 8000bd2:	2b27      	cmp	r3, #39	; 0x27
 8000bd4:	d802      	bhi.n	8000bdc <Gfx_Draw7SegDigit+0x64>
		thickness += 2;
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
 8000bd8:	3302      	adds	r3, #2
 8000bda:	73fb      	strb	r3, [r7, #15]
	}

	/* Get ABCDEFG pattern for digit (or zero if digit == -1)*/
	uint8_t pattern = (digit == -1) ? 0 : digit_patterns[digit];
 8000bdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be4:	d004      	beq.n	8000bf0 <Gfx_Draw7SegDigit+0x78>
 8000be6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000bea:	4a78      	ldr	r2, [pc, #480]	; (8000dcc <Gfx_Draw7SegDigit+0x254>)
 8000bec:	5cd3      	ldrb	r3, [r2, r3]
 8000bee:	e000      	b.n	8000bf2 <Gfx_Draw7SegDigit+0x7a>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	737b      	strb	r3, [r7, #13]
	/* Active segments are set to color */
	/* Inactive segments are set to background color */
	uint8_t new_color;

	// Segment A
	new_color = ((pattern & SEG_A_MASK) ? color : background_color);
 8000bf4:	7b7b      	ldrb	r3, [r7, #13]
 8000bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d002      	beq.n	8000c04 <Gfx_Draw7SegDigit+0x8c>
 8000bfe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c02:	e001      	b.n	8000c08 <Gfx_Draw7SegDigit+0x90>
 8000c04:	4b72      	ldr	r3, [pc, #456]	; (8000dd0 <Gfx_Draw7SegDigit+0x258>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	733b      	strb	r3, [r7, #12]
	Gfx_DrawFilledRect(x+thickness, y, seg_len, thickness, new_color);
 8000c0a:	7bfb      	ldrb	r3, [r7, #15]
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	88fb      	ldrh	r3, [r7, #6]
 8000c10:	4413      	add	r3, r2
 8000c12:	b298      	uxth	r0, r3
 8000c14:	7bbb      	ldrb	r3, [r7, #14]
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	b29c      	uxth	r4, r3
 8000c1c:	88b9      	ldrh	r1, [r7, #4]
 8000c1e:	7b3b      	ldrb	r3, [r7, #12]
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	4623      	mov	r3, r4
 8000c24:	f7ff ff46 	bl	8000ab4 <Gfx_DrawFilledRect>

	// Segment B
	new_color = ((pattern & SEG_B_MASK) ? color : background_color);
 8000c28:	7b7b      	ldrb	r3, [r7, #13]
 8000c2a:	f003 0320 	and.w	r3, r3, #32
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d002      	beq.n	8000c38 <Gfx_Draw7SegDigit+0xc0>
 8000c32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c36:	e001      	b.n	8000c3c <Gfx_Draw7SegDigit+0xc4>
 8000c38:	4b65      	ldr	r3, [pc, #404]	; (8000dd0 <Gfx_Draw7SegDigit+0x258>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	733b      	strb	r3, [r7, #12]
	Gfx_DrawFilledRect(x+seg_len+thickness, y+thickness, thickness, seg_len, new_color);
 8000c3e:	7bbb      	ldrb	r3, [r7, #14]
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	88fb      	ldrh	r3, [r7, #6]
 8000c44:	4413      	add	r3, r2
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	4413      	add	r3, r2
 8000c4e:	b298      	uxth	r0, r3
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	88bb      	ldrh	r3, [r7, #4]
 8000c56:	4413      	add	r3, r2
 8000c58:	b299      	uxth	r1, r3
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	7bbb      	ldrb	r3, [r7, #14]
 8000c60:	b29c      	uxth	r4, r3
 8000c62:	7b3b      	ldrb	r3, [r7, #12]
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	4623      	mov	r3, r4
 8000c68:	f7ff ff24 	bl	8000ab4 <Gfx_DrawFilledRect>

	// Segment C
	new_color = ((pattern & SEG_C_MASK) ? color : background_color);
 8000c6c:	7b7b      	ldrb	r3, [r7, #13]
 8000c6e:	f003 0310 	and.w	r3, r3, #16
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d002      	beq.n	8000c7c <Gfx_Draw7SegDigit+0x104>
 8000c76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c7a:	e001      	b.n	8000c80 <Gfx_Draw7SegDigit+0x108>
 8000c7c:	4b54      	ldr	r3, [pc, #336]	; (8000dd0 <Gfx_Draw7SegDigit+0x258>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	733b      	strb	r3, [r7, #12]
	Gfx_DrawFilledRect(x+seg_len+thickness, y+(2*thickness)+seg_len, thickness, seg_len, new_color);
 8000c82:	7bbb      	ldrb	r3, [r7, #14]
 8000c84:	b29a      	uxth	r2, r3
 8000c86:	88fb      	ldrh	r3, [r7, #6]
 8000c88:	4413      	add	r3, r2
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	4413      	add	r3, r2
 8000c92:	b298      	uxth	r0, r3
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	88bb      	ldrh	r3, [r7, #4]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	b29a      	uxth	r2, r3
 8000ca2:	7bbb      	ldrb	r3, [r7, #14]
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	4413      	add	r3, r2
 8000ca8:	b299      	uxth	r1, r3
 8000caa:	7bfb      	ldrb	r3, [r7, #15]
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	7bbb      	ldrb	r3, [r7, #14]
 8000cb0:	b29c      	uxth	r4, r3
 8000cb2:	7b3b      	ldrb	r3, [r7, #12]
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	4623      	mov	r3, r4
 8000cb8:	f7ff fefc 	bl	8000ab4 <Gfx_DrawFilledRect>

	// Segment D
	new_color = ((pattern & SEG_D_MASK) ? color : background_color);
 8000cbc:	7b7b      	ldrb	r3, [r7, #13]
 8000cbe:	f003 0308 	and.w	r3, r3, #8
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d002      	beq.n	8000ccc <Gfx_Draw7SegDigit+0x154>
 8000cc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cca:	e001      	b.n	8000cd0 <Gfx_Draw7SegDigit+0x158>
 8000ccc:	4b40      	ldr	r3, [pc, #256]	; (8000dd0 <Gfx_Draw7SegDigit+0x258>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	733b      	strb	r3, [r7, #12]
	Gfx_DrawFilledRect(x+thickness, y+(2*thickness)+(2*seg_len), seg_len, thickness, new_color);
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	88fb      	ldrh	r3, [r7, #6]
 8000cd8:	4413      	add	r3, r2
 8000cda:	b298      	uxth	r0, r3
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	7bbb      	ldrb	r3, [r7, #14]
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	4413      	add	r3, r2
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	88bb      	ldrh	r3, [r7, #4]
 8000cee:	4413      	add	r3, r2
 8000cf0:	b299      	uxth	r1, r3
 8000cf2:	7bbb      	ldrb	r3, [r7, #14]
 8000cf4:	b29a      	uxth	r2, r3
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	b29c      	uxth	r4, r3
 8000cfa:	7b3b      	ldrb	r3, [r7, #12]
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	4623      	mov	r3, r4
 8000d00:	f7ff fed8 	bl	8000ab4 <Gfx_DrawFilledRect>

	// Segment E
	new_color = ((pattern & SEG_E_MASK) ? color : background_color);
 8000d04:	7b7b      	ldrb	r3, [r7, #13]
 8000d06:	f003 0304 	and.w	r3, r3, #4
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d002      	beq.n	8000d14 <Gfx_Draw7SegDigit+0x19c>
 8000d0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d12:	e001      	b.n	8000d18 <Gfx_Draw7SegDigit+0x1a0>
 8000d14:	4b2e      	ldr	r3, [pc, #184]	; (8000dd0 <Gfx_Draw7SegDigit+0x258>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	733b      	strb	r3, [r7, #12]
	Gfx_DrawFilledRect(x, y+(2*thickness)+seg_len, thickness, seg_len, new_color);
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	88bb      	ldrh	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	7bbb      	ldrb	r3, [r7, #14]
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	4413      	add	r3, r2
 8000d2e:	b299      	uxth	r1, r3
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	7bbb      	ldrb	r3, [r7, #14]
 8000d36:	b29c      	uxth	r4, r3
 8000d38:	88f8      	ldrh	r0, [r7, #6]
 8000d3a:	7b3b      	ldrb	r3, [r7, #12]
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	4623      	mov	r3, r4
 8000d40:	f7ff feb8 	bl	8000ab4 <Gfx_DrawFilledRect>

	// Segment F
	new_color = ((pattern & SEG_F_MASK) ? color : background_color);
 8000d44:	7b7b      	ldrb	r3, [r7, #13]
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d002      	beq.n	8000d54 <Gfx_Draw7SegDigit+0x1dc>
 8000d4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d52:	e001      	b.n	8000d58 <Gfx_Draw7SegDigit+0x1e0>
 8000d54:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <Gfx_Draw7SegDigit+0x258>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	733b      	strb	r3, [r7, #12]
	Gfx_DrawFilledRect(x, y+thickness, thickness, seg_len, new_color);
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	88bb      	ldrh	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	b299      	uxth	r1, r3
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	7bbb      	ldrb	r3, [r7, #14]
 8000d6a:	b29c      	uxth	r4, r3
 8000d6c:	88f8      	ldrh	r0, [r7, #6]
 8000d6e:	7b3b      	ldrb	r3, [r7, #12]
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	4623      	mov	r3, r4
 8000d74:	f7ff fe9e 	bl	8000ab4 <Gfx_DrawFilledRect>

	// Segment G
	new_color = ((pattern & SEG_G_MASK) ? color : background_color);
 8000d78:	7b7b      	ldrb	r3, [r7, #13]
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d002      	beq.n	8000d88 <Gfx_Draw7SegDigit+0x210>
 8000d82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d86:	e001      	b.n	8000d8c <Gfx_Draw7SegDigit+0x214>
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <Gfx_Draw7SegDigit+0x258>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	733b      	strb	r3, [r7, #12]
	Gfx_DrawFilledRect(x+thickness, y+thickness+seg_len, seg_len, thickness, new_color);
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	b29a      	uxth	r2, r3
 8000d92:	88fb      	ldrh	r3, [r7, #6]
 8000d94:	4413      	add	r3, r2
 8000d96:	b298      	uxth	r0, r3
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	88bb      	ldrh	r3, [r7, #4]
 8000d9e:	4413      	add	r3, r2
 8000da0:	b29a      	uxth	r2, r3
 8000da2:	7bbb      	ldrb	r3, [r7, #14]
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	4413      	add	r3, r2
 8000da8:	b299      	uxth	r1, r3
 8000daa:	7bbb      	ldrb	r3, [r7, #14]
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	b29c      	uxth	r4, r3
 8000db2:	7b3b      	ldrb	r3, [r7, #12]
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	4623      	mov	r3, r4
 8000db8:	f7ff fe7c 	bl	8000ab4 <Gfx_DrawFilledRect>
 8000dbc:	e000      	b.n	8000dc0 <Gfx_Draw7SegDigit+0x248>
		return;
 8000dbe:	bf00      	nop
}
 8000dc0:	3714      	adds	r7, #20
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd90      	pop	{r4, r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	cccccccd 	.word	0xcccccccd
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	20012c64 	.word	0x20012c64

08000dd4 <SystemClock_Config>:
UART_HandleTypeDef huart2;	// uart interface for debugging
TIM_HandleTypeDef htim3;	// timer interface for button debouncing
TIM_HandleTypeDef htim2;	// timer interface for lap timing

void SystemClock_Config(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b094      	sub	sp, #80	; 0x50
 8000dd8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dda:	f107 031c 	add.w	r3, r7, #28
 8000dde:	2234      	movs	r2, #52	; 0x34
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f003 fa48 	bl	8004278 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de8:	f107 0308 	add.w	r3, r7, #8
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]

	/* Configure the main internal regulator output voltage */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000df8:	2300      	movs	r3, #0
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	4b2a      	ldr	r3, [pc, #168]	; (8000ea8 <SystemClock_Config+0xd4>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	4a29      	ldr	r2, [pc, #164]	; (8000ea8 <SystemClock_Config+0xd4>)
 8000e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e06:	6413      	str	r3, [r2, #64]	; 0x40
 8000e08:	4b27      	ldr	r3, [pc, #156]	; (8000ea8 <SystemClock_Config+0xd4>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e14:	2300      	movs	r3, #0
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	4b24      	ldr	r3, [pc, #144]	; (8000eac <SystemClock_Config+0xd8>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e20:	4a22      	ldr	r2, [pc, #136]	; (8000eac <SystemClock_Config+0xd8>)
 8000e22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	4b20      	ldr	r3, [pc, #128]	; (8000eac <SystemClock_Config+0xd8>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e30:	603b      	str	r3, [r7, #0]
 8000e32:	683b      	ldr	r3, [r7, #0]

	/* Initialize the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e34:	2302      	movs	r3, #2
 8000e36:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e3c:	2310      	movs	r3, #16
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e40:	2302      	movs	r3, #2
 8000e42:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e44:	2300      	movs	r3, #0
 8000e46:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000e48:	2310      	movs	r3, #16
 8000e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000e4c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e50:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e52:	2304      	movs	r3, #4
 8000e54:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e56:	2302      	movs	r3, #2
 8000e58:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	4618      	mov	r0, r3
 8000e64:	f001 fd72 	bl	800294c <HAL_RCC_OscConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <SystemClock_Config+0x9e>
		Error_Handler();
 8000e6e:	f000 f9b1 	bl	80011d4 <Error_Handler>
	}

	/* Initializes the CPU, AHB and APB buses clocks */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e72:	230f      	movs	r3, #15
 8000e74:	60bb      	str	r3, [r7, #8]
							  	  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e76:	2302      	movs	r3, #2
 8000e78:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e82:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000e88:	f107 0308 	add.w	r3, r7, #8
 8000e8c:	2102      	movs	r1, #2
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f001 fa12 	bl	80022b8 <HAL_RCC_ClockConfig>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <SystemClock_Config+0xca>
		Error_Handler();
 8000e9a:	f000 f99b 	bl	80011d4 <Error_Handler>
	}
}
 8000e9e:	bf00      	nop
 8000ea0:	3750      	adds	r7, #80	; 0x50
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40007000 	.word	0x40007000

08000eb0 <MX_SPI2_Init>:


void MX_SPI2_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000eb4:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <MX_SPI2_Init+0x64>)
 8000eb6:	4a18      	ldr	r2, [pc, #96]	; (8000f18 <MX_SPI2_Init+0x68>)
 8000eb8:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000eba:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <MX_SPI2_Init+0x64>)
 8000ebc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ec0:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ec2:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <MX_SPI2_Init+0x64>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <MX_SPI2_Init+0x64>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <MX_SPI2_Init+0x64>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <MX_SPI2_Init+0x64>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <MX_SPI2_Init+0x64>)
 8000edc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ee0:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <MX_SPI2_Init+0x64>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <MX_SPI2_Init+0x64>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <MX_SPI2_Init+0x64>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ef4:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <MX_SPI2_Init+0x64>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <MX_SPI2_Init+0x64>)
 8000efc:	220a      	movs	r2, #10
 8000efe:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000f00:	4804      	ldr	r0, [pc, #16]	; (8000f14 <MX_SPI2_Init+0x64>)
 8000f02:	f001 ffc1 	bl	8002e88 <HAL_SPI_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_SPI2_Init+0x60>
		Error_Handler();
 8000f0c:	f000 f962 	bl	80011d4 <Error_Handler>
	}
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20012c68 	.word	0x20012c68
 8000f18:	40003800 	.word	0x40003800

08000f1c <MX_USART2_UART_Init>:


void MX_USART2_UART_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	/* USART2 parameter configuration */
	huart2.Instance = USART2;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f22:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <MX_USART2_UART_Init+0x50>)
 8000f24:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f2c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f42:	220c      	movs	r2, #12
 8000f44:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000f52:	4805      	ldr	r0, [pc, #20]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f54:	f002 feaa 	bl	8003cac <HAL_UART_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000f5e:	f000 f939 	bl	80011d4 <Error_Handler>
	}
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20012cc0 	.word	0x20012cc0
 8000f6c:	40004400 	.word	0x40004400

08000f70 <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	4b40      	ldr	r3, [pc, #256]	; (800108c <MX_GPIO_Init+0x11c>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a3f      	ldr	r2, [pc, #252]	; (800108c <MX_GPIO_Init+0x11c>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b3d      	ldr	r3, [pc, #244]	; (800108c <MX_GPIO_Init+0x11c>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b39      	ldr	r3, [pc, #228]	; (800108c <MX_GPIO_Init+0x11c>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a38      	ldr	r2, [pc, #224]	; (800108c <MX_GPIO_Init+0x11c>)
 8000fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b36      	ldr	r3, [pc, #216]	; (800108c <MX_GPIO_Init+0x11c>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	4b32      	ldr	r3, [pc, #200]	; (800108c <MX_GPIO_Init+0x11c>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a31      	ldr	r2, [pc, #196]	; (800108c <MX_GPIO_Init+0x11c>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b2f      	ldr	r3, [pc, #188]	; (800108c <MX_GPIO_Init+0x11c>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	4b2b      	ldr	r3, [pc, #172]	; (800108c <MX_GPIO_Init+0x11c>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a2a      	ldr	r2, [pc, #168]	; (800108c <MX_GPIO_Init+0x11c>)
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b28      	ldr	r3, [pc, #160]	; (800108c <MX_GPIO_Init+0x11c>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]

	/* Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	4825      	ldr	r0, [pc, #148]	; (8001090 <MX_GPIO_Init+0x120>)
 8000ffc:	f001 f928 	bl	8002250 <HAL_GPIO_WritePin>

	/* Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	2120      	movs	r1, #32
 8001004:	4823      	ldr	r0, [pc, #140]	; (8001094 <MX_GPIO_Init+0x124>)
 8001006:	f001 f923 	bl	8002250 <HAL_GPIO_WritePin>

	/* Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, SPI_DCRS_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	2111      	movs	r1, #17
 800100e:	4822      	ldr	r0, [pc, #136]	; (8001098 <MX_GPIO_Init+0x128>)
 8001010:	f001 f91e 	bl	8002250 <HAL_GPIO_WritePin>

	/* Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001014:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001018:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800101a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800101e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4619      	mov	r1, r3
 800102a:	4819      	ldr	r0, [pc, #100]	; (8001090 <MX_GPIO_Init+0x120>)
 800102c:	f000 ff64 	bl	8001ef8 <HAL_GPIO_Init>

	/* Configure GPIO pin : SPI_RESET_Pin */
	GPIO_InitStruct.Pin = SPI_RESET_Pin;
 8001030:	2301      	movs	r3, #1
 8001032:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001034:	2301      	movs	r3, #1
 8001036:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI_RESET_GPIO_Port, &GPIO_InitStruct);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	4812      	ldr	r0, [pc, #72]	; (8001090 <MX_GPIO_Init+0x120>)
 8001048:	f000 ff56 	bl	8001ef8 <HAL_GPIO_Init>

	/* Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800104c:	2320      	movs	r3, #32
 800104e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001050:	2301      	movs	r3, #1
 8001052:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4619      	mov	r1, r3
 8001062:	480c      	ldr	r0, [pc, #48]	; (8001094 <MX_GPIO_Init+0x124>)
 8001064:	f000 ff48 	bl	8001ef8 <HAL_GPIO_Init>

	/* Configure GPIO pins : SPI_DCRS_Pin SPI_CS_Pin */
	GPIO_InitStruct.Pin = SPI_DCRS_Pin|SPI_CS_Pin;
 8001068:	2311      	movs	r3, #17
 800106a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	4806      	ldr	r0, [pc, #24]	; (8001098 <MX_GPIO_Init+0x128>)
 8001080:	f000 ff3a 	bl	8001ef8 <HAL_GPIO_Init>
}
 8001084:	bf00      	nop
 8001086:	3728      	adds	r7, #40	; 0x28
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40023800 	.word	0x40023800
 8001090:	40020800 	.word	0x40020800
 8001094:	40020000 	.word	0x40020000
 8001098:	40020400 	.word	0x40020400

0800109c <MX_TIM2_Init>:


void MX_TIM2_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b0:	463b      	mov	r3, r7
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]

  /* Initialize timer to generate interrupts every 1 second */
  htim2.Instance = TIM2;
 80010b8:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <MX_TIM2_Init+0x98>)
 80010ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 80010c0:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <MX_TIM2_Init+0x98>)
 80010c2:	f242 720f 	movw	r2, #9999	; 0x270f
 80010c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c8:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <MX_TIM2_Init+0x98>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8399;
 80010ce:	4b19      	ldr	r3, [pc, #100]	; (8001134 <MX_TIM2_Init+0x98>)
 80010d0:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80010d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <MX_TIM2_Init+0x98>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010dc:	4b15      	ldr	r3, [pc, #84]	; (8001134 <MX_TIM2_Init+0x98>)
 80010de:	2200      	movs	r2, #0
 80010e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010e2:	4814      	ldr	r0, [pc, #80]	; (8001134 <MX_TIM2_Init+0x98>)
 80010e4:	f002 f960 	bl	80033a8 <HAL_TIM_Base_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80010ee:	f000 f871 	bl	80011d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010f8:	f107 0308 	add.w	r3, r7, #8
 80010fc:	4619      	mov	r1, r3
 80010fe:	480d      	ldr	r0, [pc, #52]	; (8001134 <MX_TIM2_Init+0x98>)
 8001100:	f002 fb1a 	bl	8003738 <HAL_TIM_ConfigClockSource>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800110a:	f000 f863 	bl	80011d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110e:	2300      	movs	r3, #0
 8001110:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001116:	463b      	mov	r3, r7
 8001118:	4619      	mov	r1, r3
 800111a:	4806      	ldr	r0, [pc, #24]	; (8001134 <MX_TIM2_Init+0x98>)
 800111c:	f002 fd36 	bl	8003b8c <HAL_TIMEx_MasterConfigSynchronization>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001126:	f000 f855 	bl	80011d4 <Error_Handler>
  }
}
 800112a:	bf00      	nop
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20012d4c 	.word	0x20012d4c

08001138 <MX_TIM3_Init>:

void MX_TIM3_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800113e:	f107 0308 	add.w	r3, r7, #8
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114c:	463b      	mov	r3, r7
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]

  /* Initialize timer to generate interrupt every 1 milliseconds */
  htim3.Instance = TIM3;
 8001154:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <MX_TIM3_Init+0x94>)
 8001156:	4a1e      	ldr	r2, [pc, #120]	; (80011d0 <MX_TIM3_Init+0x98>)
 8001158:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 800115a:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <MX_TIM3_Init+0x94>)
 800115c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001160:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001162:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <MX_TIM3_Init+0x94>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 83;
 8001168:	4b18      	ldr	r3, [pc, #96]	; (80011cc <MX_TIM3_Init+0x94>)
 800116a:	2253      	movs	r2, #83	; 0x53
 800116c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116e:	4b17      	ldr	r3, [pc, #92]	; (80011cc <MX_TIM3_Init+0x94>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001174:	4b15      	ldr	r3, [pc, #84]	; (80011cc <MX_TIM3_Init+0x94>)
 8001176:	2200      	movs	r2, #0
 8001178:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800117a:	4814      	ldr	r0, [pc, #80]	; (80011cc <MX_TIM3_Init+0x94>)
 800117c:	f002 f914 	bl	80033a8 <HAL_TIM_Base_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001186:	f000 f825 	bl	80011d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800118a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001190:	f107 0308 	add.w	r3, r7, #8
 8001194:	4619      	mov	r1, r3
 8001196:	480d      	ldr	r0, [pc, #52]	; (80011cc <MX_TIM3_Init+0x94>)
 8001198:	f002 face 	bl	8003738 <HAL_TIM_ConfigClockSource>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80011a2:	f000 f817 	bl	80011d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a6:	2300      	movs	r3, #0
 80011a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011ae:	463b      	mov	r3, r7
 80011b0:	4619      	mov	r1, r3
 80011b2:	4806      	ldr	r0, [pc, #24]	; (80011cc <MX_TIM3_Init+0x94>)
 80011b4:	f002 fcea 	bl	8003b8c <HAL_TIMEx_MasterConfigSynchronization>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80011be:	f000 f809 	bl	80011d4 <Error_Handler>
  }
}
 80011c2:	bf00      	nop
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20012d04 	.word	0x20012d04
 80011d0:	40000400 	.word	0x40000400

080011d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * Auto-generated by CubeIDE.
  */
void Error_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d8:	b672      	cpsid	i
}
 80011da:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011dc:	e7fe      	b.n	80011dc <Error_Handler+0x8>

080011de <Led_Init>:
 */

#include "led.h"
#include "main.h"

void Led_Init(void) {
 80011de:	b580      	push	{r7, lr}
 80011e0:	af00      	add	r7, sp, #0
	Led_Off(LED_ID_1);
 80011e2:	2000      	movs	r0, #0
 80011e4:	f000 f808 	bl	80011f8 <Led_Off>
	Led_Off(LED_ID_2);
 80011e8:	2001      	movs	r0, #1
 80011ea:	f000 f805 	bl	80011f8 <Led_Off>
	Led_Off(LED_ID_3);
 80011ee:	2002      	movs	r0, #2
 80011f0:	f000 f802 	bl	80011f8 <Led_Off>
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <Led_Off>:
		default:
			break;
	}
}

void Led_Off(led_id_t led_id) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
	switch (led_id) {
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2b02      	cmp	r3, #2
 8001206:	d00c      	beq.n	8001222 <Led_Off+0x2a>
 8001208:	2b02      	cmp	r3, #2
 800120a:	dc0c      	bgt.n	8001226 <Led_Off+0x2e>
 800120c:	2b00      	cmp	r3, #0
 800120e:	d002      	beq.n	8001216 <Led_Off+0x1e>
 8001210:	2b01      	cmp	r3, #1
 8001212:	d00a      	beq.n	800122a <Led_Off+0x32>
			break;
		case LED_ID_3:
			// TODO turn led off
			break;
		default:
			break;
 8001214:	e007      	b.n	8001226 <Led_Off+0x2e>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2120      	movs	r1, #32
 800121a:	4806      	ldr	r0, [pc, #24]	; (8001234 <Led_Off+0x3c>)
 800121c:	f001 f818 	bl	8002250 <HAL_GPIO_WritePin>
			break;
 8001220:	e004      	b.n	800122c <Led_Off+0x34>
			break;
 8001222:	bf00      	nop
 8001224:	e002      	b.n	800122c <Led_Off+0x34>
			break;
 8001226:	bf00      	nop
 8001228:	e000      	b.n	800122c <Led_Off+0x34>
			break;
 800122a:	bf00      	nop
	}
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40020000 	.word	0x40020000

08001238 <Led_Toggle>:

void Led_Toggle(led_id_t led_id) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
	switch (led_id) {
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	2b02      	cmp	r3, #2
 8001246:	d00b      	beq.n	8001260 <Led_Toggle+0x28>
 8001248:	2b02      	cmp	r3, #2
 800124a:	dc0b      	bgt.n	8001264 <Led_Toggle+0x2c>
 800124c:	2b00      	cmp	r3, #0
 800124e:	d002      	beq.n	8001256 <Led_Toggle+0x1e>
 8001250:	2b01      	cmp	r3, #1
 8001252:	d009      	beq.n	8001268 <Led_Toggle+0x30>
			break;
		case LED_ID_3:
			// TODO toggle LED
			break;
		default:
			break;
 8001254:	e006      	b.n	8001264 <Led_Toggle+0x2c>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001256:	2120      	movs	r1, #32
 8001258:	4806      	ldr	r0, [pc, #24]	; (8001274 <Led_Toggle+0x3c>)
 800125a:	f001 f812 	bl	8002282 <HAL_GPIO_TogglePin>
			break;
 800125e:	e004      	b.n	800126a <Led_Toggle+0x32>
			break;
 8001260:	bf00      	nop
 8001262:	e002      	b.n	800126a <Led_Toggle+0x32>
			break;
 8001264:	bf00      	nop
 8001266:	e000      	b.n	800126a <Led_Toggle+0x32>
			break;
 8001268:	bf00      	nop
	}
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40020000 	.word	0x40020000

08001278 <main>:
#include "pot.h"
#include "timer.h"
#include "ui.h"

int main(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, initializes the flash interface and the systick */
	HAL_Init();
 800127c:	f000 fc94 	bl	8001ba8 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8001280:	f7ff fda8 	bl	8000dd4 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001284:	f7ff fe74 	bl	8000f70 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001288:	f7ff fe48 	bl	8000f1c <MX_USART2_UART_Init>
	MX_SPI2_Init();
 800128c:	f7ff fe10 	bl	8000eb0 <MX_SPI2_Init>
	MX_TIM2_Init();
 8001290:	f7ff ff04 	bl	800109c <MX_TIM2_Init>
	MX_TIM3_Init();
 8001294:	f7ff ff50 	bl	8001138 <MX_TIM3_Init>

	/* Turn off all LEDs */
	Led_Init();
 8001298:	f7ff ffa1 	bl	80011de <Led_Init>

	/* Reset button controllers */
	Button_Init();
 800129c:	f7ff f934 	bl	8000508 <Button_Init>

	/* Initialize rotary encoder controllers */
	Encoder_Init();
 80012a0:	f7ff fb5c 	bl	800095c <Encoder_Init>

	/* Initialize potentiometer controllers */
	Pot_Init();
 80012a4:	f000 f80a 	bl	80012bc <Pot_Init>

	/* Initialize display */
	Display_Init();
 80012a8:	f7ff f9ae 	bl	8000608 <Display_Init>

	/* Initialize graphics unit */
	Gfx_Init();
 80012ac:	f7ff fbe2 	bl	8000a74 <Gfx_Init>

	/* Initialize UI */
	UI_Init();
 80012b0:	f000 fa00 	bl	80016b4 <UI_Init>

	/* Start interrupts from timer */
	Timer_EnableInterrupts();
 80012b4:	f000 f99e 	bl	80015f4 <Timer_EnableInterrupts>

	/* Infinite main loop */
	while (1)
 80012b8:	e7fe      	b.n	80012b8 <main+0x40>
	...

080012bc <Pot_Init>:
static pot_t pot1, pot2;
static pot_t *pot_list[] = {&pot1, &pot2};

static pot_id_t current_pot = 0;

void Pot_Init(void) {
 80012bc:	b480      	push	{r7}
 80012be:	b087      	sub	sp, #28
 80012c0:	af00      	add	r7, sp, #0
	pot1 = (pot_t) {
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <Pot_Init+0x38>)
 80012c4:	461a      	mov	r2, r3
 80012c6:	2300      	movs	r3, #0
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	6053      	str	r3, [r2, #4]
 80012cc:	6093      	str	r3, [r2, #8]
		.last_reading = 0,
		.port = 0,
		.pin = 0
	};

	pot2 = (pot_t) {
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <Pot_Init+0x3c>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	701a      	strb	r2, [r3, #0]
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <Pot_Init+0x3c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	805a      	strh	r2, [r3, #2]
 80012da:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <Pot_Init+0x3c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <Pot_Init+0x3c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
		.last_reading = 0,
		.port = 0,
		.pin = 0
	};

}
 80012e6:	bf00      	nop
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	20012d94 	.word	0x20012d94
 80012f8:	20012da0 	.word	0x20012da0

080012fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <HAL_MspInit+0x4c>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	4a0f      	ldr	r2, [pc, #60]	; (8001348 <HAL_MspInit+0x4c>)
 800130c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001310:	6453      	str	r3, [r2, #68]	; 0x44
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <HAL_MspInit+0x4c>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	603b      	str	r3, [r7, #0]
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <HAL_MspInit+0x4c>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	4a08      	ldr	r2, [pc, #32]	; (8001348 <HAL_MspInit+0x4c>)
 8001328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132c:	6413      	str	r3, [r2, #64]	; 0x40
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_MspInit+0x4c>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800133a:	2007      	movs	r0, #7
 800133c:	f000 fd9a 	bl	8001e74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40023800 	.word	0x40023800

0800134c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a30      	ldr	r2, [pc, #192]	; (800142c <HAL_SPI_MspInit+0xe0>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d15a      	bne.n	8001424 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b2f      	ldr	r3, [pc, #188]	; (8001430 <HAL_SPI_MspInit+0xe4>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	4a2e      	ldr	r2, [pc, #184]	; (8001430 <HAL_SPI_MspInit+0xe4>)
 8001378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800137c:	6413      	str	r3, [r2, #64]	; 0x40
 800137e:	4b2c      	ldr	r3, [pc, #176]	; (8001430 <HAL_SPI_MspInit+0xe4>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b28      	ldr	r3, [pc, #160]	; (8001430 <HAL_SPI_MspInit+0xe4>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a27      	ldr	r2, [pc, #156]	; (8001430 <HAL_SPI_MspInit+0xe4>)
 8001394:	f043 0304 	orr.w	r3, r3, #4
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b25      	ldr	r3, [pc, #148]	; (8001430 <HAL_SPI_MspInit+0xe4>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	4b21      	ldr	r3, [pc, #132]	; (8001430 <HAL_SPI_MspInit+0xe4>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a20      	ldr	r2, [pc, #128]	; (8001430 <HAL_SPI_MspInit+0xe4>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <HAL_SPI_MspInit+0xe4>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013c2:	2302      	movs	r3, #2
 80013c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ce:	2303      	movs	r3, #3
 80013d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80013d2:	2307      	movs	r3, #7
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	4815      	ldr	r0, [pc, #84]	; (8001434 <HAL_SPI_MspInit+0xe8>)
 80013de:	f000 fd8b 	bl	8001ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013e2:	2304      	movs	r3, #4
 80013e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ee:	2303      	movs	r3, #3
 80013f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013f2:	2305      	movs	r3, #5
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	4619      	mov	r1, r3
 80013fc:	480d      	ldr	r0, [pc, #52]	; (8001434 <HAL_SPI_MspInit+0xe8>)
 80013fe:	f000 fd7b 	bl	8001ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001410:	2303      	movs	r3, #3
 8001412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001414:	2305      	movs	r3, #5
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	4619      	mov	r1, r3
 800141e:	4806      	ldr	r0, [pc, #24]	; (8001438 <HAL_SPI_MspInit+0xec>)
 8001420:	f000 fd6a 	bl	8001ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001424:	bf00      	nop
 8001426:	3728      	adds	r7, #40	; 0x28
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40003800 	.word	0x40003800
 8001430:	40023800 	.word	0x40023800
 8001434:	40020800 	.word	0x40020800
 8001438:	40020400 	.word	0x40020400

0800143c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800144c:	d116      	bne.n	800147c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <HAL_TIM_Base_MspInit+0x80>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a19      	ldr	r2, [pc, #100]	; (80014bc <HAL_TIM_Base_MspInit+0x80>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
 800145e:	4b17      	ldr	r3, [pc, #92]	; (80014bc <HAL_TIM_Base_MspInit+0x80>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	201c      	movs	r0, #28
 8001470:	f000 fd0b 	bl	8001e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001474:	201c      	movs	r0, #28
 8001476:	f000 fd24 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800147a:	e01a      	b.n	80014b2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a0f      	ldr	r2, [pc, #60]	; (80014c0 <HAL_TIM_Base_MspInit+0x84>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d115      	bne.n	80014b2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <HAL_TIM_Base_MspInit+0x80>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <HAL_TIM_Base_MspInit+0x80>)
 8001490:	f043 0302 	orr.w	r3, r3, #2
 8001494:	6413      	str	r3, [r2, #64]	; 0x40
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <HAL_TIM_Base_MspInit+0x80>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2100      	movs	r1, #0
 80014a6:	201d      	movs	r0, #29
 80014a8:	f000 fcef 	bl	8001e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014ac:	201d      	movs	r0, #29
 80014ae:	f000 fd08 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
}
 80014b2:	bf00      	nop
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40000400 	.word	0x40000400

080014c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	; 0x28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a19      	ldr	r2, [pc, #100]	; (8001548 <HAL_UART_MspInit+0x84>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d12b      	bne.n	800153e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	4b18      	ldr	r3, [pc, #96]	; (800154c <HAL_UART_MspInit+0x88>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	4a17      	ldr	r2, [pc, #92]	; (800154c <HAL_UART_MspInit+0x88>)
 80014f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f4:	6413      	str	r3, [r2, #64]	; 0x40
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <HAL_UART_MspInit+0x88>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <HAL_UART_MspInit+0x88>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a10      	ldr	r2, [pc, #64]	; (800154c <HAL_UART_MspInit+0x88>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <HAL_UART_MspInit+0x88>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800151e:	230c      	movs	r3, #12
 8001520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001522:	2302      	movs	r3, #2
 8001524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152a:	2303      	movs	r3, #3
 800152c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800152e:	2307      	movs	r3, #7
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	4805      	ldr	r0, [pc, #20]	; (8001550 <HAL_UART_MspInit+0x8c>)
 800153a:	f000 fcdd 	bl	8001ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800153e:	bf00      	nop
 8001540:	3728      	adds	r7, #40	; 0x28
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40004400 	.word	0x40004400
 800154c:	40023800 	.word	0x40023800
 8001550:	40020000 	.word	0x40020000

08001554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <NMI_Handler+0x4>

0800155a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800155e:	e7fe      	b.n	800155e <HardFault_Handler+0x4>

08001560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <MemManage_Handler+0x4>

08001566 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800156a:	e7fe      	b.n	800156a <BusFault_Handler+0x4>

0800156c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <UsageFault_Handler+0x4>

08001572 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a0:	f000 fb54 	bl	8001c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015ac:	4802      	ldr	r0, [pc, #8]	; (80015b8 <TIM2_IRQHandler+0x10>)
 80015ae:	f001 ffbb 	bl	8003528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20012d4c 	.word	0x20012d4c

080015bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015c0:	4802      	ldr	r0, [pc, #8]	; (80015cc <TIM3_IRQHandler+0x10>)
 80015c2:	f001 ffb1 	bl	8003528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20012d04 	.word	0x20012d04

080015d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <SystemInit+0x20>)
 80015d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015da:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <SystemInit+0x20>)
 80015dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <Timer_EnableInterrupts>:

/* Stop watch variables (seconds) */
static uint32_t time_elapsed = 0;
static uint16_t current_ms = 0;

void Timer_EnableInterrupts(void) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80015f8:	4803      	ldr	r0, [pc, #12]	; (8001608 <Timer_EnableInterrupts+0x14>)
 80015fa:	f001 ff25 	bl	8003448 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 80015fe:	4803      	ldr	r0, [pc, #12]	; (800160c <Timer_EnableInterrupts+0x18>)
 8001600:	f001 ff22 	bl	8003448 <HAL_TIM_Base_Start_IT>
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20012d4c 	.word	0x20012d4c
 800160c:	20012d04 	.word	0x20012d04

08001610 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a21      	ldr	r2, [pc, #132]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d10a      	bne.n	8001636 <HAL_TIM_PeriodElapsedCallback+0x26>
		// Should be called every 1ms
		Button_Debounce();
 8001620:	f7fe ffa4 	bl	800056c <Button_Debounce>
		Encoder_Debounce();
 8001624:	f7ff f9de 	bl	80009e4 <Encoder_Debounce>

		// Read ADC every 50 ms
		if (current_ms % 50 == 0) {

		}
		current_ms++;
 8001628:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	3301      	adds	r3, #1
 800162e:	b29a      	uxth	r2, r3
 8001630:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001632:	801a      	strh	r2, [r3, #0]

		// Add one more second to time elapsed
		time_elapsed++;
		current_ms = 0;
	}
}
 8001634:	e030      	b.n	8001698 <HAL_TIM_PeriodElapsedCallback+0x88>
	} else if (htim == &htim2) {
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a1b      	ldr	r2, [pc, #108]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d12c      	bne.n	8001698 <HAL_TIM_PeriodElapsedCallback+0x88>
		UI_Update_Laptime(time_elapsed);
 800163e:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f000 f844 	bl	80016d0 <UI_Update_Laptime>
		UI_Update_BatteryPct(78);
 8001648:	204e      	movs	r0, #78	; 0x4e
 800164a:	f000 f8c5 	bl	80017d8 <UI_Update_BatteryPct>
		UI_Update_RPM(2173);
 800164e:	f640 007d 	movw	r0, #2173	; 0x87d
 8001652:	f000 f925 	bl	80018a0 <UI_Update_RPM>
		UI_Update_Speedometer(69);
 8001656:	2045      	movs	r0, #69	; 0x45
 8001658:	f000 fa24 	bl	8001aa4 <UI_Update_Speedometer>
		if (time_elapsed % 10 == 0) {
 800165c:	4b13      	ldr	r3, [pc, #76]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800165e:	6819      	ldr	r1, [r3, #0]
 8001660:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001662:	fba3 2301 	umull	r2, r3, r3, r1
 8001666:	08da      	lsrs	r2, r3, #3
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	1aca      	subs	r2, r1, r3
 8001672:	2a00      	cmp	r2, #0
 8001674:	d108      	bne.n	8001688 <HAL_TIM_PeriodElapsedCallback+0x78>
			UI_Update_WheelTemps(71,73,68,72);
 8001676:	2348      	movs	r3, #72	; 0x48
 8001678:	2244      	movs	r2, #68	; 0x44
 800167a:	2149      	movs	r1, #73	; 0x49
 800167c:	2047      	movs	r0, #71	; 0x47
 800167e:	f000 f973 	bl	8001968 <UI_Update_WheelTemps>
			UI_Update_CoolingTemp(88);
 8001682:	2058      	movs	r0, #88	; 0x58
 8001684:	f000 fa3a 	bl	8001afc <UI_Update_CoolingTemp>
		time_elapsed++;
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	3301      	adds	r3, #1
 800168e:	4a07      	ldr	r2, [pc, #28]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001690:	6013      	str	r3, [r2, #0]
		current_ms = 0;
 8001692:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001694:	2200      	movs	r2, #0
 8001696:	801a      	strh	r2, [r3, #0]
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20012d04 	.word	0x20012d04
 80016a4:	20012db0 	.word	0x20012db0
 80016a8:	20012d4c 	.word	0x20012d4c
 80016ac:	20012dac 	.word	0x20012dac
 80016b0:	cccccccd 	.word	0xcccccccd

080016b4 <UI_Init>:
	.h = 320,
	.data = drive_mode_background_img,
	.data_len = DRIVE_MODE_BACKGROUND_IMG_LEN
};

void UI_Init(void) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	Gfx_SetBackground(COLOR_BLACK);
 80016b8:	2000      	movs	r0, #0
 80016ba:	f7ff f9e3 	bl	8000a84 <Gfx_SetBackground>
	Gfx_DrawImage(&background_img, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	4802      	ldr	r0, [pc, #8]	; (80016cc <UI_Init+0x18>)
 80016c4:	f7ff fa31 	bl	8000b2a <Gfx_DrawImage>
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20012c18 	.word	0x20012c18

080016d0 <UI_Update_Laptime>:

void UI_Reset_Laptime(uint32_t time_elapsed) {
	lap_time_start = time_elapsed;
}

void UI_Update_Laptime(uint32_t time_elapsed) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af02      	add	r7, sp, #8
 80016d6:	6078      	str	r0, [r7, #4]
	uint8_t minutes = (time_elapsed - lap_time_start) / 60;
 80016d8:	4b3c      	ldr	r3, [pc, #240]	; (80017cc <UI_Update_Laptime+0xfc>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	4a3b      	ldr	r2, [pc, #236]	; (80017d0 <UI_Update_Laptime+0x100>)
 80016e2:	fba2 2303 	umull	r2, r3, r2, r3
 80016e6:	095b      	lsrs	r3, r3, #5
 80016e8:	73fb      	strb	r3, [r7, #15]
	uint8_t seconds = (time_elapsed - lap_time_start) % 60;
 80016ea:	4b38      	ldr	r3, [pc, #224]	; (80017cc <UI_Update_Laptime+0xfc>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	1ad1      	subs	r1, r2, r3
 80016f2:	4b37      	ldr	r3, [pc, #220]	; (80017d0 <UI_Update_Laptime+0x100>)
 80016f4:	fba3 2301 	umull	r2, r3, r3, r1
 80016f8:	095a      	lsrs	r2, r3, #5
 80016fa:	4613      	mov	r3, r2
 80016fc:	011b      	lsls	r3, r3, #4
 80016fe:	1a9b      	subs	r3, r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	1aca      	subs	r2, r1, r3
 8001704:	4613      	mov	r3, r2
 8001706:	73bb      	strb	r3, [r7, #14]

	Gfx_Draw7SegDigit(325, 260, minutes / 10, 40, COLOR_PINK);
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	4a32      	ldr	r2, [pc, #200]	; (80017d4 <UI_Update_Laptime+0x104>)
 800170c:	fba2 2303 	umull	r2, r3, r2, r3
 8001710:	08db      	lsrs	r3, r3, #3
 8001712:	b2db      	uxtb	r3, r3
 8001714:	b25a      	sxtb	r2, r3
 8001716:	232d      	movs	r3, #45	; 0x2d
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	2328      	movs	r3, #40	; 0x28
 800171c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001720:	f240 1045 	movw	r0, #325	; 0x145
 8001724:	f7ff fa28 	bl	8000b78 <Gfx_Draw7SegDigit>
	Gfx_Draw7SegDigit(355, 260, minutes % 10, 40, COLOR_PINK);
 8001728:	7bfa      	ldrb	r2, [r7, #15]
 800172a:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <UI_Update_Laptime+0x104>)
 800172c:	fba3 1302 	umull	r1, r3, r3, r2
 8001730:	08d9      	lsrs	r1, r3, #3
 8001732:	460b      	mov	r3, r1
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	440b      	add	r3, r1
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	b2db      	uxtb	r3, r3
 800173e:	b25a      	sxtb	r2, r3
 8001740:	232d      	movs	r3, #45	; 0x2d
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	2328      	movs	r3, #40	; 0x28
 8001746:	f44f 7182 	mov.w	r1, #260	; 0x104
 800174a:	f240 1063 	movw	r0, #355	; 0x163
 800174e:	f7ff fa13 	bl	8000b78 <Gfx_Draw7SegDigit>
	Gfx_Draw7SegDigit(405, 260, seconds / 10, 40, COLOR_PINK);
 8001752:	7bbb      	ldrb	r3, [r7, #14]
 8001754:	4a1f      	ldr	r2, [pc, #124]	; (80017d4 <UI_Update_Laptime+0x104>)
 8001756:	fba2 2303 	umull	r2, r3, r2, r3
 800175a:	08db      	lsrs	r3, r3, #3
 800175c:	b2db      	uxtb	r3, r3
 800175e:	b25a      	sxtb	r2, r3
 8001760:	232d      	movs	r3, #45	; 0x2d
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	2328      	movs	r3, #40	; 0x28
 8001766:	f44f 7182 	mov.w	r1, #260	; 0x104
 800176a:	f240 1095 	movw	r0, #405	; 0x195
 800176e:	f7ff fa03 	bl	8000b78 <Gfx_Draw7SegDigit>
	Gfx_Draw7SegDigit(435, 260, seconds % 10, 40, COLOR_PINK);
 8001772:	7bba      	ldrb	r2, [r7, #14]
 8001774:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <UI_Update_Laptime+0x104>)
 8001776:	fba3 1302 	umull	r1, r3, r3, r2
 800177a:	08d9      	lsrs	r1, r3, #3
 800177c:	460b      	mov	r3, r1
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	440b      	add	r3, r1
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	b2db      	uxtb	r3, r3
 8001788:	b25a      	sxtb	r2, r3
 800178a:	232d      	movs	r3, #45	; 0x2d
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	2328      	movs	r3, #40	; 0x28
 8001790:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001794:	f240 10b3 	movw	r0, #435	; 0x1b3
 8001798:	f7ff f9ee 	bl	8000b78 <Gfx_Draw7SegDigit>
	Gfx_DrawFilledRect(390, 270, 5, 5, COLOR_PINK);
 800179c:	232d      	movs	r3, #45	; 0x2d
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	2305      	movs	r3, #5
 80017a2:	2205      	movs	r2, #5
 80017a4:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80017a8:	f44f 70c3 	mov.w	r0, #390	; 0x186
 80017ac:	f7ff f982 	bl	8000ab4 <Gfx_DrawFilledRect>
	Gfx_DrawFilledRect(390, 290, 5, 5, COLOR_PINK);
 80017b0:	232d      	movs	r3, #45	; 0x2d
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	2305      	movs	r3, #5
 80017b6:	2205      	movs	r2, #5
 80017b8:	f44f 7191 	mov.w	r1, #290	; 0x122
 80017bc:	f44f 70c3 	mov.w	r0, #390	; 0x186
 80017c0:	f7ff f978 	bl	8000ab4 <Gfx_DrawFilledRect>
}
 80017c4:	bf00      	nop
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20012db4 	.word	0x20012db4
 80017d0:	88888889 	.word	0x88888889
 80017d4:	cccccccd 	.word	0xcccccccd

080017d8 <UI_Update_BatteryPct>:

void UI_Update_BatteryPct(uint8_t battery_pct) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af02      	add	r7, sp, #8
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
	uint8_t color;
	if (battery_pct > BATTERY_THRESHOLD_PCT_YELLOW) {
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	2b3c      	cmp	r3, #60	; 0x3c
 80017e6:	d902      	bls.n	80017ee <UI_Update_BatteryPct+0x16>
		color = COLOR_GREEN;
 80017e8:	2312      	movs	r3, #18
 80017ea:	73fb      	strb	r3, [r7, #15]
 80017ec:	e007      	b.n	80017fe <UI_Update_BatteryPct+0x26>
	} else if (battery_pct > BATTERY_THRESHOLD_PCT_RED) {
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	2b1e      	cmp	r3, #30
 80017f2:	d902      	bls.n	80017fa <UI_Update_BatteryPct+0x22>
		color = COLOR_YELLOW;
 80017f4:	2336      	movs	r3, #54	; 0x36
 80017f6:	73fb      	strb	r3, [r7, #15]
 80017f8:	e001      	b.n	80017fe <UI_Update_BatteryPct+0x26>
	} else {
		color = COLOR_RED;
 80017fa:	2324      	movs	r3, #36	; 0x24
 80017fc:	73fb      	strb	r3, [r7, #15]
	}

	uint8_t width = battery_pct * BATTERY_ICON_WIDTH / 100;
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	224c      	movs	r2, #76	; 0x4c
 8001802:	fb02 f303 	mul.w	r3, r2, r3
 8001806:	4a24      	ldr	r2, [pc, #144]	; (8001898 <UI_Update_BatteryPct+0xc0>)
 8001808:	fb82 1203 	smull	r1, r2, r2, r3
 800180c:	1152      	asrs	r2, r2, #5
 800180e:	17db      	asrs	r3, r3, #31
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	73bb      	strb	r3, [r7, #14]
	Gfx_DrawFilledRect(295, 15, width, BATTERY_ICON_HEIGHT, color);
 8001814:	7bbb      	ldrb	r3, [r7, #14]
 8001816:	b29a      	uxth	r2, r3
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	2323      	movs	r3, #35	; 0x23
 800181e:	210f      	movs	r1, #15
 8001820:	f240 1027 	movw	r0, #295	; 0x127
 8001824:	f7ff f946 	bl	8000ab4 <Gfx_DrawFilledRect>
	Gfx_DrawFilledRect(295+width, 15, BATTERY_ICON_WIDTH - width, BATTERY_ICON_HEIGHT, COLOR_BLACK);
 8001828:	7bbb      	ldrb	r3, [r7, #14]
 800182a:	b29b      	uxth	r3, r3
 800182c:	f203 1327 	addw	r3, r3, #295	; 0x127
 8001830:	b298      	uxth	r0, r3
 8001832:	7bbb      	ldrb	r3, [r7, #14]
 8001834:	b29b      	uxth	r3, r3
 8001836:	f1c3 034c 	rsb	r3, r3, #76	; 0x4c
 800183a:	b29a      	uxth	r2, r3
 800183c:	2300      	movs	r3, #0
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	2323      	movs	r3, #35	; 0x23
 8001842:	210f      	movs	r1, #15
 8001844:	f7ff f936 	bl	8000ab4 <Gfx_DrawFilledRect>

	/* Battery */
	Gfx_Draw7SegDigit(390, 20, battery_pct / 10, 25, COLOR_GREEN);
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	4a14      	ldr	r2, [pc, #80]	; (800189c <UI_Update_BatteryPct+0xc4>)
 800184c:	fba2 2303 	umull	r2, r3, r2, r3
 8001850:	08db      	lsrs	r3, r3, #3
 8001852:	b2db      	uxtb	r3, r3
 8001854:	b25a      	sxtb	r2, r3
 8001856:	2312      	movs	r3, #18
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	2319      	movs	r3, #25
 800185c:	2114      	movs	r1, #20
 800185e:	f44f 70c3 	mov.w	r0, #390	; 0x186
 8001862:	f7ff f989 	bl	8000b78 <Gfx_Draw7SegDigit>
	Gfx_Draw7SegDigit(410, 20, battery_pct % 10, 25, COLOR_GREEN);
 8001866:	79fa      	ldrb	r2, [r7, #7]
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <UI_Update_BatteryPct+0xc4>)
 800186a:	fba3 1302 	umull	r1, r3, r3, r2
 800186e:	08d9      	lsrs	r1, r3, #3
 8001870:	460b      	mov	r3, r1
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	440b      	add	r3, r1
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	b2db      	uxtb	r3, r3
 800187c:	b25a      	sxtb	r2, r3
 800187e:	2312      	movs	r3, #18
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	2319      	movs	r3, #25
 8001884:	2114      	movs	r1, #20
 8001886:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 800188a:	f7ff f975 	bl	8000b78 <Gfx_Draw7SegDigit>
}
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	51eb851f 	.word	0x51eb851f
 800189c:	cccccccd 	.word	0xcccccccd

080018a0 <UI_Update_RPM>:

void UI_Update_RPM(uint16_t rpm) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af02      	add	r7, sp, #8
 80018a6:	4603      	mov	r3, r0
 80018a8:	80fb      	strh	r3, [r7, #6]
	Gfx_Draw7SegDigit(195, 260, rpm / 1000, 40, COLOR_GREEN);
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	4a2b      	ldr	r2, [pc, #172]	; (800195c <UI_Update_RPM+0xbc>)
 80018ae:	fba2 2303 	umull	r2, r3, r2, r3
 80018b2:	099b      	lsrs	r3, r3, #6
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	b25a      	sxtb	r2, r3
 80018b8:	2312      	movs	r3, #18
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	2328      	movs	r3, #40	; 0x28
 80018be:	f44f 7182 	mov.w	r1, #260	; 0x104
 80018c2:	20c3      	movs	r0, #195	; 0xc3
 80018c4:	f7ff f958 	bl	8000b78 <Gfx_Draw7SegDigit>
	Gfx_Draw7SegDigit(220, 260, (rpm / 100) % 10, 40, COLOR_GREEN);
 80018c8:	88fb      	ldrh	r3, [r7, #6]
 80018ca:	4a25      	ldr	r2, [pc, #148]	; (8001960 <UI_Update_RPM+0xc0>)
 80018cc:	fba2 2303 	umull	r2, r3, r2, r3
 80018d0:	095b      	lsrs	r3, r3, #5
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	4b23      	ldr	r3, [pc, #140]	; (8001964 <UI_Update_RPM+0xc4>)
 80018d6:	fba3 1302 	umull	r1, r3, r3, r2
 80018da:	08d9      	lsrs	r1, r3, #3
 80018dc:	460b      	mov	r3, r1
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	440b      	add	r3, r1
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	b25a      	sxtb	r2, r3
 80018ea:	2312      	movs	r3, #18
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2328      	movs	r3, #40	; 0x28
 80018f0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80018f4:	20dc      	movs	r0, #220	; 0xdc
 80018f6:	f7ff f93f 	bl	8000b78 <Gfx_Draw7SegDigit>
	Gfx_Draw7SegDigit(245, 260, (rpm % 100) / 10, 40, COLOR_GREEN);
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	4a18      	ldr	r2, [pc, #96]	; (8001960 <UI_Update_RPM+0xc0>)
 80018fe:	fba2 1203 	umull	r1, r2, r2, r3
 8001902:	0952      	lsrs	r2, r2, #5
 8001904:	2164      	movs	r1, #100	; 0x64
 8001906:	fb01 f202 	mul.w	r2, r1, r2
 800190a:	1a9b      	subs	r3, r3, r2
 800190c:	b29b      	uxth	r3, r3
 800190e:	4a15      	ldr	r2, [pc, #84]	; (8001964 <UI_Update_RPM+0xc4>)
 8001910:	fba2 2303 	umull	r2, r3, r2, r3
 8001914:	08db      	lsrs	r3, r3, #3
 8001916:	b29b      	uxth	r3, r3
 8001918:	b25a      	sxtb	r2, r3
 800191a:	2312      	movs	r3, #18
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	2328      	movs	r3, #40	; 0x28
 8001920:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001924:	20f5      	movs	r0, #245	; 0xf5
 8001926:	f7ff f927 	bl	8000b78 <Gfx_Draw7SegDigit>
	Gfx_Draw7SegDigit(270, 260, rpm % 10, 40, COLOR_GREEN);
 800192a:	88fa      	ldrh	r2, [r7, #6]
 800192c:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <UI_Update_RPM+0xc4>)
 800192e:	fba3 1302 	umull	r1, r3, r3, r2
 8001932:	08d9      	lsrs	r1, r3, #3
 8001934:	460b      	mov	r3, r1
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	b29b      	uxth	r3, r3
 8001940:	b25a      	sxtb	r2, r3
 8001942:	2312      	movs	r3, #18
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	2328      	movs	r3, #40	; 0x28
 8001948:	f44f 7182 	mov.w	r1, #260	; 0x104
 800194c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8001950:	f7ff f912 	bl	8000b78 <Gfx_Draw7SegDigit>
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	10624dd3 	.word	0x10624dd3
 8001960:	51eb851f 	.word	0x51eb851f
 8001964:	cccccccd 	.word	0xcccccccd

08001968 <UI_Update_WheelTemps>:

void UI_Update_WheelTemps(uint8_t front_left, uint8_t front_right,
		  	  	  	  	  uint8_t back_left, uint8_t back_right) {
 8001968:	b590      	push	{r4, r7, lr}
 800196a:	b085      	sub	sp, #20
 800196c:	af02      	add	r7, sp, #8
 800196e:	4604      	mov	r4, r0
 8001970:	4608      	mov	r0, r1
 8001972:	4611      	mov	r1, r2
 8001974:	461a      	mov	r2, r3
 8001976:	4623      	mov	r3, r4
 8001978:	71fb      	strb	r3, [r7, #7]
 800197a:	4603      	mov	r3, r0
 800197c:	71bb      	strb	r3, [r7, #6]
 800197e:	460b      	mov	r3, r1
 8001980:	717b      	strb	r3, [r7, #5]
 8001982:	4613      	mov	r3, r2
 8001984:	713b      	strb	r3, [r7, #4]
	Gfx_Draw7SegDigit(5, 230, front_left / 10, 25, COLOR_CYAN);
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	4a45      	ldr	r2, [pc, #276]	; (8001aa0 <UI_Update_WheelTemps+0x138>)
 800198a:	fba2 2303 	umull	r2, r3, r2, r3
 800198e:	08db      	lsrs	r3, r3, #3
 8001990:	b2db      	uxtb	r3, r3
 8001992:	b25a      	sxtb	r2, r3
 8001994:	231a      	movs	r3, #26
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	2319      	movs	r3, #25
 800199a:	21e6      	movs	r1, #230	; 0xe6
 800199c:	2005      	movs	r0, #5
 800199e:	f7ff f8eb 	bl	8000b78 <Gfx_Draw7SegDigit>
	Gfx_Draw7SegDigit(30, 230, front_left % 10, 25, COLOR_CYAN);
 80019a2:	79fa      	ldrb	r2, [r7, #7]
 80019a4:	4b3e      	ldr	r3, [pc, #248]	; (8001aa0 <UI_Update_WheelTemps+0x138>)
 80019a6:	fba3 1302 	umull	r1, r3, r3, r2
 80019aa:	08d9      	lsrs	r1, r3, #3
 80019ac:	460b      	mov	r3, r1
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	b25a      	sxtb	r2, r3
 80019ba:	231a      	movs	r3, #26
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	2319      	movs	r3, #25
 80019c0:	21e6      	movs	r1, #230	; 0xe6
 80019c2:	201e      	movs	r0, #30
 80019c4:	f7ff f8d8 	bl	8000b78 <Gfx_Draw7SegDigit>

	Gfx_Draw7SegDigit(87, 230, front_right / 10, 25, COLOR_CYAN);
 80019c8:	79bb      	ldrb	r3, [r7, #6]
 80019ca:	4a35      	ldr	r2, [pc, #212]	; (8001aa0 <UI_Update_WheelTemps+0x138>)
 80019cc:	fba2 2303 	umull	r2, r3, r2, r3
 80019d0:	08db      	lsrs	r3, r3, #3
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	b25a      	sxtb	r2, r3
 80019d6:	231a      	movs	r3, #26
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	2319      	movs	r3, #25
 80019dc:	21e6      	movs	r1, #230	; 0xe6
 80019de:	2057      	movs	r0, #87	; 0x57
 80019e0:	f7ff f8ca 	bl	8000b78 <Gfx_Draw7SegDigit>
	Gfx_Draw7SegDigit(112, 230, front_right % 10, 25, COLOR_CYAN);
 80019e4:	79ba      	ldrb	r2, [r7, #6]
 80019e6:	4b2e      	ldr	r3, [pc, #184]	; (8001aa0 <UI_Update_WheelTemps+0x138>)
 80019e8:	fba3 1302 	umull	r1, r3, r3, r2
 80019ec:	08d9      	lsrs	r1, r3, #3
 80019ee:	460b      	mov	r3, r1
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	440b      	add	r3, r1
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	b25a      	sxtb	r2, r3
 80019fc:	231a      	movs	r3, #26
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	2319      	movs	r3, #25
 8001a02:	21e6      	movs	r1, #230	; 0xe6
 8001a04:	2070      	movs	r0, #112	; 0x70
 8001a06:	f7ff f8b7 	bl	8000b78 <Gfx_Draw7SegDigit>

	Gfx_Draw7SegDigit(5, 280, back_left / 10, 25, COLOR_CYAN);
 8001a0a:	797b      	ldrb	r3, [r7, #5]
 8001a0c:	4a24      	ldr	r2, [pc, #144]	; (8001aa0 <UI_Update_WheelTemps+0x138>)
 8001a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a12:	08db      	lsrs	r3, r3, #3
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	b25a      	sxtb	r2, r3
 8001a18:	231a      	movs	r3, #26
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	2319      	movs	r3, #25
 8001a1e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001a22:	2005      	movs	r0, #5
 8001a24:	f7ff f8a8 	bl	8000b78 <Gfx_Draw7SegDigit>
	Gfx_Draw7SegDigit(30, 280, back_left % 10, 25, COLOR_CYAN);
 8001a28:	797a      	ldrb	r2, [r7, #5]
 8001a2a:	4b1d      	ldr	r3, [pc, #116]	; (8001aa0 <UI_Update_WheelTemps+0x138>)
 8001a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8001a30:	08d9      	lsrs	r1, r3, #3
 8001a32:	460b      	mov	r3, r1
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	440b      	add	r3, r1
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	b25a      	sxtb	r2, r3
 8001a40:	231a      	movs	r3, #26
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	2319      	movs	r3, #25
 8001a46:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001a4a:	201e      	movs	r0, #30
 8001a4c:	f7ff f894 	bl	8000b78 <Gfx_Draw7SegDigit>

	Gfx_Draw7SegDigit(87, 280, back_right / 10, 25, COLOR_CYAN);
 8001a50:	793b      	ldrb	r3, [r7, #4]
 8001a52:	4a13      	ldr	r2, [pc, #76]	; (8001aa0 <UI_Update_WheelTemps+0x138>)
 8001a54:	fba2 2303 	umull	r2, r3, r2, r3
 8001a58:	08db      	lsrs	r3, r3, #3
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	b25a      	sxtb	r2, r3
 8001a5e:	231a      	movs	r3, #26
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	2319      	movs	r3, #25
 8001a64:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001a68:	2057      	movs	r0, #87	; 0x57
 8001a6a:	f7ff f885 	bl	8000b78 <Gfx_Draw7SegDigit>
	Gfx_Draw7SegDigit(112, 280, back_right % 10, 25, COLOR_CYAN);
 8001a6e:	793a      	ldrb	r2, [r7, #4]
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <UI_Update_WheelTemps+0x138>)
 8001a72:	fba3 1302 	umull	r1, r3, r3, r2
 8001a76:	08d9      	lsrs	r1, r3, #3
 8001a78:	460b      	mov	r3, r1
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	b25a      	sxtb	r2, r3
 8001a86:	231a      	movs	r3, #26
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	2319      	movs	r3, #25
 8001a8c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001a90:	2070      	movs	r0, #112	; 0x70
 8001a92:	f7ff f871 	bl	8000b78 <Gfx_Draw7SegDigit>
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd90      	pop	{r4, r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	cccccccd 	.word	0xcccccccd

08001aa4 <UI_Update_Speedometer>:

void UI_Update_Speedometer(uint8_t speed) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af02      	add	r7, sp, #8
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
	Gfx_Draw7SegDigit(150, 70, speed / 10, 120, COLOR_YELLOW);
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	4a11      	ldr	r2, [pc, #68]	; (8001af8 <UI_Update_Speedometer+0x54>)
 8001ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab6:	08db      	lsrs	r3, r3, #3
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	b25a      	sxtb	r2, r3
 8001abc:	2336      	movs	r3, #54	; 0x36
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	2378      	movs	r3, #120	; 0x78
 8001ac2:	2146      	movs	r1, #70	; 0x46
 8001ac4:	2096      	movs	r0, #150	; 0x96
 8001ac6:	f7ff f857 	bl	8000b78 <Gfx_Draw7SegDigit>
	Gfx_Draw7SegDigit(240, 70, speed % 10, 120, COLOR_YELLOW);
 8001aca:	79fa      	ldrb	r2, [r7, #7]
 8001acc:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <UI_Update_Speedometer+0x54>)
 8001ace:	fba3 1302 	umull	r1, r3, r3, r2
 8001ad2:	08d9      	lsrs	r1, r3, #3
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	440b      	add	r3, r1
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	b25a      	sxtb	r2, r3
 8001ae2:	2336      	movs	r3, #54	; 0x36
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2378      	movs	r3, #120	; 0x78
 8001ae8:	2146      	movs	r1, #70	; 0x46
 8001aea:	20f0      	movs	r0, #240	; 0xf0
 8001aec:	f7ff f844 	bl	8000b78 <Gfx_Draw7SegDigit>
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	cccccccd 	.word	0xcccccccd

08001afc <UI_Update_CoolingTemp>:

void UI_Update_CoolingTemp(uint8_t temp) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af02      	add	r7, sp, #8
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
	Gfx_Draw7SegDigit(60, 15, temp / 10, 25, COLOR_CYAN);
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	4a11      	ldr	r2, [pc, #68]	; (8001b50 <UI_Update_CoolingTemp+0x54>)
 8001b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0e:	08db      	lsrs	r3, r3, #3
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	b25a      	sxtb	r2, r3
 8001b14:	231a      	movs	r3, #26
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	2319      	movs	r3, #25
 8001b1a:	210f      	movs	r1, #15
 8001b1c:	203c      	movs	r0, #60	; 0x3c
 8001b1e:	f7ff f82b 	bl	8000b78 <Gfx_Draw7SegDigit>
	Gfx_Draw7SegDigit(81, 15, temp % 10, 25, COLOR_CYAN);
 8001b22:	79fa      	ldrb	r2, [r7, #7]
 8001b24:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <UI_Update_CoolingTemp+0x54>)
 8001b26:	fba3 1302 	umull	r1, r3, r3, r2
 8001b2a:	08d9      	lsrs	r1, r3, #3
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	b25a      	sxtb	r2, r3
 8001b3a:	231a      	movs	r3, #26
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	2319      	movs	r3, #25
 8001b40:	210f      	movs	r1, #15
 8001b42:	2051      	movs	r0, #81	; 0x51
 8001b44:	f7ff f818 	bl	8000b78 <Gfx_Draw7SegDigit>
}
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	cccccccd 	.word	0xcccccccd

08001b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b58:	480d      	ldr	r0, [pc, #52]	; (8001b90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b5a:	490e      	ldr	r1, [pc, #56]	; (8001b94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b5c:	4a0e      	ldr	r2, [pc, #56]	; (8001b98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b60:	e002      	b.n	8001b68 <LoopCopyDataInit>

08001b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b66:	3304      	adds	r3, #4

08001b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b6c:	d3f9      	bcc.n	8001b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6e:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b70:	4c0b      	ldr	r4, [pc, #44]	; (8001ba0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b74:	e001      	b.n	8001b7a <LoopFillZerobss>

08001b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b78:	3204      	adds	r2, #4

08001b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b7c:	d3fb      	bcc.n	8001b76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b7e:	f7ff fd27 	bl	80015d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b82:	f002 fb55 	bl	8004230 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b86:	f7ff fb77 	bl	8001278 <main>
  bx  lr    
 8001b8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b94:	20012c30 	.word	0x20012c30
  ldr r2, =_sidata
 8001b98:	080042d4 	.word	0x080042d4
  ldr r2, =_sbss
 8001b9c:	20012c30 	.word	0x20012c30
  ldr r4, =_ebss
 8001ba0:	20012dbc 	.word	0x20012dbc

08001ba4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba4:	e7fe      	b.n	8001ba4 <ADC_IRQHandler>
	...

08001ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bac:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <HAL_Init+0x40>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	; (8001be8 <HAL_Init+0x40>)
 8001bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_Init+0x40>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <HAL_Init+0x40>)
 8001bbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <HAL_Init+0x40>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a07      	ldr	r2, [pc, #28]	; (8001be8 <HAL_Init+0x40>)
 8001bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd0:	2003      	movs	r0, #3
 8001bd2:	f000 f94f 	bl	8001e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f000 f808 	bl	8001bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bdc:	f7ff fb8e 	bl	80012fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40023c00 	.word	0x40023c00

08001bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_InitTick+0x54>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_InitTick+0x58>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 f967 	bl	8001ede <HAL_SYSTICK_Config>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e00e      	b.n	8001c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b0f      	cmp	r3, #15
 8001c1e:	d80a      	bhi.n	8001c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c20:	2200      	movs	r2, #0
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295
 8001c28:	f000 f92f 	bl	8001e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c2c:	4a06      	ldr	r2, [pc, #24]	; (8001c48 <HAL_InitTick+0x5c>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	e000      	b.n	8001c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20012c14 	.word	0x20012c14
 8001c44:	20012c2c 	.word	0x20012c2c
 8001c48:	20012c28 	.word	0x20012c28

08001c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_IncTick+0x20>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_IncTick+0x24>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <HAL_IncTick+0x24>)
 8001c5e:	6013      	str	r3, [r2, #0]
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	20012c2c 	.word	0x20012c2c
 8001c70:	20012db8 	.word	0x20012db8

08001c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return uwTick;
 8001c78:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <HAL_GetTick+0x14>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20012db8 	.word	0x20012db8

08001c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c94:	f7ff ffee 	bl	8001c74 <HAL_GetTick>
 8001c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca4:	d005      	beq.n	8001cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <HAL_Delay+0x44>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4413      	add	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cb2:	bf00      	nop
 8001cb4:	f7ff ffde 	bl	8001c74 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d8f7      	bhi.n	8001cb4 <HAL_Delay+0x28>
  {
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20012c2c 	.word	0x20012c2c

08001cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d06:	4a04      	ldr	r2, [pc, #16]	; (8001d18 <__NVIC_SetPriorityGrouping+0x44>)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	60d3      	str	r3, [r2, #12]
}
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <__NVIC_GetPriorityGrouping+0x18>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	0a1b      	lsrs	r3, r3, #8
 8001d26:	f003 0307 	and.w	r3, r3, #7
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	db0b      	blt.n	8001d62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	f003 021f 	and.w	r2, r3, #31
 8001d50:	4907      	ldr	r1, [pc, #28]	; (8001d70 <__NVIC_EnableIRQ+0x38>)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	095b      	lsrs	r3, r3, #5
 8001d58:	2001      	movs	r0, #1
 8001d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	e000e100 	.word	0xe000e100

08001d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	6039      	str	r1, [r7, #0]
 8001d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	db0a      	blt.n	8001d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	490c      	ldr	r1, [pc, #48]	; (8001dc0 <__NVIC_SetPriority+0x4c>)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	0112      	lsls	r2, r2, #4
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	440b      	add	r3, r1
 8001d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d9c:	e00a      	b.n	8001db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	4908      	ldr	r1, [pc, #32]	; (8001dc4 <__NVIC_SetPriority+0x50>)
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	3b04      	subs	r3, #4
 8001dac:	0112      	lsls	r2, r2, #4
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	440b      	add	r3, r1
 8001db2:	761a      	strb	r2, [r3, #24]
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000e100 	.word	0xe000e100
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b089      	sub	sp, #36	; 0x24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f1c3 0307 	rsb	r3, r3, #7
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	bf28      	it	cs
 8001de6:	2304      	movcs	r3, #4
 8001de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3304      	adds	r3, #4
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d902      	bls.n	8001df8 <NVIC_EncodePriority+0x30>
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3b03      	subs	r3, #3
 8001df6:	e000      	b.n	8001dfa <NVIC_EncodePriority+0x32>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43da      	mvns	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e10:	f04f 31ff 	mov.w	r1, #4294967295
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1a:	43d9      	mvns	r1, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e20:	4313      	orrs	r3, r2
         );
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3724      	adds	r7, #36	; 0x24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
	...

08001e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e40:	d301      	bcc.n	8001e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e42:	2301      	movs	r3, #1
 8001e44:	e00f      	b.n	8001e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e46:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <SysTick_Config+0x40>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4e:	210f      	movs	r1, #15
 8001e50:	f04f 30ff 	mov.w	r0, #4294967295
 8001e54:	f7ff ff8e 	bl	8001d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <SysTick_Config+0x40>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5e:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <SysTick_Config+0x40>)
 8001e60:	2207      	movs	r2, #7
 8001e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	e000e010 	.word	0xe000e010

08001e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff ff29 	bl	8001cd4 <__NVIC_SetPriorityGrouping>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b086      	sub	sp, #24
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	4603      	mov	r3, r0
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
 8001e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e9c:	f7ff ff3e 	bl	8001d1c <__NVIC_GetPriorityGrouping>
 8001ea0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	6978      	ldr	r0, [r7, #20]
 8001ea8:	f7ff ff8e 	bl	8001dc8 <NVIC_EncodePriority>
 8001eac:	4602      	mov	r2, r0
 8001eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff5d 	bl	8001d74 <__NVIC_SetPriority>
}
 8001eba:	bf00      	nop
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4603      	mov	r3, r0
 8001eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ff31 	bl	8001d38 <__NVIC_EnableIRQ>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff ffa2 	bl	8001e30 <SysTick_Config>
 8001eec:	4603      	mov	r3, r0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b089      	sub	sp, #36	; 0x24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
 8001f12:	e165      	b.n	80021e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f14:	2201      	movs	r2, #1
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	4013      	ands	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	f040 8154 	bne.w	80021da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d005      	beq.n	8001f4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d130      	bne.n	8001fac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	2203      	movs	r2, #3
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f80:	2201      	movs	r2, #1
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	091b      	lsrs	r3, r3, #4
 8001f96:	f003 0201 	and.w	r2, r3, #1
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	2b03      	cmp	r3, #3
 8001fb6:	d017      	beq.n	8001fe8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d123      	bne.n	800203c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	08da      	lsrs	r2, r3, #3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3208      	adds	r2, #8
 8001ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002000:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	220f      	movs	r2, #15
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	691a      	ldr	r2, [r3, #16]
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	08da      	lsrs	r2, r3, #3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3208      	adds	r2, #8
 8002036:	69b9      	ldr	r1, [r7, #24]
 8002038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	2203      	movs	r2, #3
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 0203 	and.w	r2, r3, #3
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 80ae 	beq.w	80021da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	4b5d      	ldr	r3, [pc, #372]	; (80021f8 <HAL_GPIO_Init+0x300>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	4a5c      	ldr	r2, [pc, #368]	; (80021f8 <HAL_GPIO_Init+0x300>)
 8002088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800208c:	6453      	str	r3, [r2, #68]	; 0x44
 800208e:	4b5a      	ldr	r3, [pc, #360]	; (80021f8 <HAL_GPIO_Init+0x300>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800209a:	4a58      	ldr	r2, [pc, #352]	; (80021fc <HAL_GPIO_Init+0x304>)
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	089b      	lsrs	r3, r3, #2
 80020a0:	3302      	adds	r3, #2
 80020a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	220f      	movs	r2, #15
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4013      	ands	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a4f      	ldr	r2, [pc, #316]	; (8002200 <HAL_GPIO_Init+0x308>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d025      	beq.n	8002112 <HAL_GPIO_Init+0x21a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a4e      	ldr	r2, [pc, #312]	; (8002204 <HAL_GPIO_Init+0x30c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d01f      	beq.n	800210e <HAL_GPIO_Init+0x216>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a4d      	ldr	r2, [pc, #308]	; (8002208 <HAL_GPIO_Init+0x310>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d019      	beq.n	800210a <HAL_GPIO_Init+0x212>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a4c      	ldr	r2, [pc, #304]	; (800220c <HAL_GPIO_Init+0x314>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d013      	beq.n	8002106 <HAL_GPIO_Init+0x20e>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a4b      	ldr	r2, [pc, #300]	; (8002210 <HAL_GPIO_Init+0x318>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d00d      	beq.n	8002102 <HAL_GPIO_Init+0x20a>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a4a      	ldr	r2, [pc, #296]	; (8002214 <HAL_GPIO_Init+0x31c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d007      	beq.n	80020fe <HAL_GPIO_Init+0x206>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a49      	ldr	r2, [pc, #292]	; (8002218 <HAL_GPIO_Init+0x320>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d101      	bne.n	80020fa <HAL_GPIO_Init+0x202>
 80020f6:	2306      	movs	r3, #6
 80020f8:	e00c      	b.n	8002114 <HAL_GPIO_Init+0x21c>
 80020fa:	2307      	movs	r3, #7
 80020fc:	e00a      	b.n	8002114 <HAL_GPIO_Init+0x21c>
 80020fe:	2305      	movs	r3, #5
 8002100:	e008      	b.n	8002114 <HAL_GPIO_Init+0x21c>
 8002102:	2304      	movs	r3, #4
 8002104:	e006      	b.n	8002114 <HAL_GPIO_Init+0x21c>
 8002106:	2303      	movs	r3, #3
 8002108:	e004      	b.n	8002114 <HAL_GPIO_Init+0x21c>
 800210a:	2302      	movs	r3, #2
 800210c:	e002      	b.n	8002114 <HAL_GPIO_Init+0x21c>
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <HAL_GPIO_Init+0x21c>
 8002112:	2300      	movs	r3, #0
 8002114:	69fa      	ldr	r2, [r7, #28]
 8002116:	f002 0203 	and.w	r2, r2, #3
 800211a:	0092      	lsls	r2, r2, #2
 800211c:	4093      	lsls	r3, r2
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002124:	4935      	ldr	r1, [pc, #212]	; (80021fc <HAL_GPIO_Init+0x304>)
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	089b      	lsrs	r3, r3, #2
 800212a:	3302      	adds	r3, #2
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002132:	4b3a      	ldr	r3, [pc, #232]	; (800221c <HAL_GPIO_Init+0x324>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002156:	4a31      	ldr	r2, [pc, #196]	; (800221c <HAL_GPIO_Init+0x324>)
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800215c:	4b2f      	ldr	r3, [pc, #188]	; (800221c <HAL_GPIO_Init+0x324>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002180:	4a26      	ldr	r2, [pc, #152]	; (800221c <HAL_GPIO_Init+0x324>)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002186:	4b25      	ldr	r3, [pc, #148]	; (800221c <HAL_GPIO_Init+0x324>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	43db      	mvns	r3, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4013      	ands	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021aa:	4a1c      	ldr	r2, [pc, #112]	; (800221c <HAL_GPIO_Init+0x324>)
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021b0:	4b1a      	ldr	r3, [pc, #104]	; (800221c <HAL_GPIO_Init+0x324>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021d4:	4a11      	ldr	r2, [pc, #68]	; (800221c <HAL_GPIO_Init+0x324>)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3301      	adds	r3, #1
 80021de:	61fb      	str	r3, [r7, #28]
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	2b0f      	cmp	r3, #15
 80021e4:	f67f ae96 	bls.w	8001f14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021e8:	bf00      	nop
 80021ea:	bf00      	nop
 80021ec:	3724      	adds	r7, #36	; 0x24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40013800 	.word	0x40013800
 8002200:	40020000 	.word	0x40020000
 8002204:	40020400 	.word	0x40020400
 8002208:	40020800 	.word	0x40020800
 800220c:	40020c00 	.word	0x40020c00
 8002210:	40021000 	.word	0x40021000
 8002214:	40021400 	.word	0x40021400
 8002218:	40021800 	.word	0x40021800
 800221c:	40013c00 	.word	0x40013c00

08002220 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691a      	ldr	r2, [r3, #16]
 8002230:	887b      	ldrh	r3, [r7, #2]
 8002232:	4013      	ands	r3, r2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002238:	2301      	movs	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
 800223c:	e001      	b.n	8002242 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800223e:	2300      	movs	r3, #0
 8002240:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002242:	7bfb      	ldrb	r3, [r7, #15]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	807b      	strh	r3, [r7, #2]
 800225c:	4613      	mov	r3, r2
 800225e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002260:	787b      	ldrb	r3, [r7, #1]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002266:	887a      	ldrh	r2, [r7, #2]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800226c:	e003      	b.n	8002276 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800226e:	887b      	ldrh	r3, [r7, #2]
 8002270:	041a      	lsls	r2, r3, #16
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	619a      	str	r2, [r3, #24]
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002282:	b480      	push	{r7}
 8002284:	b085      	sub	sp, #20
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
 800228a:	460b      	mov	r3, r1
 800228c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002294:	887a      	ldrh	r2, [r7, #2]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4013      	ands	r3, r2
 800229a:	041a      	lsls	r2, r3, #16
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	43d9      	mvns	r1, r3
 80022a0:	887b      	ldrh	r3, [r7, #2]
 80022a2:	400b      	ands	r3, r1
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	619a      	str	r2, [r3, #24]
}
 80022aa:	bf00      	nop
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
	...

080022b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e0cc      	b.n	8002466 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022cc:	4b68      	ldr	r3, [pc, #416]	; (8002470 <HAL_RCC_ClockConfig+0x1b8>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 030f 	and.w	r3, r3, #15
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d90c      	bls.n	80022f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022da:	4b65      	ldr	r3, [pc, #404]	; (8002470 <HAL_RCC_ClockConfig+0x1b8>)
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e2:	4b63      	ldr	r3, [pc, #396]	; (8002470 <HAL_RCC_ClockConfig+0x1b8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d001      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0b8      	b.n	8002466 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d020      	beq.n	8002342 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	d005      	beq.n	8002318 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800230c:	4b59      	ldr	r3, [pc, #356]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	4a58      	ldr	r2, [pc, #352]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 8002312:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002316:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	2b00      	cmp	r3, #0
 8002322:	d005      	beq.n	8002330 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002324:	4b53      	ldr	r3, [pc, #332]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	4a52      	ldr	r2, [pc, #328]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800232e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002330:	4b50      	ldr	r3, [pc, #320]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	494d      	ldr	r1, [pc, #308]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 800233e:	4313      	orrs	r3, r2
 8002340:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d044      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d107      	bne.n	8002366 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002356:	4b47      	ldr	r3, [pc, #284]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d119      	bne.n	8002396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e07f      	b.n	8002466 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d003      	beq.n	8002376 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002372:	2b03      	cmp	r3, #3
 8002374:	d107      	bne.n	8002386 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002376:	4b3f      	ldr	r3, [pc, #252]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d109      	bne.n	8002396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e06f      	b.n	8002466 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002386:	4b3b      	ldr	r3, [pc, #236]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e067      	b.n	8002466 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002396:	4b37      	ldr	r3, [pc, #220]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f023 0203 	bic.w	r2, r3, #3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	4934      	ldr	r1, [pc, #208]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023a8:	f7ff fc64 	bl	8001c74 <HAL_GetTick>
 80023ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ae:	e00a      	b.n	80023c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b0:	f7ff fc60 	bl	8001c74 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80023be:	4293      	cmp	r3, r2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e04f      	b.n	8002466 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c6:	4b2b      	ldr	r3, [pc, #172]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 020c 	and.w	r2, r3, #12
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d1eb      	bne.n	80023b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023d8:	4b25      	ldr	r3, [pc, #148]	; (8002470 <HAL_RCC_ClockConfig+0x1b8>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 030f 	and.w	r3, r3, #15
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d20c      	bcs.n	8002400 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e6:	4b22      	ldr	r3, [pc, #136]	; (8002470 <HAL_RCC_ClockConfig+0x1b8>)
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ee:	4b20      	ldr	r3, [pc, #128]	; (8002470 <HAL_RCC_ClockConfig+0x1b8>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d001      	beq.n	8002400 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e032      	b.n	8002466 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b00      	cmp	r3, #0
 800240a:	d008      	beq.n	800241e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800240c:	4b19      	ldr	r3, [pc, #100]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	4916      	ldr	r1, [pc, #88]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	4313      	orrs	r3, r2
 800241c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d009      	beq.n	800243e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800242a:	4b12      	ldr	r3, [pc, #72]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	490e      	ldr	r1, [pc, #56]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	4313      	orrs	r3, r2
 800243c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800243e:	f000 f855 	bl	80024ec <HAL_RCC_GetSysClockFreq>
 8002442:	4602      	mov	r2, r0
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	490a      	ldr	r1, [pc, #40]	; (8002478 <HAL_RCC_ClockConfig+0x1c0>)
 8002450:	5ccb      	ldrb	r3, [r1, r3]
 8002452:	fa22 f303 	lsr.w	r3, r2, r3
 8002456:	4a09      	ldr	r2, [pc, #36]	; (800247c <HAL_RCC_ClockConfig+0x1c4>)
 8002458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <HAL_RCC_ClockConfig+0x1c8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff fbc4 	bl	8001bec <HAL_InitTick>

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40023c00 	.word	0x40023c00
 8002474:	40023800 	.word	0x40023800
 8002478:	080042ac 	.word	0x080042ac
 800247c:	20012c14 	.word	0x20012c14
 8002480:	20012c28 	.word	0x20012c28

08002484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <HAL_RCC_GetHCLKFreq+0x14>)
 800248a:	681b      	ldr	r3, [r3, #0]
}
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	20012c14 	.word	0x20012c14

0800249c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024a0:	f7ff fff0 	bl	8002484 <HAL_RCC_GetHCLKFreq>
 80024a4:	4602      	mov	r2, r0
 80024a6:	4b05      	ldr	r3, [pc, #20]	; (80024bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	0a9b      	lsrs	r3, r3, #10
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	4903      	ldr	r1, [pc, #12]	; (80024c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024b2:	5ccb      	ldrb	r3, [r1, r3]
 80024b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40023800 	.word	0x40023800
 80024c0:	080042bc 	.word	0x080042bc

080024c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024c8:	f7ff ffdc 	bl	8002484 <HAL_RCC_GetHCLKFreq>
 80024cc:	4602      	mov	r2, r0
 80024ce:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	0b5b      	lsrs	r3, r3, #13
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	4903      	ldr	r1, [pc, #12]	; (80024e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024da:	5ccb      	ldrb	r3, [r1, r3]
 80024dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40023800 	.word	0x40023800
 80024e8:	080042bc 	.word	0x080042bc

080024ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024f0:	b0ae      	sub	sp, #184	; 0xb8
 80024f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002512:	4bcb      	ldr	r3, [pc, #812]	; (8002840 <HAL_RCC_GetSysClockFreq+0x354>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	2b0c      	cmp	r3, #12
 800251c:	f200 8206 	bhi.w	800292c <HAL_RCC_GetSysClockFreq+0x440>
 8002520:	a201      	add	r2, pc, #4	; (adr r2, 8002528 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002526:	bf00      	nop
 8002528:	0800255d 	.word	0x0800255d
 800252c:	0800292d 	.word	0x0800292d
 8002530:	0800292d 	.word	0x0800292d
 8002534:	0800292d 	.word	0x0800292d
 8002538:	08002565 	.word	0x08002565
 800253c:	0800292d 	.word	0x0800292d
 8002540:	0800292d 	.word	0x0800292d
 8002544:	0800292d 	.word	0x0800292d
 8002548:	0800256d 	.word	0x0800256d
 800254c:	0800292d 	.word	0x0800292d
 8002550:	0800292d 	.word	0x0800292d
 8002554:	0800292d 	.word	0x0800292d
 8002558:	0800275d 	.word	0x0800275d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800255c:	4bb9      	ldr	r3, [pc, #740]	; (8002844 <HAL_RCC_GetSysClockFreq+0x358>)
 800255e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002562:	e1e7      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002564:	4bb8      	ldr	r3, [pc, #736]	; (8002848 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002566:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800256a:	e1e3      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800256c:	4bb4      	ldr	r3, [pc, #720]	; (8002840 <HAL_RCC_GetSysClockFreq+0x354>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002574:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002578:	4bb1      	ldr	r3, [pc, #708]	; (8002840 <HAL_RCC_GetSysClockFreq+0x354>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d071      	beq.n	8002668 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002584:	4bae      	ldr	r3, [pc, #696]	; (8002840 <HAL_RCC_GetSysClockFreq+0x354>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	099b      	lsrs	r3, r3, #6
 800258a:	2200      	movs	r2, #0
 800258c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002590:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002594:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800259c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025a0:	2300      	movs	r3, #0
 80025a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80025a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80025aa:	4622      	mov	r2, r4
 80025ac:	462b      	mov	r3, r5
 80025ae:	f04f 0000 	mov.w	r0, #0
 80025b2:	f04f 0100 	mov.w	r1, #0
 80025b6:	0159      	lsls	r1, r3, #5
 80025b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025bc:	0150      	lsls	r0, r2, #5
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4621      	mov	r1, r4
 80025c4:	1a51      	subs	r1, r2, r1
 80025c6:	6439      	str	r1, [r7, #64]	; 0x40
 80025c8:	4629      	mov	r1, r5
 80025ca:	eb63 0301 	sbc.w	r3, r3, r1
 80025ce:	647b      	str	r3, [r7, #68]	; 0x44
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80025dc:	4649      	mov	r1, r9
 80025de:	018b      	lsls	r3, r1, #6
 80025e0:	4641      	mov	r1, r8
 80025e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025e6:	4641      	mov	r1, r8
 80025e8:	018a      	lsls	r2, r1, #6
 80025ea:	4641      	mov	r1, r8
 80025ec:	1a51      	subs	r1, r2, r1
 80025ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80025f0:	4649      	mov	r1, r9
 80025f2:	eb63 0301 	sbc.w	r3, r3, r1
 80025f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002604:	4649      	mov	r1, r9
 8002606:	00cb      	lsls	r3, r1, #3
 8002608:	4641      	mov	r1, r8
 800260a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800260e:	4641      	mov	r1, r8
 8002610:	00ca      	lsls	r2, r1, #3
 8002612:	4610      	mov	r0, r2
 8002614:	4619      	mov	r1, r3
 8002616:	4603      	mov	r3, r0
 8002618:	4622      	mov	r2, r4
 800261a:	189b      	adds	r3, r3, r2
 800261c:	633b      	str	r3, [r7, #48]	; 0x30
 800261e:	462b      	mov	r3, r5
 8002620:	460a      	mov	r2, r1
 8002622:	eb42 0303 	adc.w	r3, r2, r3
 8002626:	637b      	str	r3, [r7, #52]	; 0x34
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002634:	4629      	mov	r1, r5
 8002636:	024b      	lsls	r3, r1, #9
 8002638:	4621      	mov	r1, r4
 800263a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800263e:	4621      	mov	r1, r4
 8002640:	024a      	lsls	r2, r1, #9
 8002642:	4610      	mov	r0, r2
 8002644:	4619      	mov	r1, r3
 8002646:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800264a:	2200      	movs	r2, #0
 800264c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002650:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002654:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002658:	f7fd fdd4 	bl	8000204 <__aeabi_uldivmod>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4613      	mov	r3, r2
 8002662:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002666:	e067      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002668:	4b75      	ldr	r3, [pc, #468]	; (8002840 <HAL_RCC_GetSysClockFreq+0x354>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	099b      	lsrs	r3, r3, #6
 800266e:	2200      	movs	r2, #0
 8002670:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002674:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002678:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800267c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002680:	67bb      	str	r3, [r7, #120]	; 0x78
 8002682:	2300      	movs	r3, #0
 8002684:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002686:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800268a:	4622      	mov	r2, r4
 800268c:	462b      	mov	r3, r5
 800268e:	f04f 0000 	mov.w	r0, #0
 8002692:	f04f 0100 	mov.w	r1, #0
 8002696:	0159      	lsls	r1, r3, #5
 8002698:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800269c:	0150      	lsls	r0, r2, #5
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	4621      	mov	r1, r4
 80026a4:	1a51      	subs	r1, r2, r1
 80026a6:	62b9      	str	r1, [r7, #40]	; 0x28
 80026a8:	4629      	mov	r1, r5
 80026aa:	eb63 0301 	sbc.w	r3, r3, r1
 80026ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	f04f 0300 	mov.w	r3, #0
 80026b8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80026bc:	4649      	mov	r1, r9
 80026be:	018b      	lsls	r3, r1, #6
 80026c0:	4641      	mov	r1, r8
 80026c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026c6:	4641      	mov	r1, r8
 80026c8:	018a      	lsls	r2, r1, #6
 80026ca:	4641      	mov	r1, r8
 80026cc:	ebb2 0a01 	subs.w	sl, r2, r1
 80026d0:	4649      	mov	r1, r9
 80026d2:	eb63 0b01 	sbc.w	fp, r3, r1
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	f04f 0300 	mov.w	r3, #0
 80026de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026ea:	4692      	mov	sl, r2
 80026ec:	469b      	mov	fp, r3
 80026ee:	4623      	mov	r3, r4
 80026f0:	eb1a 0303 	adds.w	r3, sl, r3
 80026f4:	623b      	str	r3, [r7, #32]
 80026f6:	462b      	mov	r3, r5
 80026f8:	eb4b 0303 	adc.w	r3, fp, r3
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800270a:	4629      	mov	r1, r5
 800270c:	028b      	lsls	r3, r1, #10
 800270e:	4621      	mov	r1, r4
 8002710:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002714:	4621      	mov	r1, r4
 8002716:	028a      	lsls	r2, r1, #10
 8002718:	4610      	mov	r0, r2
 800271a:	4619      	mov	r1, r3
 800271c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002720:	2200      	movs	r2, #0
 8002722:	673b      	str	r3, [r7, #112]	; 0x70
 8002724:	677a      	str	r2, [r7, #116]	; 0x74
 8002726:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800272a:	f7fd fd6b 	bl	8000204 <__aeabi_uldivmod>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4613      	mov	r3, r2
 8002734:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002738:	4b41      	ldr	r3, [pc, #260]	; (8002840 <HAL_RCC_GetSysClockFreq+0x354>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	0c1b      	lsrs	r3, r3, #16
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	3301      	adds	r3, #1
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800274a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800274e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002752:	fbb2 f3f3 	udiv	r3, r2, r3
 8002756:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800275a:	e0eb      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800275c:	4b38      	ldr	r3, [pc, #224]	; (8002840 <HAL_RCC_GetSysClockFreq+0x354>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002764:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002768:	4b35      	ldr	r3, [pc, #212]	; (8002840 <HAL_RCC_GetSysClockFreq+0x354>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d06b      	beq.n	800284c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002774:	4b32      	ldr	r3, [pc, #200]	; (8002840 <HAL_RCC_GetSysClockFreq+0x354>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	099b      	lsrs	r3, r3, #6
 800277a:	2200      	movs	r2, #0
 800277c:	66bb      	str	r3, [r7, #104]	; 0x68
 800277e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002780:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002786:	663b      	str	r3, [r7, #96]	; 0x60
 8002788:	2300      	movs	r3, #0
 800278a:	667b      	str	r3, [r7, #100]	; 0x64
 800278c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002790:	4622      	mov	r2, r4
 8002792:	462b      	mov	r3, r5
 8002794:	f04f 0000 	mov.w	r0, #0
 8002798:	f04f 0100 	mov.w	r1, #0
 800279c:	0159      	lsls	r1, r3, #5
 800279e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027a2:	0150      	lsls	r0, r2, #5
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4621      	mov	r1, r4
 80027aa:	1a51      	subs	r1, r2, r1
 80027ac:	61b9      	str	r1, [r7, #24]
 80027ae:	4629      	mov	r1, r5
 80027b0:	eb63 0301 	sbc.w	r3, r3, r1
 80027b4:	61fb      	str	r3, [r7, #28]
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80027c2:	4659      	mov	r1, fp
 80027c4:	018b      	lsls	r3, r1, #6
 80027c6:	4651      	mov	r1, sl
 80027c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027cc:	4651      	mov	r1, sl
 80027ce:	018a      	lsls	r2, r1, #6
 80027d0:	4651      	mov	r1, sl
 80027d2:	ebb2 0801 	subs.w	r8, r2, r1
 80027d6:	4659      	mov	r1, fp
 80027d8:	eb63 0901 	sbc.w	r9, r3, r1
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027f0:	4690      	mov	r8, r2
 80027f2:	4699      	mov	r9, r3
 80027f4:	4623      	mov	r3, r4
 80027f6:	eb18 0303 	adds.w	r3, r8, r3
 80027fa:	613b      	str	r3, [r7, #16]
 80027fc:	462b      	mov	r3, r5
 80027fe:	eb49 0303 	adc.w	r3, r9, r3
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002810:	4629      	mov	r1, r5
 8002812:	024b      	lsls	r3, r1, #9
 8002814:	4621      	mov	r1, r4
 8002816:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800281a:	4621      	mov	r1, r4
 800281c:	024a      	lsls	r2, r1, #9
 800281e:	4610      	mov	r0, r2
 8002820:	4619      	mov	r1, r3
 8002822:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002826:	2200      	movs	r2, #0
 8002828:	65bb      	str	r3, [r7, #88]	; 0x58
 800282a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800282c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002830:	f7fd fce8 	bl	8000204 <__aeabi_uldivmod>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4613      	mov	r3, r2
 800283a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800283e:	e065      	b.n	800290c <HAL_RCC_GetSysClockFreq+0x420>
 8002840:	40023800 	.word	0x40023800
 8002844:	00f42400 	.word	0x00f42400
 8002848:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800284c:	4b3d      	ldr	r3, [pc, #244]	; (8002944 <HAL_RCC_GetSysClockFreq+0x458>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	099b      	lsrs	r3, r3, #6
 8002852:	2200      	movs	r2, #0
 8002854:	4618      	mov	r0, r3
 8002856:	4611      	mov	r1, r2
 8002858:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800285c:	653b      	str	r3, [r7, #80]	; 0x50
 800285e:	2300      	movs	r3, #0
 8002860:	657b      	str	r3, [r7, #84]	; 0x54
 8002862:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002866:	4642      	mov	r2, r8
 8002868:	464b      	mov	r3, r9
 800286a:	f04f 0000 	mov.w	r0, #0
 800286e:	f04f 0100 	mov.w	r1, #0
 8002872:	0159      	lsls	r1, r3, #5
 8002874:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002878:	0150      	lsls	r0, r2, #5
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4641      	mov	r1, r8
 8002880:	1a51      	subs	r1, r2, r1
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	4649      	mov	r1, r9
 8002886:	eb63 0301 	sbc.w	r3, r3, r1
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	f04f 0200 	mov.w	r2, #0
 8002890:	f04f 0300 	mov.w	r3, #0
 8002894:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002898:	4659      	mov	r1, fp
 800289a:	018b      	lsls	r3, r1, #6
 800289c:	4651      	mov	r1, sl
 800289e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028a2:	4651      	mov	r1, sl
 80028a4:	018a      	lsls	r2, r1, #6
 80028a6:	4651      	mov	r1, sl
 80028a8:	1a54      	subs	r4, r2, r1
 80028aa:	4659      	mov	r1, fp
 80028ac:	eb63 0501 	sbc.w	r5, r3, r1
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	f04f 0300 	mov.w	r3, #0
 80028b8:	00eb      	lsls	r3, r5, #3
 80028ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028be:	00e2      	lsls	r2, r4, #3
 80028c0:	4614      	mov	r4, r2
 80028c2:	461d      	mov	r5, r3
 80028c4:	4643      	mov	r3, r8
 80028c6:	18e3      	adds	r3, r4, r3
 80028c8:	603b      	str	r3, [r7, #0]
 80028ca:	464b      	mov	r3, r9
 80028cc:	eb45 0303 	adc.w	r3, r5, r3
 80028d0:	607b      	str	r3, [r7, #4]
 80028d2:	f04f 0200 	mov.w	r2, #0
 80028d6:	f04f 0300 	mov.w	r3, #0
 80028da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028de:	4629      	mov	r1, r5
 80028e0:	028b      	lsls	r3, r1, #10
 80028e2:	4621      	mov	r1, r4
 80028e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028e8:	4621      	mov	r1, r4
 80028ea:	028a      	lsls	r2, r1, #10
 80028ec:	4610      	mov	r0, r2
 80028ee:	4619      	mov	r1, r3
 80028f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028f4:	2200      	movs	r2, #0
 80028f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80028f8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80028fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80028fe:	f7fd fc81 	bl	8000204 <__aeabi_uldivmod>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4613      	mov	r3, r2
 8002908:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800290c:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <HAL_RCC_GetSysClockFreq+0x458>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	0f1b      	lsrs	r3, r3, #28
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800291a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800291e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002922:	fbb2 f3f3 	udiv	r3, r2, r3
 8002926:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800292a:	e003      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <HAL_RCC_GetSysClockFreq+0x45c>)
 800292e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002932:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002934:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002938:	4618      	mov	r0, r3
 800293a:	37b8      	adds	r7, #184	; 0xb8
 800293c:	46bd      	mov	sp, r7
 800293e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800
 8002948:	00f42400 	.word	0x00f42400

0800294c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e28d      	b.n	8002e7a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 8083 	beq.w	8002a72 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800296c:	4b94      	ldr	r3, [pc, #592]	; (8002bc0 <HAL_RCC_OscConfig+0x274>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 030c 	and.w	r3, r3, #12
 8002974:	2b04      	cmp	r3, #4
 8002976:	d019      	beq.n	80029ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002978:	4b91      	ldr	r3, [pc, #580]	; (8002bc0 <HAL_RCC_OscConfig+0x274>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002980:	2b08      	cmp	r3, #8
 8002982:	d106      	bne.n	8002992 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002984:	4b8e      	ldr	r3, [pc, #568]	; (8002bc0 <HAL_RCC_OscConfig+0x274>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800298c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002990:	d00c      	beq.n	80029ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002992:	4b8b      	ldr	r3, [pc, #556]	; (8002bc0 <HAL_RCC_OscConfig+0x274>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800299a:	2b0c      	cmp	r3, #12
 800299c:	d112      	bne.n	80029c4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800299e:	4b88      	ldr	r3, [pc, #544]	; (8002bc0 <HAL_RCC_OscConfig+0x274>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029aa:	d10b      	bne.n	80029c4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ac:	4b84      	ldr	r3, [pc, #528]	; (8002bc0 <HAL_RCC_OscConfig+0x274>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d05b      	beq.n	8002a70 <HAL_RCC_OscConfig+0x124>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d157      	bne.n	8002a70 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e25a      	b.n	8002e7a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029cc:	d106      	bne.n	80029dc <HAL_RCC_OscConfig+0x90>
 80029ce:	4b7c      	ldr	r3, [pc, #496]	; (8002bc0 <HAL_RCC_OscConfig+0x274>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a7b      	ldr	r2, [pc, #492]	; (8002bc0 <HAL_RCC_OscConfig+0x274>)
 80029d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	e01d      	b.n	8002a18 <HAL_RCC_OscConfig+0xcc>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029e4:	d10c      	bne.n	8002a00 <HAL_RCC_OscConfig+0xb4>
 80029e6:	4b76      	ldr	r3, [pc, #472]	; (8002bc0 <HAL_RCC_OscConfig+0x274>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a75      	ldr	r2, [pc, #468]	; (8002bc0 <HAL_RCC_OscConfig+0x274>)
 80029ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	4b73      	ldr	r3, [pc, #460]	; (8002bc0 <HAL_RCC_OscConfig+0x274>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a72      	ldr	r2, [pc, #456]	; (8002bc0 <HAL_RCC_OscConfig+0x274>)
 80029f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	e00b      	b.n	8002a18 <HAL_RCC_OscConfig+0xcc>
 8002a00:	4b6f      	ldr	r3, [pc, #444]	; (8002bc0 <HAL_RCC_OscConfig+0x274>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a6e      	ldr	r2, [pc, #440]	; (8002bc0 <HAL_RCC_OscConfig+0x274>)
 8002a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	4b6c      	ldr	r3, [pc, #432]	; (8002bc0 <HAL_RCC_OscConfig+0x274>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a6b      	ldr	r2, [pc, #428]	; (8002bc0 <HAL_RCC_OscConfig+0x274>)
 8002a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d013      	beq.n	8002a48 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a20:	f7ff f928 	bl	8001c74 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a28:	f7ff f924 	bl	8001c74 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b64      	cmp	r3, #100	; 0x64
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e21f      	b.n	8002e7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3a:	4b61      	ldr	r3, [pc, #388]	; (8002bc0 <HAL_RCC_OscConfig+0x274>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f0      	beq.n	8002a28 <HAL_RCC_OscConfig+0xdc>
 8002a46:	e014      	b.n	8002a72 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a48:	f7ff f914 	bl	8001c74 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a50:	f7ff f910 	bl	8001c74 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b64      	cmp	r3, #100	; 0x64
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e20b      	b.n	8002e7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a62:	4b57      	ldr	r3, [pc, #348]	; (8002bc0 <HAL_RCC_OscConfig+0x274>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f0      	bne.n	8002a50 <HAL_RCC_OscConfig+0x104>
 8002a6e:	e000      	b.n	8002a72 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d06f      	beq.n	8002b5e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a7e:	4b50      	ldr	r3, [pc, #320]	; (8002bc0 <HAL_RCC_OscConfig+0x274>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 030c 	and.w	r3, r3, #12
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d017      	beq.n	8002aba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a8a:	4b4d      	ldr	r3, [pc, #308]	; (8002bc0 <HAL_RCC_OscConfig+0x274>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a92:	2b08      	cmp	r3, #8
 8002a94:	d105      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a96:	4b4a      	ldr	r3, [pc, #296]	; (8002bc0 <HAL_RCC_OscConfig+0x274>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00b      	beq.n	8002aba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aa2:	4b47      	ldr	r3, [pc, #284]	; (8002bc0 <HAL_RCC_OscConfig+0x274>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002aaa:	2b0c      	cmp	r3, #12
 8002aac:	d11c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aae:	4b44      	ldr	r3, [pc, #272]	; (8002bc0 <HAL_RCC_OscConfig+0x274>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d116      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aba:	4b41      	ldr	r3, [pc, #260]	; (8002bc0 <HAL_RCC_OscConfig+0x274>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x186>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d001      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e1d3      	b.n	8002e7a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad2:	4b3b      	ldr	r3, [pc, #236]	; (8002bc0 <HAL_RCC_OscConfig+0x274>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	4937      	ldr	r1, [pc, #220]	; (8002bc0 <HAL_RCC_OscConfig+0x274>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae6:	e03a      	b.n	8002b5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d020      	beq.n	8002b32 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002af0:	4b34      	ldr	r3, [pc, #208]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002af2:	2201      	movs	r2, #1
 8002af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af6:	f7ff f8bd 	bl	8001c74 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002afe:	f7ff f8b9 	bl	8001c74 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e1b4      	b.n	8002e7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b10:	4b2b      	ldr	r3, [pc, #172]	; (8002bc0 <HAL_RCC_OscConfig+0x274>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0f0      	beq.n	8002afe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1c:	4b28      	ldr	r3, [pc, #160]	; (8002bc0 <HAL_RCC_OscConfig+0x274>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	4925      	ldr	r1, [pc, #148]	; (8002bc0 <HAL_RCC_OscConfig+0x274>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	600b      	str	r3, [r1, #0]
 8002b30:	e015      	b.n	8002b5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b32:	4b24      	ldr	r3, [pc, #144]	; (8002bc4 <HAL_RCC_OscConfig+0x278>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b38:	f7ff f89c 	bl	8001c74 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b40:	f7ff f898 	bl	8001c74 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e193      	b.n	8002e7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b52:	4b1b      	ldr	r3, [pc, #108]	; (8002bc0 <HAL_RCC_OscConfig+0x274>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1f0      	bne.n	8002b40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d036      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d016      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b72:	4b15      	ldr	r3, [pc, #84]	; (8002bc8 <HAL_RCC_OscConfig+0x27c>)
 8002b74:	2201      	movs	r2, #1
 8002b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b78:	f7ff f87c 	bl	8001c74 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b80:	f7ff f878 	bl	8001c74 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e173      	b.n	8002e7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b92:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_RCC_OscConfig+0x274>)
 8002b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCC_OscConfig+0x234>
 8002b9e:	e01b      	b.n	8002bd8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ba0:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <HAL_RCC_OscConfig+0x27c>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba6:	f7ff f865 	bl	8001c74 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bac:	e00e      	b.n	8002bcc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bae:	f7ff f861 	bl	8001c74 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d907      	bls.n	8002bcc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e15c      	b.n	8002e7a <HAL_RCC_OscConfig+0x52e>
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	42470000 	.word	0x42470000
 8002bc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bcc:	4b8a      	ldr	r3, [pc, #552]	; (8002df8 <HAL_RCC_OscConfig+0x4ac>)
 8002bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1ea      	bne.n	8002bae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8097 	beq.w	8002d14 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002be6:	2300      	movs	r3, #0
 8002be8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bea:	4b83      	ldr	r3, [pc, #524]	; (8002df8 <HAL_RCC_OscConfig+0x4ac>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10f      	bne.n	8002c16 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	4b7f      	ldr	r3, [pc, #508]	; (8002df8 <HAL_RCC_OscConfig+0x4ac>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	4a7e      	ldr	r2, [pc, #504]	; (8002df8 <HAL_RCC_OscConfig+0x4ac>)
 8002c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c04:	6413      	str	r3, [r2, #64]	; 0x40
 8002c06:	4b7c      	ldr	r3, [pc, #496]	; (8002df8 <HAL_RCC_OscConfig+0x4ac>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0e:	60bb      	str	r3, [r7, #8]
 8002c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c12:	2301      	movs	r3, #1
 8002c14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c16:	4b79      	ldr	r3, [pc, #484]	; (8002dfc <HAL_RCC_OscConfig+0x4b0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d118      	bne.n	8002c54 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c22:	4b76      	ldr	r3, [pc, #472]	; (8002dfc <HAL_RCC_OscConfig+0x4b0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a75      	ldr	r2, [pc, #468]	; (8002dfc <HAL_RCC_OscConfig+0x4b0>)
 8002c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c2e:	f7ff f821 	bl	8001c74 <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c36:	f7ff f81d 	bl	8001c74 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e118      	b.n	8002e7a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c48:	4b6c      	ldr	r3, [pc, #432]	; (8002dfc <HAL_RCC_OscConfig+0x4b0>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0f0      	beq.n	8002c36 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d106      	bne.n	8002c6a <HAL_RCC_OscConfig+0x31e>
 8002c5c:	4b66      	ldr	r3, [pc, #408]	; (8002df8 <HAL_RCC_OscConfig+0x4ac>)
 8002c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c60:	4a65      	ldr	r2, [pc, #404]	; (8002df8 <HAL_RCC_OscConfig+0x4ac>)
 8002c62:	f043 0301 	orr.w	r3, r3, #1
 8002c66:	6713      	str	r3, [r2, #112]	; 0x70
 8002c68:	e01c      	b.n	8002ca4 <HAL_RCC_OscConfig+0x358>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	2b05      	cmp	r3, #5
 8002c70:	d10c      	bne.n	8002c8c <HAL_RCC_OscConfig+0x340>
 8002c72:	4b61      	ldr	r3, [pc, #388]	; (8002df8 <HAL_RCC_OscConfig+0x4ac>)
 8002c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c76:	4a60      	ldr	r2, [pc, #384]	; (8002df8 <HAL_RCC_OscConfig+0x4ac>)
 8002c78:	f043 0304 	orr.w	r3, r3, #4
 8002c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c7e:	4b5e      	ldr	r3, [pc, #376]	; (8002df8 <HAL_RCC_OscConfig+0x4ac>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c82:	4a5d      	ldr	r2, [pc, #372]	; (8002df8 <HAL_RCC_OscConfig+0x4ac>)
 8002c84:	f043 0301 	orr.w	r3, r3, #1
 8002c88:	6713      	str	r3, [r2, #112]	; 0x70
 8002c8a:	e00b      	b.n	8002ca4 <HAL_RCC_OscConfig+0x358>
 8002c8c:	4b5a      	ldr	r3, [pc, #360]	; (8002df8 <HAL_RCC_OscConfig+0x4ac>)
 8002c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c90:	4a59      	ldr	r2, [pc, #356]	; (8002df8 <HAL_RCC_OscConfig+0x4ac>)
 8002c92:	f023 0301 	bic.w	r3, r3, #1
 8002c96:	6713      	str	r3, [r2, #112]	; 0x70
 8002c98:	4b57      	ldr	r3, [pc, #348]	; (8002df8 <HAL_RCC_OscConfig+0x4ac>)
 8002c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9c:	4a56      	ldr	r2, [pc, #344]	; (8002df8 <HAL_RCC_OscConfig+0x4ac>)
 8002c9e:	f023 0304 	bic.w	r3, r3, #4
 8002ca2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d015      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cac:	f7fe ffe2 	bl	8001c74 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb2:	e00a      	b.n	8002cca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cb4:	f7fe ffde 	bl	8001c74 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e0d7      	b.n	8002e7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cca:	4b4b      	ldr	r3, [pc, #300]	; (8002df8 <HAL_RCC_OscConfig+0x4ac>)
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0ee      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x368>
 8002cd6:	e014      	b.n	8002d02 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd8:	f7fe ffcc 	bl	8001c74 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cde:	e00a      	b.n	8002cf6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ce0:	f7fe ffc8 	bl	8001c74 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e0c1      	b.n	8002e7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf6:	4b40      	ldr	r3, [pc, #256]	; (8002df8 <HAL_RCC_OscConfig+0x4ac>)
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1ee      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d02:	7dfb      	ldrb	r3, [r7, #23]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d105      	bne.n	8002d14 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d08:	4b3b      	ldr	r3, [pc, #236]	; (8002df8 <HAL_RCC_OscConfig+0x4ac>)
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	4a3a      	ldr	r2, [pc, #232]	; (8002df8 <HAL_RCC_OscConfig+0x4ac>)
 8002d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 80ad 	beq.w	8002e78 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d1e:	4b36      	ldr	r3, [pc, #216]	; (8002df8 <HAL_RCC_OscConfig+0x4ac>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d060      	beq.n	8002dec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d145      	bne.n	8002dbe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d32:	4b33      	ldr	r3, [pc, #204]	; (8002e00 <HAL_RCC_OscConfig+0x4b4>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d38:	f7fe ff9c 	bl	8001c74 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d40:	f7fe ff98 	bl	8001c74 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e093      	b.n	8002e7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d52:	4b29      	ldr	r3, [pc, #164]	; (8002df8 <HAL_RCC_OscConfig+0x4ac>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69da      	ldr	r2, [r3, #28]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	019b      	lsls	r3, r3, #6
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d74:	085b      	lsrs	r3, r3, #1
 8002d76:	3b01      	subs	r3, #1
 8002d78:	041b      	lsls	r3, r3, #16
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d80:	061b      	lsls	r3, r3, #24
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d88:	071b      	lsls	r3, r3, #28
 8002d8a:	491b      	ldr	r1, [pc, #108]	; (8002df8 <HAL_RCC_OscConfig+0x4ac>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d90:	4b1b      	ldr	r3, [pc, #108]	; (8002e00 <HAL_RCC_OscConfig+0x4b4>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d96:	f7fe ff6d 	bl	8001c74 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d9e:	f7fe ff69 	bl	8001c74 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e064      	b.n	8002e7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db0:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <HAL_RCC_OscConfig+0x4ac>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0f0      	beq.n	8002d9e <HAL_RCC_OscConfig+0x452>
 8002dbc:	e05c      	b.n	8002e78 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dbe:	4b10      	ldr	r3, [pc, #64]	; (8002e00 <HAL_RCC_OscConfig+0x4b4>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc4:	f7fe ff56 	bl	8001c74 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dcc:	f7fe ff52 	bl	8001c74 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e04d      	b.n	8002e7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dde:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <HAL_RCC_OscConfig+0x4ac>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f0      	bne.n	8002dcc <HAL_RCC_OscConfig+0x480>
 8002dea:	e045      	b.n	8002e78 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d107      	bne.n	8002e04 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e040      	b.n	8002e7a <HAL_RCC_OscConfig+0x52e>
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40007000 	.word	0x40007000
 8002e00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e04:	4b1f      	ldr	r3, [pc, #124]	; (8002e84 <HAL_RCC_OscConfig+0x538>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d030      	beq.n	8002e74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d129      	bne.n	8002e74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d122      	bne.n	8002e74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e34:	4013      	ands	r3, r2
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d119      	bne.n	8002e74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4a:	085b      	lsrs	r3, r3, #1
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d10f      	bne.n	8002e74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d107      	bne.n	8002e74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d001      	beq.n	8002e78 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e000      	b.n	8002e7a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40023800 	.word	0x40023800

08002e88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e07b      	b.n	8002f92 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d108      	bne.n	8002eb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eaa:	d009      	beq.n	8002ec0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	61da      	str	r2, [r3, #28]
 8002eb2:	e005      	b.n	8002ec0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d106      	bne.n	8002ee0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7fe fa36 	bl	800134c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ef6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f30:	431a      	orrs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f44:	ea42 0103 	orr.w	r1, r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	0c1b      	lsrs	r3, r3, #16
 8002f5e:	f003 0104 	and.w	r1, r3, #4
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	f003 0210 	and.w	r2, r3, #16
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	69da      	ldr	r2, [r3, #28]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b088      	sub	sp, #32
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	60f8      	str	r0, [r7, #12]
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	603b      	str	r3, [r7, #0]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_SPI_Transmit+0x22>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e126      	b.n	800320a <HAL_SPI_Transmit+0x270>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fc4:	f7fe fe56 	bl	8001c74 <HAL_GetTick>
 8002fc8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002fca:	88fb      	ldrh	r3, [r7, #6]
 8002fcc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d002      	beq.n	8002fe0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fde:	e10b      	b.n	80031f8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d002      	beq.n	8002fec <HAL_SPI_Transmit+0x52>
 8002fe6:	88fb      	ldrh	r3, [r7, #6]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d102      	bne.n	8002ff2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ff0:	e102      	b.n	80031f8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2203      	movs	r2, #3
 8002ff6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	88fa      	ldrh	r2, [r7, #6]
 800300a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	88fa      	ldrh	r2, [r7, #6]
 8003010:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003038:	d10f      	bne.n	800305a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003048:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003058:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003064:	2b40      	cmp	r3, #64	; 0x40
 8003066:	d007      	beq.n	8003078 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003076:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003080:	d14b      	bne.n	800311a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <HAL_SPI_Transmit+0xf6>
 800308a:	8afb      	ldrh	r3, [r7, #22]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d13e      	bne.n	800310e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003094:	881a      	ldrh	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a0:	1c9a      	adds	r2, r3, #2
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030b4:	e02b      	b.n	800310e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d112      	bne.n	80030ea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c8:	881a      	ldrh	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d4:	1c9a      	adds	r2, r3, #2
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030de:	b29b      	uxth	r3, r3
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80030e8:	e011      	b.n	800310e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030ea:	f7fe fdc3 	bl	8001c74 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d803      	bhi.n	8003102 <HAL_SPI_Transmit+0x168>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003100:	d102      	bne.n	8003108 <HAL_SPI_Transmit+0x16e>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d102      	bne.n	800310e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800310c:	e074      	b.n	80031f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003112:	b29b      	uxth	r3, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1ce      	bne.n	80030b6 <HAL_SPI_Transmit+0x11c>
 8003118:	e04c      	b.n	80031b4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <HAL_SPI_Transmit+0x18e>
 8003122:	8afb      	ldrh	r3, [r7, #22]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d140      	bne.n	80031aa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	330c      	adds	r3, #12
 8003132:	7812      	ldrb	r2, [r2, #0]
 8003134:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	1c5a      	adds	r2, r3, #1
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003144:	b29b      	uxth	r3, r3
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800314e:	e02c      	b.n	80031aa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b02      	cmp	r3, #2
 800315c:	d113      	bne.n	8003186 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	330c      	adds	r3, #12
 8003168:	7812      	ldrb	r2, [r2, #0]
 800316a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003170:	1c5a      	adds	r2, r3, #1
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800317a:	b29b      	uxth	r3, r3
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	86da      	strh	r2, [r3, #54]	; 0x36
 8003184:	e011      	b.n	80031aa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003186:	f7fe fd75 	bl	8001c74 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	429a      	cmp	r2, r3
 8003194:	d803      	bhi.n	800319e <HAL_SPI_Transmit+0x204>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319c:	d102      	bne.n	80031a4 <HAL_SPI_Transmit+0x20a>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d102      	bne.n	80031aa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80031a8:	e026      	b.n	80031f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1cd      	bne.n	8003150 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	6839      	ldr	r1, [r7, #0]
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 f8b3 	bl	8003324 <SPI_EndRxTxTransaction>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2220      	movs	r2, #32
 80031c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10a      	bne.n	80031e8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031d2:	2300      	movs	r3, #0
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d002      	beq.n	80031f6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	77fb      	strb	r3, [r7, #31]
 80031f4:	e000      	b.n	80031f8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80031f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003208:	7ffb      	ldrb	r3, [r7, #31]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3720      	adds	r7, #32
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	4613      	mov	r3, r2
 8003222:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003224:	f7fe fd26 	bl	8001c74 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322c:	1a9b      	subs	r3, r3, r2
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	4413      	add	r3, r2
 8003232:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003234:	f7fe fd1e 	bl	8001c74 <HAL_GetTick>
 8003238:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800323a:	4b39      	ldr	r3, [pc, #228]	; (8003320 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	015b      	lsls	r3, r3, #5
 8003240:	0d1b      	lsrs	r3, r3, #20
 8003242:	69fa      	ldr	r2, [r7, #28]
 8003244:	fb02 f303 	mul.w	r3, r2, r3
 8003248:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800324a:	e054      	b.n	80032f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003252:	d050      	beq.n	80032f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003254:	f7fe fd0e 	bl	8001c74 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	69fa      	ldr	r2, [r7, #28]
 8003260:	429a      	cmp	r2, r3
 8003262:	d902      	bls.n	800326a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d13d      	bne.n	80032e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003278:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003282:	d111      	bne.n	80032a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800328c:	d004      	beq.n	8003298 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003296:	d107      	bne.n	80032a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032b0:	d10f      	bne.n	80032d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e017      	b.n	8003316 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	4013      	ands	r3, r2
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	429a      	cmp	r2, r3
 8003304:	bf0c      	ite	eq
 8003306:	2301      	moveq	r3, #1
 8003308:	2300      	movne	r3, #0
 800330a:	b2db      	uxtb	r3, r3
 800330c:	461a      	mov	r2, r3
 800330e:	79fb      	ldrb	r3, [r7, #7]
 8003310:	429a      	cmp	r2, r3
 8003312:	d19b      	bne.n	800324c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	20012c14 	.word	0x20012c14

08003324 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af02      	add	r7, sp, #8
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003330:	4b1b      	ldr	r3, [pc, #108]	; (80033a0 <SPI_EndRxTxTransaction+0x7c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a1b      	ldr	r2, [pc, #108]	; (80033a4 <SPI_EndRxTxTransaction+0x80>)
 8003336:	fba2 2303 	umull	r2, r3, r2, r3
 800333a:	0d5b      	lsrs	r3, r3, #21
 800333c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003340:	fb02 f303 	mul.w	r3, r2, r3
 8003344:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800334e:	d112      	bne.n	8003376 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2200      	movs	r2, #0
 8003358:	2180      	movs	r1, #128	; 0x80
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f7ff ff5a 	bl	8003214 <SPI_WaitFlagStateUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d016      	beq.n	8003394 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336a:	f043 0220 	orr.w	r2, r3, #32
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e00f      	b.n	8003396 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00a      	beq.n	8003392 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	3b01      	subs	r3, #1
 8003380:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338c:	2b80      	cmp	r3, #128	; 0x80
 800338e:	d0f2      	beq.n	8003376 <SPI_EndRxTxTransaction+0x52>
 8003390:	e000      	b.n	8003394 <SPI_EndRxTxTransaction+0x70>
        break;
 8003392:	bf00      	nop
  }

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	20012c14 	.word	0x20012c14
 80033a4:	165e9f81 	.word	0x165e9f81

080033a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e041      	b.n	800343e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d106      	bne.n	80033d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7fe f834 	bl	800143c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3304      	adds	r3, #4
 80033e4:	4619      	mov	r1, r3
 80033e6:	4610      	mov	r0, r2
 80033e8:	f000 fa96 	bl	8003918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b01      	cmp	r3, #1
 800345a:	d001      	beq.n	8003460 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e04e      	b.n	80034fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2202      	movs	r2, #2
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a23      	ldr	r2, [pc, #140]	; (800350c <HAL_TIM_Base_Start_IT+0xc4>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d022      	beq.n	80034c8 <HAL_TIM_Base_Start_IT+0x80>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800348a:	d01d      	beq.n	80034c8 <HAL_TIM_Base_Start_IT+0x80>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a1f      	ldr	r2, [pc, #124]	; (8003510 <HAL_TIM_Base_Start_IT+0xc8>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d018      	beq.n	80034c8 <HAL_TIM_Base_Start_IT+0x80>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a1e      	ldr	r2, [pc, #120]	; (8003514 <HAL_TIM_Base_Start_IT+0xcc>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d013      	beq.n	80034c8 <HAL_TIM_Base_Start_IT+0x80>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a1c      	ldr	r2, [pc, #112]	; (8003518 <HAL_TIM_Base_Start_IT+0xd0>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d00e      	beq.n	80034c8 <HAL_TIM_Base_Start_IT+0x80>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a1b      	ldr	r2, [pc, #108]	; (800351c <HAL_TIM_Base_Start_IT+0xd4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d009      	beq.n	80034c8 <HAL_TIM_Base_Start_IT+0x80>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a19      	ldr	r2, [pc, #100]	; (8003520 <HAL_TIM_Base_Start_IT+0xd8>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d004      	beq.n	80034c8 <HAL_TIM_Base_Start_IT+0x80>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a18      	ldr	r2, [pc, #96]	; (8003524 <HAL_TIM_Base_Start_IT+0xdc>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d111      	bne.n	80034ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b06      	cmp	r3, #6
 80034d8:	d010      	beq.n	80034fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f042 0201 	orr.w	r2, r2, #1
 80034e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ea:	e007      	b.n	80034fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0201 	orr.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40010000 	.word	0x40010000
 8003510:	40000400 	.word	0x40000400
 8003514:	40000800 	.word	0x40000800
 8003518:	40000c00 	.word	0x40000c00
 800351c:	40010400 	.word	0x40010400
 8003520:	40014000 	.word	0x40014000
 8003524:	40001800 	.word	0x40001800

08003528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b02      	cmp	r3, #2
 800353c:	d122      	bne.n	8003584 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b02      	cmp	r3, #2
 800354a:	d11b      	bne.n	8003584 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f06f 0202 	mvn.w	r2, #2
 8003554:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f9b5 	bl	80038da <HAL_TIM_IC_CaptureCallback>
 8003570:	e005      	b.n	800357e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f9a7 	bl	80038c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f9b8 	bl	80038ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	2b04      	cmp	r3, #4
 8003590:	d122      	bne.n	80035d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b04      	cmp	r3, #4
 800359e:	d11b      	bne.n	80035d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f06f 0204 	mvn.w	r2, #4
 80035a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2202      	movs	r2, #2
 80035ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f98b 	bl	80038da <HAL_TIM_IC_CaptureCallback>
 80035c4:	e005      	b.n	80035d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f97d 	bl	80038c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f98e 	bl	80038ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d122      	bne.n	800362c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d11b      	bne.n	800362c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0208 	mvn.w	r2, #8
 80035fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2204      	movs	r2, #4
 8003602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f961 	bl	80038da <HAL_TIM_IC_CaptureCallback>
 8003618:	e005      	b.n	8003626 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f953 	bl	80038c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f964 	bl	80038ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	f003 0310 	and.w	r3, r3, #16
 8003636:	2b10      	cmp	r3, #16
 8003638:	d122      	bne.n	8003680 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 0310 	and.w	r3, r3, #16
 8003644:	2b10      	cmp	r3, #16
 8003646:	d11b      	bne.n	8003680 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f06f 0210 	mvn.w	r2, #16
 8003650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2208      	movs	r2, #8
 8003656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f937 	bl	80038da <HAL_TIM_IC_CaptureCallback>
 800366c:	e005      	b.n	800367a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f929 	bl	80038c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f93a 	bl	80038ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b01      	cmp	r3, #1
 800368c:	d10e      	bne.n	80036ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b01      	cmp	r3, #1
 800369a:	d107      	bne.n	80036ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f06f 0201 	mvn.w	r2, #1
 80036a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7fd ffb2 	bl	8001610 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b6:	2b80      	cmp	r3, #128	; 0x80
 80036b8:	d10e      	bne.n	80036d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c4:	2b80      	cmp	r3, #128	; 0x80
 80036c6:	d107      	bne.n	80036d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fae0 	bl	8003c98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e2:	2b40      	cmp	r3, #64	; 0x40
 80036e4:	d10e      	bne.n	8003704 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f0:	2b40      	cmp	r3, #64	; 0x40
 80036f2:	d107      	bne.n	8003704 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f8ff 	bl	8003902 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f003 0320 	and.w	r3, r3, #32
 800370e:	2b20      	cmp	r3, #32
 8003710:	d10e      	bne.n	8003730 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b20      	cmp	r3, #32
 800371e:	d107      	bne.n	8003730 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0220 	mvn.w	r2, #32
 8003728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 faaa 	bl	8003c84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003730:	bf00      	nop
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800374c:	2b01      	cmp	r3, #1
 800374e:	d101      	bne.n	8003754 <HAL_TIM_ConfigClockSource+0x1c>
 8003750:	2302      	movs	r3, #2
 8003752:	e0b4      	b.n	80038be <HAL_TIM_ConfigClockSource+0x186>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800377a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800378c:	d03e      	beq.n	800380c <HAL_TIM_ConfigClockSource+0xd4>
 800378e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003792:	f200 8087 	bhi.w	80038a4 <HAL_TIM_ConfigClockSource+0x16c>
 8003796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800379a:	f000 8086 	beq.w	80038aa <HAL_TIM_ConfigClockSource+0x172>
 800379e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037a2:	d87f      	bhi.n	80038a4 <HAL_TIM_ConfigClockSource+0x16c>
 80037a4:	2b70      	cmp	r3, #112	; 0x70
 80037a6:	d01a      	beq.n	80037de <HAL_TIM_ConfigClockSource+0xa6>
 80037a8:	2b70      	cmp	r3, #112	; 0x70
 80037aa:	d87b      	bhi.n	80038a4 <HAL_TIM_ConfigClockSource+0x16c>
 80037ac:	2b60      	cmp	r3, #96	; 0x60
 80037ae:	d050      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0x11a>
 80037b0:	2b60      	cmp	r3, #96	; 0x60
 80037b2:	d877      	bhi.n	80038a4 <HAL_TIM_ConfigClockSource+0x16c>
 80037b4:	2b50      	cmp	r3, #80	; 0x50
 80037b6:	d03c      	beq.n	8003832 <HAL_TIM_ConfigClockSource+0xfa>
 80037b8:	2b50      	cmp	r3, #80	; 0x50
 80037ba:	d873      	bhi.n	80038a4 <HAL_TIM_ConfigClockSource+0x16c>
 80037bc:	2b40      	cmp	r3, #64	; 0x40
 80037be:	d058      	beq.n	8003872 <HAL_TIM_ConfigClockSource+0x13a>
 80037c0:	2b40      	cmp	r3, #64	; 0x40
 80037c2:	d86f      	bhi.n	80038a4 <HAL_TIM_ConfigClockSource+0x16c>
 80037c4:	2b30      	cmp	r3, #48	; 0x30
 80037c6:	d064      	beq.n	8003892 <HAL_TIM_ConfigClockSource+0x15a>
 80037c8:	2b30      	cmp	r3, #48	; 0x30
 80037ca:	d86b      	bhi.n	80038a4 <HAL_TIM_ConfigClockSource+0x16c>
 80037cc:	2b20      	cmp	r3, #32
 80037ce:	d060      	beq.n	8003892 <HAL_TIM_ConfigClockSource+0x15a>
 80037d0:	2b20      	cmp	r3, #32
 80037d2:	d867      	bhi.n	80038a4 <HAL_TIM_ConfigClockSource+0x16c>
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d05c      	beq.n	8003892 <HAL_TIM_ConfigClockSource+0x15a>
 80037d8:	2b10      	cmp	r3, #16
 80037da:	d05a      	beq.n	8003892 <HAL_TIM_ConfigClockSource+0x15a>
 80037dc:	e062      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6818      	ldr	r0, [r3, #0]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	6899      	ldr	r1, [r3, #8]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f000 f9ad 	bl	8003b4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003800:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	609a      	str	r2, [r3, #8]
      break;
 800380a:	e04f      	b.n	80038ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6818      	ldr	r0, [r3, #0]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	6899      	ldr	r1, [r3, #8]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f000 f996 	bl	8003b4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800382e:	609a      	str	r2, [r3, #8]
      break;
 8003830:	e03c      	b.n	80038ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6818      	ldr	r0, [r3, #0]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	6859      	ldr	r1, [r3, #4]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	461a      	mov	r2, r3
 8003840:	f000 f90a 	bl	8003a58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2150      	movs	r1, #80	; 0x50
 800384a:	4618      	mov	r0, r3
 800384c:	f000 f963 	bl	8003b16 <TIM_ITRx_SetConfig>
      break;
 8003850:	e02c      	b.n	80038ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	6859      	ldr	r1, [r3, #4]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	461a      	mov	r2, r3
 8003860:	f000 f929 	bl	8003ab6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2160      	movs	r1, #96	; 0x60
 800386a:	4618      	mov	r0, r3
 800386c:	f000 f953 	bl	8003b16 <TIM_ITRx_SetConfig>
      break;
 8003870:	e01c      	b.n	80038ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	6859      	ldr	r1, [r3, #4]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	461a      	mov	r2, r3
 8003880:	f000 f8ea 	bl	8003a58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2140      	movs	r1, #64	; 0x40
 800388a:	4618      	mov	r0, r3
 800388c:	f000 f943 	bl	8003b16 <TIM_ITRx_SetConfig>
      break;
 8003890:	e00c      	b.n	80038ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4619      	mov	r1, r3
 800389c:	4610      	mov	r0, r2
 800389e:	f000 f93a 	bl	8003b16 <TIM_ITRx_SetConfig>
      break;
 80038a2:	e003      	b.n	80038ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	73fb      	strb	r3, [r7, #15]
      break;
 80038a8:	e000      	b.n	80038ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
	...

08003918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a40      	ldr	r2, [pc, #256]	; (8003a2c <TIM_Base_SetConfig+0x114>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d013      	beq.n	8003958 <TIM_Base_SetConfig+0x40>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003936:	d00f      	beq.n	8003958 <TIM_Base_SetConfig+0x40>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a3d      	ldr	r2, [pc, #244]	; (8003a30 <TIM_Base_SetConfig+0x118>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d00b      	beq.n	8003958 <TIM_Base_SetConfig+0x40>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a3c      	ldr	r2, [pc, #240]	; (8003a34 <TIM_Base_SetConfig+0x11c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d007      	beq.n	8003958 <TIM_Base_SetConfig+0x40>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a3b      	ldr	r2, [pc, #236]	; (8003a38 <TIM_Base_SetConfig+0x120>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d003      	beq.n	8003958 <TIM_Base_SetConfig+0x40>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a3a      	ldr	r2, [pc, #232]	; (8003a3c <TIM_Base_SetConfig+0x124>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d108      	bne.n	800396a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800395e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	4313      	orrs	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a2f      	ldr	r2, [pc, #188]	; (8003a2c <TIM_Base_SetConfig+0x114>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d02b      	beq.n	80039ca <TIM_Base_SetConfig+0xb2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003978:	d027      	beq.n	80039ca <TIM_Base_SetConfig+0xb2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a2c      	ldr	r2, [pc, #176]	; (8003a30 <TIM_Base_SetConfig+0x118>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d023      	beq.n	80039ca <TIM_Base_SetConfig+0xb2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a2b      	ldr	r2, [pc, #172]	; (8003a34 <TIM_Base_SetConfig+0x11c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d01f      	beq.n	80039ca <TIM_Base_SetConfig+0xb2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a2a      	ldr	r2, [pc, #168]	; (8003a38 <TIM_Base_SetConfig+0x120>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d01b      	beq.n	80039ca <TIM_Base_SetConfig+0xb2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a29      	ldr	r2, [pc, #164]	; (8003a3c <TIM_Base_SetConfig+0x124>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d017      	beq.n	80039ca <TIM_Base_SetConfig+0xb2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a28      	ldr	r2, [pc, #160]	; (8003a40 <TIM_Base_SetConfig+0x128>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d013      	beq.n	80039ca <TIM_Base_SetConfig+0xb2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a27      	ldr	r2, [pc, #156]	; (8003a44 <TIM_Base_SetConfig+0x12c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00f      	beq.n	80039ca <TIM_Base_SetConfig+0xb2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a26      	ldr	r2, [pc, #152]	; (8003a48 <TIM_Base_SetConfig+0x130>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d00b      	beq.n	80039ca <TIM_Base_SetConfig+0xb2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a25      	ldr	r2, [pc, #148]	; (8003a4c <TIM_Base_SetConfig+0x134>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d007      	beq.n	80039ca <TIM_Base_SetConfig+0xb2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a24      	ldr	r2, [pc, #144]	; (8003a50 <TIM_Base_SetConfig+0x138>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d003      	beq.n	80039ca <TIM_Base_SetConfig+0xb2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a23      	ldr	r2, [pc, #140]	; (8003a54 <TIM_Base_SetConfig+0x13c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d108      	bne.n	80039dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4313      	orrs	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a0a      	ldr	r2, [pc, #40]	; (8003a2c <TIM_Base_SetConfig+0x114>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d003      	beq.n	8003a10 <TIM_Base_SetConfig+0xf8>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a0c      	ldr	r2, [pc, #48]	; (8003a3c <TIM_Base_SetConfig+0x124>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d103      	bne.n	8003a18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	691a      	ldr	r2, [r3, #16]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	615a      	str	r2, [r3, #20]
}
 8003a1e:	bf00      	nop
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40010000 	.word	0x40010000
 8003a30:	40000400 	.word	0x40000400
 8003a34:	40000800 	.word	0x40000800
 8003a38:	40000c00 	.word	0x40000c00
 8003a3c:	40010400 	.word	0x40010400
 8003a40:	40014000 	.word	0x40014000
 8003a44:	40014400 	.word	0x40014400
 8003a48:	40014800 	.word	0x40014800
 8003a4c:	40001800 	.word	0x40001800
 8003a50:	40001c00 	.word	0x40001c00
 8003a54:	40002000 	.word	0x40002000

08003a58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b087      	sub	sp, #28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	f023 0201 	bic.w	r2, r3, #1
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f023 030a 	bic.w	r3, r3, #10
 8003a94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	621a      	str	r2, [r3, #32]
}
 8003aaa:	bf00      	nop
 8003aac:	371c      	adds	r7, #28
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b087      	sub	sp, #28
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	f023 0210 	bic.w	r2, r3, #16
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ae0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	031b      	lsls	r3, r3, #12
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003af2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	621a      	str	r2, [r3, #32]
}
 8003b0a:	bf00      	nop
 8003b0c:	371c      	adds	r7, #28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b085      	sub	sp, #20
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f043 0307 	orr.w	r3, r3, #7
 8003b38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	609a      	str	r2, [r3, #8]
}
 8003b40:	bf00      	nop
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
 8003b58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	021a      	lsls	r2, r3, #8
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	609a      	str	r2, [r3, #8]
}
 8003b80:	bf00      	nop
 8003b82:	371c      	adds	r7, #28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d101      	bne.n	8003ba4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e05a      	b.n	8003c5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a21      	ldr	r2, [pc, #132]	; (8003c68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d022      	beq.n	8003c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf0:	d01d      	beq.n	8003c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a1d      	ldr	r2, [pc, #116]	; (8003c6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d018      	beq.n	8003c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a1b      	ldr	r2, [pc, #108]	; (8003c70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d013      	beq.n	8003c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a1a      	ldr	r2, [pc, #104]	; (8003c74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d00e      	beq.n	8003c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a18      	ldr	r2, [pc, #96]	; (8003c78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d009      	beq.n	8003c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a17      	ldr	r2, [pc, #92]	; (8003c7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d004      	beq.n	8003c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a15      	ldr	r2, [pc, #84]	; (8003c80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d10c      	bne.n	8003c48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	40010000 	.word	0x40010000
 8003c6c:	40000400 	.word	0x40000400
 8003c70:	40000800 	.word	0x40000800
 8003c74:	40000c00 	.word	0x40000c00
 8003c78:	40010400 	.word	0x40010400
 8003c7c:	40014000 	.word	0x40014000
 8003c80:	40001800 	.word	0x40001800

08003c84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e03f      	b.n	8003d3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d106      	bne.n	8003cd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7fd fbf6 	bl	80014c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2224      	movs	r2, #36	; 0x24
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f829 	bl	8003d48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	695a      	ldr	r2, [r3, #20]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
	...

08003d48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d4c:	b0c0      	sub	sp, #256	; 0x100
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d64:	68d9      	ldr	r1, [r3, #12]
 8003d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	ea40 0301 	orr.w	r3, r0, r1
 8003d70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003da0:	f021 010c 	bic.w	r1, r1, #12
 8003da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003dae:	430b      	orrs	r3, r1
 8003db0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc2:	6999      	ldr	r1, [r3, #24]
 8003dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	ea40 0301 	orr.w	r3, r0, r1
 8003dce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	4b8f      	ldr	r3, [pc, #572]	; (8004014 <UART_SetConfig+0x2cc>)
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d005      	beq.n	8003de8 <UART_SetConfig+0xa0>
 8003ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	4b8d      	ldr	r3, [pc, #564]	; (8004018 <UART_SetConfig+0x2d0>)
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d104      	bne.n	8003df2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003de8:	f7fe fb6c 	bl	80024c4 <HAL_RCC_GetPCLK2Freq>
 8003dec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003df0:	e003      	b.n	8003dfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003df2:	f7fe fb53 	bl	800249c <HAL_RCC_GetPCLK1Freq>
 8003df6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e04:	f040 810c 	bne.w	8004020 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e1a:	4622      	mov	r2, r4
 8003e1c:	462b      	mov	r3, r5
 8003e1e:	1891      	adds	r1, r2, r2
 8003e20:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e22:	415b      	adcs	r3, r3
 8003e24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e2a:	4621      	mov	r1, r4
 8003e2c:	eb12 0801 	adds.w	r8, r2, r1
 8003e30:	4629      	mov	r1, r5
 8003e32:	eb43 0901 	adc.w	r9, r3, r1
 8003e36:	f04f 0200 	mov.w	r2, #0
 8003e3a:	f04f 0300 	mov.w	r3, #0
 8003e3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e4a:	4690      	mov	r8, r2
 8003e4c:	4699      	mov	r9, r3
 8003e4e:	4623      	mov	r3, r4
 8003e50:	eb18 0303 	adds.w	r3, r8, r3
 8003e54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e58:	462b      	mov	r3, r5
 8003e5a:	eb49 0303 	adc.w	r3, r9, r3
 8003e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e76:	460b      	mov	r3, r1
 8003e78:	18db      	adds	r3, r3, r3
 8003e7a:	653b      	str	r3, [r7, #80]	; 0x50
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	eb42 0303 	adc.w	r3, r2, r3
 8003e82:	657b      	str	r3, [r7, #84]	; 0x54
 8003e84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e8c:	f7fc f9ba 	bl	8000204 <__aeabi_uldivmod>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4b61      	ldr	r3, [pc, #388]	; (800401c <UART_SetConfig+0x2d4>)
 8003e96:	fba3 2302 	umull	r2, r3, r3, r2
 8003e9a:	095b      	lsrs	r3, r3, #5
 8003e9c:	011c      	lsls	r4, r3, #4
 8003e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ea8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003eac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003eb0:	4642      	mov	r2, r8
 8003eb2:	464b      	mov	r3, r9
 8003eb4:	1891      	adds	r1, r2, r2
 8003eb6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003eb8:	415b      	adcs	r3, r3
 8003eba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ebc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ec0:	4641      	mov	r1, r8
 8003ec2:	eb12 0a01 	adds.w	sl, r2, r1
 8003ec6:	4649      	mov	r1, r9
 8003ec8:	eb43 0b01 	adc.w	fp, r3, r1
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ed8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003edc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ee0:	4692      	mov	sl, r2
 8003ee2:	469b      	mov	fp, r3
 8003ee4:	4643      	mov	r3, r8
 8003ee6:	eb1a 0303 	adds.w	r3, sl, r3
 8003eea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003eee:	464b      	mov	r3, r9
 8003ef0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ef4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	18db      	adds	r3, r3, r3
 8003f10:	643b      	str	r3, [r7, #64]	; 0x40
 8003f12:	4613      	mov	r3, r2
 8003f14:	eb42 0303 	adc.w	r3, r2, r3
 8003f18:	647b      	str	r3, [r7, #68]	; 0x44
 8003f1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f22:	f7fc f96f 	bl	8000204 <__aeabi_uldivmod>
 8003f26:	4602      	mov	r2, r0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	4b3b      	ldr	r3, [pc, #236]	; (800401c <UART_SetConfig+0x2d4>)
 8003f2e:	fba3 2301 	umull	r2, r3, r3, r1
 8003f32:	095b      	lsrs	r3, r3, #5
 8003f34:	2264      	movs	r2, #100	; 0x64
 8003f36:	fb02 f303 	mul.w	r3, r2, r3
 8003f3a:	1acb      	subs	r3, r1, r3
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f42:	4b36      	ldr	r3, [pc, #216]	; (800401c <UART_SetConfig+0x2d4>)
 8003f44:	fba3 2302 	umull	r2, r3, r3, r2
 8003f48:	095b      	lsrs	r3, r3, #5
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f50:	441c      	add	r4, r3
 8003f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f56:	2200      	movs	r2, #0
 8003f58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f64:	4642      	mov	r2, r8
 8003f66:	464b      	mov	r3, r9
 8003f68:	1891      	adds	r1, r2, r2
 8003f6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f6c:	415b      	adcs	r3, r3
 8003f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f74:	4641      	mov	r1, r8
 8003f76:	1851      	adds	r1, r2, r1
 8003f78:	6339      	str	r1, [r7, #48]	; 0x30
 8003f7a:	4649      	mov	r1, r9
 8003f7c:	414b      	adcs	r3, r1
 8003f7e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f80:	f04f 0200 	mov.w	r2, #0
 8003f84:	f04f 0300 	mov.w	r3, #0
 8003f88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f8c:	4659      	mov	r1, fp
 8003f8e:	00cb      	lsls	r3, r1, #3
 8003f90:	4651      	mov	r1, sl
 8003f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f96:	4651      	mov	r1, sl
 8003f98:	00ca      	lsls	r2, r1, #3
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4642      	mov	r2, r8
 8003fa2:	189b      	adds	r3, r3, r2
 8003fa4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fa8:	464b      	mov	r3, r9
 8003faa:	460a      	mov	r2, r1
 8003fac:	eb42 0303 	adc.w	r3, r2, r3
 8003fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003fc0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003fc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003fc8:	460b      	mov	r3, r1
 8003fca:	18db      	adds	r3, r3, r3
 8003fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fce:	4613      	mov	r3, r2
 8003fd0:	eb42 0303 	adc.w	r3, r2, r3
 8003fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003fde:	f7fc f911 	bl	8000204 <__aeabi_uldivmod>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4b0d      	ldr	r3, [pc, #52]	; (800401c <UART_SetConfig+0x2d4>)
 8003fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fec:	095b      	lsrs	r3, r3, #5
 8003fee:	2164      	movs	r1, #100	; 0x64
 8003ff0:	fb01 f303 	mul.w	r3, r1, r3
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	3332      	adds	r3, #50	; 0x32
 8003ffa:	4a08      	ldr	r2, [pc, #32]	; (800401c <UART_SetConfig+0x2d4>)
 8003ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8004000:	095b      	lsrs	r3, r3, #5
 8004002:	f003 0207 	and.w	r2, r3, #7
 8004006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4422      	add	r2, r4
 800400e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004010:	e105      	b.n	800421e <UART_SetConfig+0x4d6>
 8004012:	bf00      	nop
 8004014:	40011000 	.word	0x40011000
 8004018:	40011400 	.word	0x40011400
 800401c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004024:	2200      	movs	r2, #0
 8004026:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800402a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800402e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004032:	4642      	mov	r2, r8
 8004034:	464b      	mov	r3, r9
 8004036:	1891      	adds	r1, r2, r2
 8004038:	6239      	str	r1, [r7, #32]
 800403a:	415b      	adcs	r3, r3
 800403c:	627b      	str	r3, [r7, #36]	; 0x24
 800403e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004042:	4641      	mov	r1, r8
 8004044:	1854      	adds	r4, r2, r1
 8004046:	4649      	mov	r1, r9
 8004048:	eb43 0501 	adc.w	r5, r3, r1
 800404c:	f04f 0200 	mov.w	r2, #0
 8004050:	f04f 0300 	mov.w	r3, #0
 8004054:	00eb      	lsls	r3, r5, #3
 8004056:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800405a:	00e2      	lsls	r2, r4, #3
 800405c:	4614      	mov	r4, r2
 800405e:	461d      	mov	r5, r3
 8004060:	4643      	mov	r3, r8
 8004062:	18e3      	adds	r3, r4, r3
 8004064:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004068:	464b      	mov	r3, r9
 800406a:	eb45 0303 	adc.w	r3, r5, r3
 800406e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800407e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800408e:	4629      	mov	r1, r5
 8004090:	008b      	lsls	r3, r1, #2
 8004092:	4621      	mov	r1, r4
 8004094:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004098:	4621      	mov	r1, r4
 800409a:	008a      	lsls	r2, r1, #2
 800409c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80040a0:	f7fc f8b0 	bl	8000204 <__aeabi_uldivmod>
 80040a4:	4602      	mov	r2, r0
 80040a6:	460b      	mov	r3, r1
 80040a8:	4b60      	ldr	r3, [pc, #384]	; (800422c <UART_SetConfig+0x4e4>)
 80040aa:	fba3 2302 	umull	r2, r3, r3, r2
 80040ae:	095b      	lsrs	r3, r3, #5
 80040b0:	011c      	lsls	r4, r3, #4
 80040b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040b6:	2200      	movs	r2, #0
 80040b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80040c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80040c4:	4642      	mov	r2, r8
 80040c6:	464b      	mov	r3, r9
 80040c8:	1891      	adds	r1, r2, r2
 80040ca:	61b9      	str	r1, [r7, #24]
 80040cc:	415b      	adcs	r3, r3
 80040ce:	61fb      	str	r3, [r7, #28]
 80040d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040d4:	4641      	mov	r1, r8
 80040d6:	1851      	adds	r1, r2, r1
 80040d8:	6139      	str	r1, [r7, #16]
 80040da:	4649      	mov	r1, r9
 80040dc:	414b      	adcs	r3, r1
 80040de:	617b      	str	r3, [r7, #20]
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040ec:	4659      	mov	r1, fp
 80040ee:	00cb      	lsls	r3, r1, #3
 80040f0:	4651      	mov	r1, sl
 80040f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040f6:	4651      	mov	r1, sl
 80040f8:	00ca      	lsls	r2, r1, #3
 80040fa:	4610      	mov	r0, r2
 80040fc:	4619      	mov	r1, r3
 80040fe:	4603      	mov	r3, r0
 8004100:	4642      	mov	r2, r8
 8004102:	189b      	adds	r3, r3, r2
 8004104:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004108:	464b      	mov	r3, r9
 800410a:	460a      	mov	r2, r1
 800410c:	eb42 0303 	adc.w	r3, r2, r3
 8004110:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	67bb      	str	r3, [r7, #120]	; 0x78
 800411e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	f04f 0300 	mov.w	r3, #0
 8004128:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800412c:	4649      	mov	r1, r9
 800412e:	008b      	lsls	r3, r1, #2
 8004130:	4641      	mov	r1, r8
 8004132:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004136:	4641      	mov	r1, r8
 8004138:	008a      	lsls	r2, r1, #2
 800413a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800413e:	f7fc f861 	bl	8000204 <__aeabi_uldivmod>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	4b39      	ldr	r3, [pc, #228]	; (800422c <UART_SetConfig+0x4e4>)
 8004148:	fba3 1302 	umull	r1, r3, r3, r2
 800414c:	095b      	lsrs	r3, r3, #5
 800414e:	2164      	movs	r1, #100	; 0x64
 8004150:	fb01 f303 	mul.w	r3, r1, r3
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	011b      	lsls	r3, r3, #4
 8004158:	3332      	adds	r3, #50	; 0x32
 800415a:	4a34      	ldr	r2, [pc, #208]	; (800422c <UART_SetConfig+0x4e4>)
 800415c:	fba2 2303 	umull	r2, r3, r2, r3
 8004160:	095b      	lsrs	r3, r3, #5
 8004162:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004166:	441c      	add	r4, r3
 8004168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800416c:	2200      	movs	r2, #0
 800416e:	673b      	str	r3, [r7, #112]	; 0x70
 8004170:	677a      	str	r2, [r7, #116]	; 0x74
 8004172:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004176:	4642      	mov	r2, r8
 8004178:	464b      	mov	r3, r9
 800417a:	1891      	adds	r1, r2, r2
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	415b      	adcs	r3, r3
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004186:	4641      	mov	r1, r8
 8004188:	1851      	adds	r1, r2, r1
 800418a:	6039      	str	r1, [r7, #0]
 800418c:	4649      	mov	r1, r9
 800418e:	414b      	adcs	r3, r1
 8004190:	607b      	str	r3, [r7, #4]
 8004192:	f04f 0200 	mov.w	r2, #0
 8004196:	f04f 0300 	mov.w	r3, #0
 800419a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800419e:	4659      	mov	r1, fp
 80041a0:	00cb      	lsls	r3, r1, #3
 80041a2:	4651      	mov	r1, sl
 80041a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041a8:	4651      	mov	r1, sl
 80041aa:	00ca      	lsls	r2, r1, #3
 80041ac:	4610      	mov	r0, r2
 80041ae:	4619      	mov	r1, r3
 80041b0:	4603      	mov	r3, r0
 80041b2:	4642      	mov	r2, r8
 80041b4:	189b      	adds	r3, r3, r2
 80041b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80041b8:	464b      	mov	r3, r9
 80041ba:	460a      	mov	r2, r1
 80041bc:	eb42 0303 	adc.w	r3, r2, r3
 80041c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	663b      	str	r3, [r7, #96]	; 0x60
 80041cc:	667a      	str	r2, [r7, #100]	; 0x64
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	f04f 0300 	mov.w	r3, #0
 80041d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80041da:	4649      	mov	r1, r9
 80041dc:	008b      	lsls	r3, r1, #2
 80041de:	4641      	mov	r1, r8
 80041e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041e4:	4641      	mov	r1, r8
 80041e6:	008a      	lsls	r2, r1, #2
 80041e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80041ec:	f7fc f80a 	bl	8000204 <__aeabi_uldivmod>
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	4b0d      	ldr	r3, [pc, #52]	; (800422c <UART_SetConfig+0x4e4>)
 80041f6:	fba3 1302 	umull	r1, r3, r3, r2
 80041fa:	095b      	lsrs	r3, r3, #5
 80041fc:	2164      	movs	r1, #100	; 0x64
 80041fe:	fb01 f303 	mul.w	r3, r1, r3
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	011b      	lsls	r3, r3, #4
 8004206:	3332      	adds	r3, #50	; 0x32
 8004208:	4a08      	ldr	r2, [pc, #32]	; (800422c <UART_SetConfig+0x4e4>)
 800420a:	fba2 2303 	umull	r2, r3, r2, r3
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	f003 020f 	and.w	r2, r3, #15
 8004214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4422      	add	r2, r4
 800421c:	609a      	str	r2, [r3, #8]
}
 800421e:	bf00      	nop
 8004220:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004224:	46bd      	mov	sp, r7
 8004226:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800422a:	bf00      	nop
 800422c:	51eb851f 	.word	0x51eb851f

08004230 <__libc_init_array>:
 8004230:	b570      	push	{r4, r5, r6, lr}
 8004232:	4d0d      	ldr	r5, [pc, #52]	; (8004268 <__libc_init_array+0x38>)
 8004234:	4c0d      	ldr	r4, [pc, #52]	; (800426c <__libc_init_array+0x3c>)
 8004236:	1b64      	subs	r4, r4, r5
 8004238:	10a4      	asrs	r4, r4, #2
 800423a:	2600      	movs	r6, #0
 800423c:	42a6      	cmp	r6, r4
 800423e:	d109      	bne.n	8004254 <__libc_init_array+0x24>
 8004240:	4d0b      	ldr	r5, [pc, #44]	; (8004270 <__libc_init_array+0x40>)
 8004242:	4c0c      	ldr	r4, [pc, #48]	; (8004274 <__libc_init_array+0x44>)
 8004244:	f000 f820 	bl	8004288 <_init>
 8004248:	1b64      	subs	r4, r4, r5
 800424a:	10a4      	asrs	r4, r4, #2
 800424c:	2600      	movs	r6, #0
 800424e:	42a6      	cmp	r6, r4
 8004250:	d105      	bne.n	800425e <__libc_init_array+0x2e>
 8004252:	bd70      	pop	{r4, r5, r6, pc}
 8004254:	f855 3b04 	ldr.w	r3, [r5], #4
 8004258:	4798      	blx	r3
 800425a:	3601      	adds	r6, #1
 800425c:	e7ee      	b.n	800423c <__libc_init_array+0xc>
 800425e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004262:	4798      	blx	r3
 8004264:	3601      	adds	r6, #1
 8004266:	e7f2      	b.n	800424e <__libc_init_array+0x1e>
 8004268:	080042cc 	.word	0x080042cc
 800426c:	080042cc 	.word	0x080042cc
 8004270:	080042cc 	.word	0x080042cc
 8004274:	080042d0 	.word	0x080042d0

08004278 <memset>:
 8004278:	4402      	add	r2, r0
 800427a:	4603      	mov	r3, r0
 800427c:	4293      	cmp	r3, r2
 800427e:	d100      	bne.n	8004282 <memset+0xa>
 8004280:	4770      	bx	lr
 8004282:	f803 1b01 	strb.w	r1, [r3], #1
 8004286:	e7f9      	b.n	800427c <memset+0x4>

08004288 <_init>:
 8004288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428a:	bf00      	nop
 800428c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800428e:	bc08      	pop	{r3}
 8004290:	469e      	mov	lr, r3
 8004292:	4770      	bx	lr

08004294 <_fini>:
 8004294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004296:	bf00      	nop
 8004298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429a:	bc08      	pop	{r3}
 800429c:	469e      	mov	lr, r3
 800429e:	4770      	bx	lr
