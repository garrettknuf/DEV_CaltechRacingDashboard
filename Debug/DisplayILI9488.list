
DisplayILI9488.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000400c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080041d0  080041d0  000141d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041f4  080041f4  00032c30  2**0
                  CONTENTS
  4 .ARM          00000008  080041f4  080041f4  000141f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041fc  080041fc  00032c30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041fc  080041fc  000141fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004200  08004200  00014200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00012c30  20000000  08004204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20012c30  08016e34  00032c30  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012da0  08016e34  00032da0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00032c30  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011479  00000000  00000000  00032c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027c4  00000000  00000000  000440d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  000468a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  00047870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000223a5  00000000  00000000  00048700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001386c  00000000  00000000  0006aaa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf0e0  00000000  00000000  0007e311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014d3f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000409c  00000000  00000000  0014d444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20012c30 	.word	0x20012c30
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080041b8 	.word	0x080041b8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20012c34 	.word	0x20012c34
 8000200:	080041b8 	.word	0x080041b8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <Button_Init>:
static button_t btn1;

/* List of button handles (order must match button_id_t enum) */
static button_t *button_list[BTN_CNT] = {&btn1};

void Button_Init(void) {
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
	btn1 = (button_t) {
 800050e:	4b05      	ldr	r3, [pc, #20]	; (8000524 <Button_Init+0x1c>)
 8000510:	4a05      	ldr	r2, [pc, #20]	; (8000528 <Button_Init+0x20>)
 8000512:	ca07      	ldmia	r2, {r0, r1, r2}
 8000514:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.id = BTN_ID_1,
		.counter = 0,
		.port = B1_GPIO_Port,
		.pin = B1_Pin
	};
}
 8000518:	bf00      	nop
 800051a:	3714      	adds	r7, #20
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	20012c4c 	.word	0x20012c4c
 8000528:	080041d0 	.word	0x080041d0

0800052c <Button_PressedHandler>:

/**
 * @brief Callback function when button pressed
 * @param id (button_id_t) - id of button pressed
 */
static void Button_PressedHandler(button_id_t id) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
	switch (id) {
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d103      	bne.n	8000544 <Button_PressedHandler+0x18>
		case BTN_ID_1:
			Led_Toggle(LED_ID_1);
 800053c:	2000      	movs	r0, #0
 800053e:	f000 fe63 	bl	8001208 <Led_Toggle>
			break;
 8000542:	e000      	b.n	8000546 <Button_PressedHandler+0x1a>
		default:
			break;
 8000544:	bf00      	nop
	}
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <Button_ReleasedHandler>:

/**
 * @brief Callback function when button released
 * @param id (button_id_t) - id of button released
 */
static void Button_ReleasedHandler(button_id_t id) {
 800054e:	b480      	push	{r7}
 8000550:	b083      	sub	sp, #12
 8000552:	af00      	add	r7, sp, #0
 8000554:	4603      	mov	r3, r0
 8000556:	71fb      	strb	r3, [r7, #7]
	switch (id) {
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	2b00      	cmp	r3, #0
		case BTN_ID_1:
			break;
		default:
			break;
 800055c:	bf00      	nop
	}
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
	...

0800056c <Button_Debounce>:

void Button_Debounce(void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < BTN_CNT; i++) {
 8000572:	2300      	movs	r3, #0
 8000574:	73fb      	strb	r3, [r7, #15]
 8000576:	e03c      	b.n	80005f2 <Button_Debounce+0x86>
		// get next button to debounce
		button_t *btn = button_list[i];
 8000578:	7bfb      	ldrb	r3, [r7, #15]
 800057a:	4a22      	ldr	r2, [pc, #136]	; (8000604 <Button_Debounce+0x98>)
 800057c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000580:	60bb      	str	r3, [r7, #8]

		// Read current state of button
		bool pressed = !HAL_GPIO_ReadPin(btn->port, btn->pin);
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	685a      	ldr	r2, [r3, #4]
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	689b      	ldr	r3, [r3, #8]
 800058a:	b29b      	uxth	r3, r3
 800058c:	4619      	mov	r1, r3
 800058e:	4610      	mov	r0, r2
 8000590:	f001 fdde 	bl	8002150 <HAL_GPIO_ReadPin>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	bf0c      	ite	eq
 800059a:	2301      	moveq	r3, #1
 800059c:	2300      	movne	r3, #0
 800059e:	71fb      	strb	r3, [r7, #7]

		if (!pressed) {
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	f083 0301 	eor.w	r3, r3, #1
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d00c      	beq.n	80005c6 <Button_Debounce+0x5a>
			// if button released then call callback function if it exists
			if (btn->counter == DEBOUNCE_TIME + 1) {
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	785b      	ldrb	r3, [r3, #1]
 80005b0:	2b15      	cmp	r3, #21
 80005b2:	d104      	bne.n	80005be <Button_Debounce+0x52>
				Button_PressedHandler(btn->id);
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff ffb7 	bl	800052c <Button_PressedHandler>
			}

			// button not pressed so reset counter
			btn->counter = 0;
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	2200      	movs	r2, #0
 80005c2:	705a      	strb	r2, [r3, #1]
 80005c4:	e012      	b.n	80005ec <Button_Debounce+0x80>
		} else {
			// do not allow counter to overflow
			if (btn->counter <= DEBOUNCE_TIME) {
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	785b      	ldrb	r3, [r3, #1]
 80005ca:	2b14      	cmp	r3, #20
 80005cc:	d80e      	bhi.n	80005ec <Button_Debounce+0x80>
				btn->counter++;
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	785b      	ldrb	r3, [r3, #1]
 80005d2:	3301      	adds	r3, #1
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	705a      	strb	r2, [r3, #1]
				// if counter reaches debounce time then register press
				if (btn->counter == DEBOUNCE_TIME) {
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	785b      	ldrb	r3, [r3, #1]
 80005de:	2b14      	cmp	r3, #20
 80005e0:	d104      	bne.n	80005ec <Button_Debounce+0x80>
					Button_ReleasedHandler(btn->id);
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff ffb1 	bl	800054e <Button_ReleasedHandler>
	for (uint8_t i = 0; i < BTN_CNT; i++) {
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	3301      	adds	r3, #1
 80005f0:	73fb      	strb	r3, [r7, #15]
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d0bf      	beq.n	8000578 <Button_Debounce+0xc>
				}
			}
		}
	}
}
 80005f8:	bf00      	nop
 80005fa:	bf00      	nop
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000000 	.word	0x20000000

08000608 <Display_Init>:

/* External reference to display SPI handle */
extern SPI_HandleTypeDef hspi2;

void Display_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	/* Hardware reset display */
	Display_HWReset();
 800060c:	f000 f824 	bl	8000658 <Display_HWReset>

	/* Software reset */
	Display_TransmitCmd(DISPLAY_SWRESET);
 8000610:	2001      	movs	r0, #1
 8000612:	f000 f837 	bl	8000684 <Display_TransmitCmd>
	HAL_Delay(250);
 8000616:	20fa      	movs	r0, #250	; 0xfa
 8000618:	f001 fad0 	bl	8001bbc <HAL_Delay>

	/* Exit sleep mode */
	Display_TransmitCmd(DISPLAY_SLEEPOUT);
 800061c:	2011      	movs	r0, #17
 800061e:	f000 f831 	bl	8000684 <Display_TransmitCmd>
	HAL_Delay(100);
 8000622:	2064      	movs	r0, #100	; 0x64
 8000624:	f001 faca 	bl	8001bbc <HAL_Delay>

	/* 4-line serial interface mode control */
	Display_TransmitCmdParam(DISPLAY_INTMCTRL, 0x00);
 8000628:	2100      	movs	r1, #0
 800062a:	20b0      	movs	r0, #176	; 0xb0
 800062c:	f000 f86e 	bl	800070c <Display_TransmitCmdParam>

	/* 3-bit RGB interface pixel format */
	Display_TransmitCmdParam(DISPLAY_INTPXLFMT, 0x01);
 8000630:	2101      	movs	r1, #1
 8000632:	203a      	movs	r0, #58	; 0x3a
 8000634:	f000 f86a 	bl	800070c <Display_TransmitCmdParam>

	/* Memory access control sets scanning direction of frame memory */
	// was 0x08
	Display_TransmitCmdParam(DISPLAY_MEMACTRL, 0x08);
 8000638:	2108      	movs	r1, #8
 800063a:	2036      	movs	r0, #54	; 0x36
 800063c:	f000 f866 	bl	800070c <Display_TransmitCmdParam>

	/* TODO modify positive, negative, and digital gamma settings */

	/* Exit sleep mode */
	Display_TransmitCmd(DISPLAY_SLEEPOUT);
 8000640:	2011      	movs	r0, #17
 8000642:	f000 f81f 	bl	8000684 <Display_TransmitCmd>
	HAL_Delay(250);
 8000646:	20fa      	movs	r0, #250	; 0xfa
 8000648:	f001 fab8 	bl	8001bbc <HAL_Delay>

	/* Turn display on */
	Display_TransmitCmd(DISPLAY_DISPON);
 800064c:	2029      	movs	r0, #41	; 0x29
 800064e:	f000 f819 	bl	8000684 <Display_TransmitCmd>
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <Display_HWReset>:

void Display_HWReset(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	/* Hold RESET pin LOW with delay */
	HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	2101      	movs	r1, #1
 8000660:	4807      	ldr	r0, [pc, #28]	; (8000680 <Display_HWReset+0x28>)
 8000662:	f001 fd8d 	bl	8002180 <HAL_GPIO_WritePin>
	HAL_Delay(DISPLAY_RESET_TIME_MS);
 8000666:	200a      	movs	r0, #10
 8000668:	f001 faa8 	bl	8001bbc <HAL_Delay>

	/* Set RESET pin HIGH and wait for system reset to complete */
	HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	2101      	movs	r1, #1
 8000670:	4803      	ldr	r0, [pc, #12]	; (8000680 <Display_HWReset+0x28>)
 8000672:	f001 fd85 	bl	8002180 <HAL_GPIO_WritePin>
	HAL_Delay(DISPLAY_RESET_TIME_MS);
 8000676:	200a      	movs	r0, #10
 8000678:	f001 faa0 	bl	8001bbc <HAL_Delay>
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40020800 	.word	0x40020800

08000684 <Display_TransmitCmd>:

void Display_TransmitCmd(uint8_t cmd)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
	/* DC/RS LOW since writing command */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2101      	movs	r1, #1
 8000692:	480b      	ldr	r0, [pc, #44]	; (80006c0 <Display_TransmitCmd+0x3c>)
 8000694:	f001 fd74 	bl	8002180 <HAL_GPIO_WritePin>

	/* Set CS LOW */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	2110      	movs	r1, #16
 800069c:	4808      	ldr	r0, [pc, #32]	; (80006c0 <Display_TransmitCmd+0x3c>)
 800069e:	f001 fd6f 	bl	8002180 <HAL_GPIO_WritePin>

	/* Write SPI data */
	HAL_SPI_Transmit(&hspi2, &cmd, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80006a2:	1df9      	adds	r1, r7, #7
 80006a4:	2364      	movs	r3, #100	; 0x64
 80006a6:	2201      	movs	r2, #1
 80006a8:	4806      	ldr	r0, [pc, #24]	; (80006c4 <Display_TransmitCmd+0x40>)
 80006aa:	f002 fc0e 	bl	8002eca <HAL_SPI_Transmit>

	/* Set CS HIGH */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	2110      	movs	r1, #16
 80006b2:	4803      	ldr	r0, [pc, #12]	; (80006c0 <Display_TransmitCmd+0x3c>)
 80006b4:	f001 fd64 	bl	8002180 <HAL_GPIO_WritePin>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40020400 	.word	0x40020400
 80006c4:	20012c68 	.word	0x20012c68

080006c8 <Display_TransmitParam>:

void Display_TransmitParam(uint8_t param)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
	/* DC/RS HIGH since writing data */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	2101      	movs	r1, #1
 80006d6:	480b      	ldr	r0, [pc, #44]	; (8000704 <Display_TransmitParam+0x3c>)
 80006d8:	f001 fd52 	bl	8002180 <HAL_GPIO_WritePin>

	/* Set CS LOW */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	2110      	movs	r1, #16
 80006e0:	4808      	ldr	r0, [pc, #32]	; (8000704 <Display_TransmitParam+0x3c>)
 80006e2:	f001 fd4d 	bl	8002180 <HAL_GPIO_WritePin>

	/* Write SPI data */
	HAL_SPI_Transmit(&hspi2, &param, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80006e6:	1df9      	adds	r1, r7, #7
 80006e8:	2364      	movs	r3, #100	; 0x64
 80006ea:	2201      	movs	r2, #1
 80006ec:	4806      	ldr	r0, [pc, #24]	; (8000708 <Display_TransmitParam+0x40>)
 80006ee:	f002 fbec 	bl	8002eca <HAL_SPI_Transmit>

	/* Set CS HIGH */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	2110      	movs	r1, #16
 80006f6:	4803      	ldr	r0, [pc, #12]	; (8000704 <Display_TransmitParam+0x3c>)
 80006f8:	f001 fd42 	bl	8002180 <HAL_GPIO_WritePin>
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40020400 	.word	0x40020400
 8000708:	20012c68 	.word	0x20012c68

0800070c <Display_TransmitCmdParam>:

void Display_TransmitCmdParam(uint8_t cmd, uint8_t param)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	460a      	mov	r2, r1
 8000716:	71fb      	strb	r3, [r7, #7]
 8000718:	4613      	mov	r3, r2
 800071a:	71bb      	strb	r3, [r7, #6]
	/* Send command */
	Display_TransmitCmd(cmd);
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ffb0 	bl	8000684 <Display_TransmitCmd>

	/* Send parameter */
	Display_TransmitParam(param);
 8000724:	79bb      	ldrb	r3, [r7, #6]
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ffce 	bl	80006c8 <Display_TransmitParam>
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <Display_SetWindow>:

void Display_SetWindow(uint16_t xs, uint16_t ys, uint16_t xe, uint16_t ye)
{
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	4604      	mov	r4, r0
 800073c:	4608      	mov	r0, r1
 800073e:	4611      	mov	r1, r2
 8000740:	461a      	mov	r2, r3
 8000742:	4623      	mov	r3, r4
 8000744:	80fb      	strh	r3, [r7, #6]
 8000746:	4603      	mov	r3, r0
 8000748:	80bb      	strh	r3, [r7, #4]
 800074a:	460b      	mov	r3, r1
 800074c:	807b      	strh	r3, [r7, #2]
 800074e:	4613      	mov	r3, r2
 8000750:	803b      	strh	r3, [r7, #0]
	/* Check coordinate are not out of range */
	if ((xs > xe) || (xe > DISPLAY_MAX_X) || (ys > ye) || (ye > DISPLAY_MAX_Y)) {
 8000752:	88fa      	ldrh	r2, [r7, #6]
 8000754:	887b      	ldrh	r3, [r7, #2]
 8000756:	429a      	cmp	r2, r3
 8000758:	f200 808b 	bhi.w	8000872 <Display_SetWindow+0x13e>
 800075c:	887b      	ldrh	r3, [r7, #2]
 800075e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000762:	f080 8086 	bcs.w	8000872 <Display_SetWindow+0x13e>
 8000766:	88ba      	ldrh	r2, [r7, #4]
 8000768:	883b      	ldrh	r3, [r7, #0]
 800076a:	429a      	cmp	r2, r3
 800076c:	f200 8081 	bhi.w	8000872 <Display_SetWindow+0x13e>
 8000770:	883b      	ldrh	r3, [r7, #0]
 8000772:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000776:	d27c      	bcs.n	8000872 <Display_SetWindow+0x13e>
		/* Error so do nothing */
		return;
	}

	/* Set column range */
	Display_TransmitCmd(DISPLAY_COLADDRSET);
 8000778:	202a      	movs	r0, #42	; 0x2a
 800077a:	f7ff ff83 	bl	8000684 <Display_TransmitCmd>

	/* Set DC/RS LOW since transmitting date */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_SET);
 800077e:	2201      	movs	r2, #1
 8000780:	2101      	movs	r1, #1
 8000782:	483e      	ldr	r0, [pc, #248]	; (800087c <Display_SetWindow+0x148>)
 8000784:	f001 fcfc 	bl	8002180 <HAL_GPIO_WritePin>

	/* Hold CS LOW until all parameters have been sent */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	2110      	movs	r1, #16
 800078c:	483b      	ldr	r0, [pc, #236]	; (800087c <Display_SetWindow+0x148>)
 800078e:	f001 fcf7 	bl	8002180 <HAL_GPIO_WritePin>

	/* Write column start and end data */
	uint8_t byte = ys >> 8;	// SC[15:8]
 8000792:	88bb      	ldrh	r3, [r7, #4]
 8000794:	0a1b      	lsrs	r3, r3, #8
 8000796:	b29b      	uxth	r3, r3
 8000798:	b2db      	uxtb	r3, r3
 800079a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 800079c:	f107 010f 	add.w	r1, r7, #15
 80007a0:	2364      	movs	r3, #100	; 0x64
 80007a2:	2201      	movs	r2, #1
 80007a4:	4836      	ldr	r0, [pc, #216]	; (8000880 <Display_SetWindow+0x14c>)
 80007a6:	f002 fb90 	bl	8002eca <HAL_SPI_Transmit>
	byte = ys & 0xFF;		// SC[7:0]
 80007aa:	88bb      	ldrh	r3, [r7, #4]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80007b0:	f107 010f 	add.w	r1, r7, #15
 80007b4:	2364      	movs	r3, #100	; 0x64
 80007b6:	2201      	movs	r2, #1
 80007b8:	4831      	ldr	r0, [pc, #196]	; (8000880 <Display_SetWindow+0x14c>)
 80007ba:	f002 fb86 	bl	8002eca <HAL_SPI_Transmit>
	byte = ye >> 8;			// EC[15:8]
 80007be:	883b      	ldrh	r3, [r7, #0]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80007c8:	f107 010f 	add.w	r1, r7, #15
 80007cc:	2364      	movs	r3, #100	; 0x64
 80007ce:	2201      	movs	r2, #1
 80007d0:	482b      	ldr	r0, [pc, #172]	; (8000880 <Display_SetWindow+0x14c>)
 80007d2:	f002 fb7a 	bl	8002eca <HAL_SPI_Transmit>
	byte = ye & 0xFF;		// EC[7:0]
 80007d6:	883b      	ldrh	r3, [r7, #0]
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80007dc:	f107 010f 	add.w	r1, r7, #15
 80007e0:	2364      	movs	r3, #100	; 0x64
 80007e2:	2201      	movs	r2, #1
 80007e4:	4826      	ldr	r0, [pc, #152]	; (8000880 <Display_SetWindow+0x14c>)
 80007e6:	f002 fb70 	bl	8002eca <HAL_SPI_Transmit>

	/* Last parameter sent so end transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80007ea:	2201      	movs	r2, #1
 80007ec:	2110      	movs	r1, #16
 80007ee:	4823      	ldr	r0, [pc, #140]	; (800087c <Display_SetWindow+0x148>)
 80007f0:	f001 fcc6 	bl	8002180 <HAL_GPIO_WritePin>

	/* Set page range */
	Display_TransmitCmd(DISPLAY_PGADDRSET);
 80007f4:	202b      	movs	r0, #43	; 0x2b
 80007f6:	f7ff ff45 	bl	8000684 <Display_TransmitCmd>

	/* Set DC/RS LOW since transmitting date */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2101      	movs	r1, #1
 80007fe:	481f      	ldr	r0, [pc, #124]	; (800087c <Display_SetWindow+0x148>)
 8000800:	f001 fcbe 	bl	8002180 <HAL_GPIO_WritePin>

	/* Begin multi-parameter transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2110      	movs	r1, #16
 8000808:	481c      	ldr	r0, [pc, #112]	; (800087c <Display_SetWindow+0x148>)
 800080a:	f001 fcb9 	bl	8002180 <HAL_GPIO_WritePin>

	/* Write page start and end data */
	byte = xs >> 8;		// SP[15:8]
 800080e:	88fb      	ldrh	r3, [r7, #6]
 8000810:	0a1b      	lsrs	r3, r3, #8
 8000812:	b29b      	uxth	r3, r3
 8000814:	b2db      	uxtb	r3, r3
 8000816:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 8000818:	f107 010f 	add.w	r1, r7, #15
 800081c:	2364      	movs	r3, #100	; 0x64
 800081e:	2201      	movs	r2, #1
 8000820:	4817      	ldr	r0, [pc, #92]	; (8000880 <Display_SetWindow+0x14c>)
 8000822:	f002 fb52 	bl	8002eca <HAL_SPI_Transmit>
	byte = xs & 0xFF;	// SP[7:0]
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 800082c:	f107 010f 	add.w	r1, r7, #15
 8000830:	2364      	movs	r3, #100	; 0x64
 8000832:	2201      	movs	r2, #1
 8000834:	4812      	ldr	r0, [pc, #72]	; (8000880 <Display_SetWindow+0x14c>)
 8000836:	f002 fb48 	bl	8002eca <HAL_SPI_Transmit>
	byte = xe >> 8;		// EP[15:8]
 800083a:	887b      	ldrh	r3, [r7, #2]
 800083c:	0a1b      	lsrs	r3, r3, #8
 800083e:	b29b      	uxth	r3, r3
 8000840:	b2db      	uxtb	r3, r3
 8000842:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 8000844:	f107 010f 	add.w	r1, r7, #15
 8000848:	2364      	movs	r3, #100	; 0x64
 800084a:	2201      	movs	r2, #1
 800084c:	480c      	ldr	r0, [pc, #48]	; (8000880 <Display_SetWindow+0x14c>)
 800084e:	f002 fb3c 	bl	8002eca <HAL_SPI_Transmit>
	byte = xe & 0xFF;	// EP[7:0]
 8000852:	887b      	ldrh	r3, [r7, #2]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 8000858:	f107 010f 	add.w	r1, r7, #15
 800085c:	2364      	movs	r3, #100	; 0x64
 800085e:	2201      	movs	r2, #1
 8000860:	4807      	ldr	r0, [pc, #28]	; (8000880 <Display_SetWindow+0x14c>)
 8000862:	f002 fb32 	bl	8002eca <HAL_SPI_Transmit>

	/* Last parameter sent so end transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000866:	2201      	movs	r2, #1
 8000868:	2110      	movs	r1, #16
 800086a:	4804      	ldr	r0, [pc, #16]	; (800087c <Display_SetWindow+0x148>)
 800086c:	f001 fc88 	bl	8002180 <HAL_GPIO_WritePin>
 8000870:	e000      	b.n	8000874 <Display_SetWindow+0x140>
		return;
 8000872:	bf00      	nop
}
 8000874:	3714      	adds	r7, #20
 8000876:	46bd      	mov	sp, r7
 8000878:	bd90      	pop	{r4, r7, pc}
 800087a:	bf00      	nop
 800087c:	40020400 	.word	0x40020400
 8000880:	20012c68 	.word	0x20012c68

08000884 <Display_SendColor>:


void Display_SendColor(uint32_t npixels, uint8_t color) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	460b      	mov	r3, r1
 800088e:	70fb      	strb	r3, [r7, #3]
	/* Set up writing to frame buffer */
	Display_TransmitCmd(DISPLAY_MEMWR);
 8000890:	202c      	movs	r0, #44	; 0x2c
 8000892:	f7ff fef7 	bl	8000684 <Display_TransmitCmd>

	/* Set up sending data to display */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_SET);
 8000896:	2201      	movs	r2, #1
 8000898:	2101      	movs	r1, #1
 800089a:	4815      	ldr	r0, [pc, #84]	; (80008f0 <Display_SendColor+0x6c>)
 800089c:	f001 fc70 	bl	8002180 <HAL_GPIO_WritePin>

	/* Set CS LOW to begin transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2110      	movs	r1, #16
 80008a4:	4812      	ldr	r0, [pc, #72]	; (80008f0 <Display_SendColor+0x6c>)
 80008a6:	f001 fc6b 	bl	8002180 <HAL_GPIO_WritePin>

	/* If odd number of pixels pad a data byte to fill byte */
	if (npixels % 2 != 0) {
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d002      	beq.n	80008ba <Display_SendColor+0x36>
		npixels++;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3301      	adds	r3, #1
 80008b8:	607b      	str	r3, [r7, #4]
	}

	/* 2 pixel data stored per byte, so divide npixels by 2 */
	for (uint32_t i = 0; i < npixels / 2; i++) {
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	e008      	b.n	80008d2 <Display_SendColor+0x4e>
		HAL_SPI_Transmit(&hspi2, &color, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80008c0:	1cf9      	adds	r1, r7, #3
 80008c2:	2364      	movs	r3, #100	; 0x64
 80008c4:	2201      	movs	r2, #1
 80008c6:	480b      	ldr	r0, [pc, #44]	; (80008f4 <Display_SendColor+0x70>)
 80008c8:	f002 faff 	bl	8002eca <HAL_SPI_Transmit>
	for (uint32_t i = 0; i < npixels / 2; i++) {
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	3301      	adds	r3, #1
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d3f1      	bcc.n	80008c0 <Display_SendColor+0x3c>
	}

	/* Set CS HIGH to end transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	2110      	movs	r1, #16
 80008e0:	4803      	ldr	r0, [pc, #12]	; (80008f0 <Display_SendColor+0x6c>)
 80008e2:	f001 fc4d 	bl	8002180 <HAL_GPIO_WritePin>
}
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40020400 	.word	0x40020400
 80008f4:	20012c68 	.word	0x20012c68

080008f8 <Display_SendData>:

void Display_SendData(uint32_t data_len, uint8_t *data) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]

	/* Set up writing to frame buffer */
	Display_TransmitCmd(DISPLAY_MEMWR);
 8000902:	202c      	movs	r0, #44	; 0x2c
 8000904:	f7ff febe 	bl	8000684 <Display_TransmitCmd>

	/* Set up sending data to display */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_SET);
 8000908:	2201      	movs	r2, #1
 800090a:	2101      	movs	r1, #1
 800090c:	4811      	ldr	r0, [pc, #68]	; (8000954 <Display_SendData+0x5c>)
 800090e:	f001 fc37 	bl	8002180 <HAL_GPIO_WritePin>

	/* Set CS LOW to begin transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2110      	movs	r1, #16
 8000916:	480f      	ldr	r0, [pc, #60]	; (8000954 <Display_SendData+0x5c>)
 8000918:	f001 fc32 	bl	8002180 <HAL_GPIO_WritePin>

	for (uint32_t i = 0; i < data_len; i++) {
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	e00a      	b.n	8000938 <Display_SendData+0x40>
		HAL_SPI_Transmit(&hspi2, &(data[i]), sizeof(uint8_t), SPI_TIMEOUT_MS);
 8000922:	683a      	ldr	r2, [r7, #0]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	18d1      	adds	r1, r2, r3
 8000928:	2364      	movs	r3, #100	; 0x64
 800092a:	2201      	movs	r2, #1
 800092c:	480a      	ldr	r0, [pc, #40]	; (8000958 <Display_SendData+0x60>)
 800092e:	f002 facc 	bl	8002eca <HAL_SPI_Transmit>
	for (uint32_t i = 0; i < data_len; i++) {
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	3301      	adds	r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fa      	ldr	r2, [r7, #12]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	429a      	cmp	r2, r3
 800093e:	d3f0      	bcc.n	8000922 <Display_SendData+0x2a>
	}

	/* Set CS HIGH to end transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000940:	2201      	movs	r2, #1
 8000942:	2110      	movs	r1, #16
 8000944:	4803      	ldr	r0, [pc, #12]	; (8000954 <Display_SendData+0x5c>)
 8000946:	f001 fc1b 	bl	8002180 <HAL_GPIO_WritePin>
}
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40020400 	.word	0x40020400
 8000958:	20012c68 	.word	0x20012c68

0800095c <Encoder_Init>:
} encoder_t;

static encoder_t enc1;
static encoder_t *encoder_list[ENC_CNT] = {&enc1};

void Encoder_Init(void) {
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
	/* Get gray code */
	GPIO_PinState pinA = 0;//HAL_GPIO_ReadPin(enc->port, enc->pin);
 8000962:	2300      	movs	r3, #0
 8000964:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState pinB = 0;//HAL_GPIO_ReadPin(enc->port, enc->pin);
 8000966:	2300      	movs	r3, #0
 8000968:	73bb      	strb	r3, [r7, #14]

	/* Convert gray code to binary */
	int8_t binary = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	737b      	strb	r3, [r7, #13]
	binary |= (pinA << 1);
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	b25a      	sxtb	r2, r3
 8000974:	7b7b      	ldrb	r3, [r7, #13]
 8000976:	4313      	orrs	r3, r2
 8000978:	737b      	strb	r3, [r7, #13]
	binary |= (pinB << 0);
 800097a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800097e:	7b7b      	ldrb	r3, [r7, #13]
 8000980:	4313      	orrs	r3, r2
 8000982:	737b      	strb	r3, [r7, #13]

	enc1 = (encoder_t) {
 8000984:	7b7a      	ldrb	r2, [r7, #13]
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <Encoder_Init+0x4c>)
 8000988:	2100      	movs	r1, #0
 800098a:	7019      	strb	r1, [r3, #0]
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <Encoder_Init+0x4c>)
 800098e:	705a      	strb	r2, [r3, #1]
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <Encoder_Init+0x4c>)
 8000992:	2200      	movs	r2, #0
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <Encoder_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
		.id = ENC_ID_1,
		.last_code = binary,
		.port = 0,
		.pin = 0,
	};
}
 800099c:	bf00      	nop
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	20012c58 	.word	0x20012c58

080009ac <Encoder_CWHandler>:

/**
 * @brief Callback function when encoder turned clockwise
 * @param id (encoder_id_t) - id of encoder rotated
 */
static void Encoder_CWHandler(encoder_id_t id) {
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
	switch (id) {
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	2b00      	cmp	r3, #0
		case ENC_ID_1:
			break;
		default:
			break;
 80009ba:	bf00      	nop
	}
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <Encoder_CCWHandler>:

/**
 * @brief Callback function when encoder turned counter-clockwise
 * @param id (encoder_id_t) - id of encoder rotated
 */
static void Encoder_CCWHandler(encoder_id_t id) {
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
	switch (id) {
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2b00      	cmp	r3, #0
		case ENC_ID_1:
			break;
		default:
			break;
 80009d6:	bf00      	nop
	}
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <Encoder_Debounce>:

void Encoder_Debounce(void) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
	/* Iterate through all encoders */
	for (uint8_t i = 0; i < ENC_CNT; i++) {
 80009ea:	2300      	movs	r3, #0
 80009ec:	73fb      	strb	r3, [r7, #15]
 80009ee:	e037      	b.n	8000a60 <Encoder_Debounce+0x7c>
		encoder_t *enc = encoder_list[i];
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	4a1f      	ldr	r2, [pc, #124]	; (8000a70 <Encoder_Debounce+0x8c>)
 80009f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f8:	60bb      	str	r3, [r7, #8]

		/* Get gray code */
		GPIO_PinState pinA = 0;//HAL_GPIO_ReadPin(enc->port, enc->pin);
 80009fa:	2300      	movs	r3, #0
 80009fc:	71fb      	strb	r3, [r7, #7]
		GPIO_PinState pinB = 0;//HAL_GPIO_ReadPin(enc->port, enc->pin);
 80009fe:	2300      	movs	r3, #0
 8000a00:	71bb      	strb	r3, [r7, #6]

		/* Convert gray code to binary */
		int8_t binary = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	717b      	strb	r3, [r7, #5]
		binary |= (pinA << 1);
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	b25a      	sxtb	r2, r3
 8000a0c:	797b      	ldrb	r3, [r7, #5]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	717b      	strb	r3, [r7, #5]
		binary |= (pinB << 0);
 8000a12:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8000a16:	797b      	ldrb	r3, [r7, #5]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	717b      	strb	r3, [r7, #5]

		/* Check if encoder state has changed */
		if (binary != enc->last_code) {
 8000a1c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000a20:	68ba      	ldr	r2, [r7, #8]
 8000a22:	7852      	ldrb	r2, [r2, #1]
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d015      	beq.n	8000a54 <Encoder_Debounce+0x70>
			uint8_t diff = enc->last_code - binary;
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	785a      	ldrb	r2, [r3, #1]
 8000a2c:	797b      	ldrb	r3, [r7, #5]
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	713b      	strb	r3, [r7, #4]
			if (diff == -1 || diff == 3) {
 8000a32:	793b      	ldrb	r3, [r7, #4]
 8000a34:	2b03      	cmp	r3, #3
 8000a36:	d105      	bne.n	8000a44 <Encoder_Debounce+0x60>
				Encoder_CWHandler(enc->id);
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ffb5 	bl	80009ac <Encoder_CWHandler>
 8000a42:	e007      	b.n	8000a54 <Encoder_Debounce+0x70>
			} else if (diff == 1 || diff == -3) {
 8000a44:	793b      	ldrb	r3, [r7, #4]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d104      	bne.n	8000a54 <Encoder_Debounce+0x70>
				Encoder_CCWHandler(enc->id);
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff ffba 	bl	80009c8 <Encoder_CCWHandler>
			}
		}

		/* Update state */
		enc->last_code = binary;
 8000a54:	797a      	ldrb	r2, [r7, #5]
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < ENC_CNT; i++) {
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	73fb      	strb	r3, [r7, #15]
 8000a60:	7bfb      	ldrb	r3, [r7, #15]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d0c4      	beq.n	80009f0 <Encoder_Debounce+0xc>
	}
}
 8000a66:	bf00      	nop
 8000a68:	bf00      	nop
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000004 	.word	0x20000004

08000a74 <Gfx_Init>:
	0b1110000, // 7
	0b1111111, // 8
	0b1110011  // 9
};

void Gfx_Init(void) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	Gfx_SetBackground(COLOR_BLACK);
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f000 f803 	bl	8000a84 <Gfx_SetBackground>
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <Gfx_SetBackground>:

void Gfx_SetBackground(uint8_t color) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af02      	add	r7, sp, #8
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
	background_color = color;
 8000a8e:	4a08      	ldr	r2, [pc, #32]	; (8000ab0 <Gfx_SetBackground+0x2c>)
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	7013      	strb	r3, [r2, #0]
	Gfx_DrawRect(0, 0, DISPLAY_SIZE_X, DISPLAY_SIZE_Y, color);
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000a9c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f000 f806 	bl	8000ab4 <Gfx_DrawRect>
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20012c64 	.word	0x20012c64

08000ab4 <Gfx_DrawRect>:

void Gfx_DrawRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t color) {
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4604      	mov	r4, r0
 8000abc:	4608      	mov	r0, r1
 8000abe:	4611      	mov	r1, r2
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4623      	mov	r3, r4
 8000ac4:	80fb      	strh	r3, [r7, #6]
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	80bb      	strh	r3, [r7, #4]
 8000aca:	460b      	mov	r3, r1
 8000acc:	807b      	strh	r3, [r7, #2]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	803b      	strh	r3, [r7, #0]
	/* Set window of rectangle */
	Display_SetWindow(x, y, x + w - 1, y + h - 1);
 8000ad2:	88fa      	ldrh	r2, [r7, #6]
 8000ad4:	887b      	ldrh	r3, [r7, #2]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	3b01      	subs	r3, #1
 8000adc:	b29c      	uxth	r4, r3
 8000ade:	88ba      	ldrh	r2, [r7, #4]
 8000ae0:	883b      	ldrh	r3, [r7, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	88b9      	ldrh	r1, [r7, #4]
 8000aec:	88f8      	ldrh	r0, [r7, #6]
 8000aee:	4622      	mov	r2, r4
 8000af0:	f7ff fe20 	bl	8000734 <Display_SetWindow>

	/* Send pixel data */
	Display_SendColor(w * h, color);
 8000af4:	887b      	ldrh	r3, [r7, #2]
 8000af6:	883a      	ldrh	r2, [r7, #0]
 8000af8:	fb02 f303 	mul.w	r3, r2, r3
 8000afc:	461a      	mov	r2, r3
 8000afe:	7e3b      	ldrb	r3, [r7, #24]
 8000b00:	4619      	mov	r1, r3
 8000b02:	4610      	mov	r0, r2
 8000b04:	f7ff febe 	bl	8000884 <Display_SendColor>
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd90      	pop	{r4, r7, pc}

08000b10 <Gfx_DrawDigit>:

void Gfx_DrawDigit(uint16_t x, uint16_t y, uint8_t digit, uint8_t font_height, uint8_t color) {
 8000b10:	b590      	push	{r4, r7, lr}
 8000b12:	b087      	sub	sp, #28
 8000b14:	af02      	add	r7, sp, #8
 8000b16:	4604      	mov	r4, r0
 8000b18:	4608      	mov	r0, r1
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4623      	mov	r3, r4
 8000b20:	80fb      	strh	r3, [r7, #6]
 8000b22:	4603      	mov	r3, r0
 8000b24:	80bb      	strh	r3, [r7, #4]
 8000b26:	460b      	mov	r3, r1
 8000b28:	70fb      	strb	r3, [r7, #3]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	70bb      	strb	r3, [r7, #2]

	/* Digits 0-9 will map directly to display that digit, -1 will delete the digit */
	if (digit != (uint8_t)(-1) && (digit < 0 || digit > 9)) {
 8000b2e:	78fb      	ldrb	r3, [r7, #3]
 8000b30:	2bff      	cmp	r3, #255	; 0xff
 8000b32:	d003      	beq.n	8000b3c <Gfx_DrawDigit+0x2c>
 8000b34:	78fb      	ldrb	r3, [r7, #3]
 8000b36:	2b09      	cmp	r3, #9
 8000b38:	f200 8102 	bhi.w	8000d40 <Gfx_DrawDigit+0x230>
		// Do nothing if digit is not a valid value
		return;
	}

	/* thickness of each segment */
	uint8_t thickness = font_height / 10;
 8000b3c:	78bb      	ldrb	r3, [r7, #2]
 8000b3e:	4a82      	ldr	r2, [pc, #520]	; (8000d48 <Gfx_DrawDigit+0x238>)
 8000b40:	fba2 2303 	umull	r2, r3, r2, r3
 8000b44:	08db      	lsrs	r3, r3, #3
 8000b46:	73fb      	strb	r3, [r7, #15]

	/* length of each segment */
	uint8_t seg_len = (font_height - (thickness * 2)) / 2;
 8000b48:	78ba      	ldrb	r2, [r7, #2]
 8000b4a:	7bfb      	ldrb	r3, [r7, #15]
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	0fda      	lsrs	r2, r3, #31
 8000b52:	4413      	add	r3, r2
 8000b54:	105b      	asrs	r3, r3, #1
 8000b56:	73bb      	strb	r3, [r7, #14]

	/* for small fonts make the segments slightly thicker */
	if (font_height < 40) {
 8000b58:	78bb      	ldrb	r3, [r7, #2]
 8000b5a:	2b27      	cmp	r3, #39	; 0x27
 8000b5c:	d802      	bhi.n	8000b64 <Gfx_DrawDigit+0x54>
		thickness += 2;
 8000b5e:	7bfb      	ldrb	r3, [r7, #15]
 8000b60:	3302      	adds	r3, #2
 8000b62:	73fb      	strb	r3, [r7, #15]
	}

	/* Get abcdefg pattern for digit (or zero if digit == -1)*/
	uint8_t pattern = (digit == (uint8_t)(-1)) ? 0 : digit_patterns[digit];
 8000b64:	78fb      	ldrb	r3, [r7, #3]
 8000b66:	2bff      	cmp	r3, #255	; 0xff
 8000b68:	d003      	beq.n	8000b72 <Gfx_DrawDigit+0x62>
 8000b6a:	78fb      	ldrb	r3, [r7, #3]
 8000b6c:	4a77      	ldr	r2, [pc, #476]	; (8000d4c <Gfx_DrawDigit+0x23c>)
 8000b6e:	5cd3      	ldrb	r3, [r2, r3]
 8000b70:	e000      	b.n	8000b74 <Gfx_DrawDigit+0x64>
 8000b72:	2300      	movs	r3, #0
 8000b74:	737b      	strb	r3, [r7, #13]
	/* Active segments are set to color */
	/* Inactive segments are set to background color */
	uint8_t new_color;

	// a
	new_color = ((pattern & SEG_A_MASK) ? color : background_color);
 8000b76:	7b7b      	ldrb	r3, [r7, #13]
 8000b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d002      	beq.n	8000b86 <Gfx_DrawDigit+0x76>
 8000b80:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b84:	e001      	b.n	8000b8a <Gfx_DrawDigit+0x7a>
 8000b86:	4b72      	ldr	r3, [pc, #456]	; (8000d50 <Gfx_DrawDigit+0x240>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	733b      	strb	r3, [r7, #12]
	Gfx_DrawRect(x+thickness, y, seg_len, thickness, new_color);
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
 8000b8e:	b29a      	uxth	r2, r3
 8000b90:	88fb      	ldrh	r3, [r7, #6]
 8000b92:	4413      	add	r3, r2
 8000b94:	b298      	uxth	r0, r3
 8000b96:	7bbb      	ldrb	r3, [r7, #14]
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	b29c      	uxth	r4, r3
 8000b9e:	88b9      	ldrh	r1, [r7, #4]
 8000ba0:	7b3b      	ldrb	r3, [r7, #12]
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	4623      	mov	r3, r4
 8000ba6:	f7ff ff85 	bl	8000ab4 <Gfx_DrawRect>

	// b
	new_color = ((pattern & SEG_B_MASK) ? color : background_color);
 8000baa:	7b7b      	ldrb	r3, [r7, #13]
 8000bac:	f003 0320 	and.w	r3, r3, #32
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d002      	beq.n	8000bba <Gfx_DrawDigit+0xaa>
 8000bb4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bb8:	e001      	b.n	8000bbe <Gfx_DrawDigit+0xae>
 8000bba:	4b65      	ldr	r3, [pc, #404]	; (8000d50 <Gfx_DrawDigit+0x240>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	733b      	strb	r3, [r7, #12]
	Gfx_DrawRect(x+seg_len+thickness, y+thickness, thickness, seg_len, new_color);
 8000bc0:	7bbb      	ldrb	r3, [r7, #14]
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	4413      	add	r3, r2
 8000bd0:	b298      	uxth	r0, r3
 8000bd2:	7bfb      	ldrb	r3, [r7, #15]
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	88bb      	ldrh	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	b299      	uxth	r1, r3
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	7bbb      	ldrb	r3, [r7, #14]
 8000be2:	b29c      	uxth	r4, r3
 8000be4:	7b3b      	ldrb	r3, [r7, #12]
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	4623      	mov	r3, r4
 8000bea:	f7ff ff63 	bl	8000ab4 <Gfx_DrawRect>

	// c
	new_color = ((pattern & SEG_C_MASK) ? color : background_color);
 8000bee:	7b7b      	ldrb	r3, [r7, #13]
 8000bf0:	f003 0310 	and.w	r3, r3, #16
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d002      	beq.n	8000bfe <Gfx_DrawDigit+0xee>
 8000bf8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bfc:	e001      	b.n	8000c02 <Gfx_DrawDigit+0xf2>
 8000bfe:	4b54      	ldr	r3, [pc, #336]	; (8000d50 <Gfx_DrawDigit+0x240>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	733b      	strb	r3, [r7, #12]
	Gfx_DrawRect(x+seg_len+thickness, y+(2*thickness)+seg_len, thickness, seg_len, new_color);
 8000c04:	7bbb      	ldrb	r3, [r7, #14]
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	88fb      	ldrh	r3, [r7, #6]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	4413      	add	r3, r2
 8000c14:	b298      	uxth	r0, r3
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	88bb      	ldrh	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	7bbb      	ldrb	r3, [r7, #14]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	4413      	add	r3, r2
 8000c2a:	b299      	uxth	r1, r3
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	7bbb      	ldrb	r3, [r7, #14]
 8000c32:	b29c      	uxth	r4, r3
 8000c34:	7b3b      	ldrb	r3, [r7, #12]
 8000c36:	9300      	str	r3, [sp, #0]
 8000c38:	4623      	mov	r3, r4
 8000c3a:	f7ff ff3b 	bl	8000ab4 <Gfx_DrawRect>

	// d
	new_color = ((pattern & SEG_D_MASK) ? color : background_color);
 8000c3e:	7b7b      	ldrb	r3, [r7, #13]
 8000c40:	f003 0308 	and.w	r3, r3, #8
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d002      	beq.n	8000c4e <Gfx_DrawDigit+0x13e>
 8000c48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c4c:	e001      	b.n	8000c52 <Gfx_DrawDigit+0x142>
 8000c4e:	4b40      	ldr	r3, [pc, #256]	; (8000d50 <Gfx_DrawDigit+0x240>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	733b      	strb	r3, [r7, #12]
	Gfx_DrawRect(x+thickness, y+(2*thickness)+(2*seg_len), seg_len, thickness, new_color);
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	88fb      	ldrh	r3, [r7, #6]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	b298      	uxth	r0, r3
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	7bbb      	ldrb	r3, [r7, #14]
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	4413      	add	r3, r2
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	88bb      	ldrh	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	b299      	uxth	r1, r3
 8000c74:	7bbb      	ldrb	r3, [r7, #14]
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
 8000c7a:	b29c      	uxth	r4, r3
 8000c7c:	7b3b      	ldrb	r3, [r7, #12]
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	4623      	mov	r3, r4
 8000c82:	f7ff ff17 	bl	8000ab4 <Gfx_DrawRect>

	// e
	new_color = ((pattern & SEG_E_MASK) ? color : background_color);
 8000c86:	7b7b      	ldrb	r3, [r7, #13]
 8000c88:	f003 0304 	and.w	r3, r3, #4
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d002      	beq.n	8000c96 <Gfx_DrawDigit+0x186>
 8000c90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c94:	e001      	b.n	8000c9a <Gfx_DrawDigit+0x18a>
 8000c96:	4b2e      	ldr	r3, [pc, #184]	; (8000d50 <Gfx_DrawDigit+0x240>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	733b      	strb	r3, [r7, #12]
	Gfx_DrawRect(x, y+(2*thickness)+seg_len, thickness, seg_len, new_color);
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	88bb      	ldrh	r3, [r7, #4]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	7bbb      	ldrb	r3, [r7, #14]
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	4413      	add	r3, r2
 8000cb0:	b299      	uxth	r1, r3
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	7bbb      	ldrb	r3, [r7, #14]
 8000cb8:	b29c      	uxth	r4, r3
 8000cba:	88f8      	ldrh	r0, [r7, #6]
 8000cbc:	7b3b      	ldrb	r3, [r7, #12]
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	4623      	mov	r3, r4
 8000cc2:	f7ff fef7 	bl	8000ab4 <Gfx_DrawRect>

	// f
	new_color = ((pattern & SEG_F_MASK) ? color : background_color);
 8000cc6:	7b7b      	ldrb	r3, [r7, #13]
 8000cc8:	f003 0302 	and.w	r3, r3, #2
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d002      	beq.n	8000cd6 <Gfx_DrawDigit+0x1c6>
 8000cd0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cd4:	e001      	b.n	8000cda <Gfx_DrawDigit+0x1ca>
 8000cd6:	4b1e      	ldr	r3, [pc, #120]	; (8000d50 <Gfx_DrawDigit+0x240>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	733b      	strb	r3, [r7, #12]
	Gfx_DrawRect(x, y+thickness, thickness, seg_len, new_color);
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	88bb      	ldrh	r3, [r7, #4]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	b299      	uxth	r1, r3
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	7bbb      	ldrb	r3, [r7, #14]
 8000cec:	b29c      	uxth	r4, r3
 8000cee:	88f8      	ldrh	r0, [r7, #6]
 8000cf0:	7b3b      	ldrb	r3, [r7, #12]
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	4623      	mov	r3, r4
 8000cf6:	f7ff fedd 	bl	8000ab4 <Gfx_DrawRect>

	// g
	new_color = ((pattern & SEG_G_MASK) ? color : background_color);
 8000cfa:	7b7b      	ldrb	r3, [r7, #13]
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d002      	beq.n	8000d0a <Gfx_DrawDigit+0x1fa>
 8000d04:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d08:	e001      	b.n	8000d0e <Gfx_DrawDigit+0x1fe>
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <Gfx_DrawDigit+0x240>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	733b      	strb	r3, [r7, #12]
	Gfx_DrawRect(x+thickness, y+thickness+seg_len, seg_len, thickness, new_color);
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	88fb      	ldrh	r3, [r7, #6]
 8000d16:	4413      	add	r3, r2
 8000d18:	b298      	uxth	r0, r3
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	88bb      	ldrh	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	7bbb      	ldrb	r3, [r7, #14]
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	4413      	add	r3, r2
 8000d2a:	b299      	uxth	r1, r3
 8000d2c:	7bbb      	ldrb	r3, [r7, #14]
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	b29c      	uxth	r4, r3
 8000d34:	7b3b      	ldrb	r3, [r7, #12]
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	4623      	mov	r3, r4
 8000d3a:	f7ff febb 	bl	8000ab4 <Gfx_DrawRect>
 8000d3e:	e000      	b.n	8000d42 <Gfx_DrawDigit+0x232>
		return;
 8000d40:	bf00      	nop
}
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd90      	pop	{r4, r7, pc}
 8000d48:	cccccccd 	.word	0xcccccccd
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	20012c64 	.word	0x20012c64

08000d54 <Gfx_DrawImage>:
void Gfx_DrawNumber(uint16_t x, uint16_t y, uint8_t number, uint8_t font_height, uint8_t color) {
	Gfx_DrawDigit(x, y, number % 10, font_height, color);
	Gfx_DrawDigit(x + (font_height * 3 / 2), y, number / 10, font_height, color);
}

void Gfx_DrawImage(image_t *img) {
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	/* Set window to display image */
	Display_SetWindow(img->x, img->y, img->x + img->w -1, img->y + img->h - 1);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	8818      	ldrh	r0, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	8859      	ldrh	r1, [r3, #2]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	881a      	ldrh	r2, [r3, #0]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	889b      	ldrh	r3, [r3, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	3b01      	subs	r3, #1
 8000d72:	b29c      	uxth	r4, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	885a      	ldrh	r2, [r3, #2]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	88db      	ldrh	r3, [r3, #6]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	3b01      	subs	r3, #1
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	4622      	mov	r2, r4
 8000d86:	f7ff fcd5 	bl	8000734 <Display_SetWindow>

	/* Send image data */
	Display_SendData(img->data_len, img->data);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68da      	ldr	r2, [r3, #12]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	4619      	mov	r1, r3
 8000d94:	4610      	mov	r0, r2
 8000d96:	f7ff fdaf 	bl	80008f8 <Display_SendData>
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd90      	pop	{r4, r7, pc}
	...

08000da4 <SystemClock_Config>:
UART_HandleTypeDef huart2;	// uart interface for debugging
TIM_HandleTypeDef htim3;	// timer interface for button debouncing
TIM_HandleTypeDef htim2;	// timer interface for lap timing

void SystemClock_Config(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b094      	sub	sp, #80	; 0x50
 8000da8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	2234      	movs	r2, #52	; 0x34
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f003 f9f8 	bl	80041a8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db8:	f107 0308 	add.w	r3, r7, #8
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]

	/* Configure the main internal regulator output voltage */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000dc8:	2300      	movs	r3, #0
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <SystemClock_Config+0xd4>)
 8000dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd0:	4a29      	ldr	r2, [pc, #164]	; (8000e78 <SystemClock_Config+0xd4>)
 8000dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd8:	4b27      	ldr	r3, [pc, #156]	; (8000e78 <SystemClock_Config+0xd4>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000de4:	2300      	movs	r3, #0
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	4b24      	ldr	r3, [pc, #144]	; (8000e7c <SystemClock_Config+0xd8>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000df0:	4a22      	ldr	r2, [pc, #136]	; (8000e7c <SystemClock_Config+0xd8>)
 8000df2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df6:	6013      	str	r3, [r2, #0]
 8000df8:	4b20      	ldr	r3, [pc, #128]	; (8000e7c <SystemClock_Config+0xd8>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e00:	603b      	str	r3, [r7, #0]
 8000e02:	683b      	ldr	r3, [r7, #0]

	/* Initialize the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e04:	2302      	movs	r3, #2
 8000e06:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e0c:	2310      	movs	r3, #16
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e10:	2302      	movs	r3, #2
 8000e12:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e14:	2300      	movs	r3, #0
 8000e16:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000e18:	2310      	movs	r3, #16
 8000e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000e1c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e20:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e22:	2304      	movs	r3, #4
 8000e24:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e26:	2302      	movs	r3, #2
 8000e28:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e2e:	f107 031c 	add.w	r3, r7, #28
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 fd22 	bl	800287c <HAL_RCC_OscConfig>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <SystemClock_Config+0x9e>
		Error_Handler();
 8000e3e:	f000 f9b1 	bl	80011a4 <Error_Handler>
	}

	/* Initializes the CPU, AHB and APB buses clocks */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e42:	230f      	movs	r3, #15
 8000e44:	60bb      	str	r3, [r7, #8]
							  	  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e46:	2302      	movs	r3, #2
 8000e48:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e52:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000e58:	f107 0308 	add.w	r3, r7, #8
 8000e5c:	2102      	movs	r1, #2
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f001 f9c2 	bl	80021e8 <HAL_RCC_ClockConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <SystemClock_Config+0xca>
		Error_Handler();
 8000e6a:	f000 f99b 	bl	80011a4 <Error_Handler>
	}
}
 8000e6e:	bf00      	nop
 8000e70:	3750      	adds	r7, #80	; 0x50
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40007000 	.word	0x40007000

08000e80 <MX_SPI2_Init>:


void MX_SPI2_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000e84:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000e86:	4a18      	ldr	r2, [pc, #96]	; (8000ee8 <MX_SPI2_Init+0x68>)
 8000e88:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e8a:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000e8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e90:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000eac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb0:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ec4:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000ecc:	220a      	movs	r2, #10
 8000ece:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000ed0:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000ed2:	f001 ff71 	bl	8002db8 <HAL_SPI_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_SPI2_Init+0x60>
		Error_Handler();
 8000edc:	f000 f962 	bl	80011a4 <Error_Handler>
	}
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20012c68 	.word	0x20012c68
 8000ee8:	40003800 	.word	0x40003800

08000eec <MX_USART2_UART_Init>:


void MX_USART2_UART_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	/* USART2 parameter configuration */
	huart2.Instance = USART2;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000ef2:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <MX_USART2_UART_Init+0x50>)
 8000ef4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000ef8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000efc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f12:	220c      	movs	r2, #12
 8000f14:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f24:	f002 fe5a 	bl	8003bdc <HAL_UART_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000f2e:	f000 f939 	bl	80011a4 <Error_Handler>
	}
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20012cc0 	.word	0x20012cc0
 8000f3c:	40004400 	.word	0x40004400

08000f40 <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	4b40      	ldr	r3, [pc, #256]	; (800105c <MX_GPIO_Init+0x11c>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a3f      	ldr	r2, [pc, #252]	; (800105c <MX_GPIO_Init+0x11c>)
 8000f60:	f043 0304 	orr.w	r3, r3, #4
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b3d      	ldr	r3, [pc, #244]	; (800105c <MX_GPIO_Init+0x11c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0304 	and.w	r3, r3, #4
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b39      	ldr	r3, [pc, #228]	; (800105c <MX_GPIO_Init+0x11c>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a38      	ldr	r2, [pc, #224]	; (800105c <MX_GPIO_Init+0x11c>)
 8000f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b36      	ldr	r3, [pc, #216]	; (800105c <MX_GPIO_Init+0x11c>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	4b32      	ldr	r3, [pc, #200]	; (800105c <MX_GPIO_Init+0x11c>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a31      	ldr	r2, [pc, #196]	; (800105c <MX_GPIO_Init+0x11c>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b2f      	ldr	r3, [pc, #188]	; (800105c <MX_GPIO_Init+0x11c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	4b2b      	ldr	r3, [pc, #172]	; (800105c <MX_GPIO_Init+0x11c>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a2a      	ldr	r2, [pc, #168]	; (800105c <MX_GPIO_Init+0x11c>)
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b28      	ldr	r3, [pc, #160]	; (800105c <MX_GPIO_Init+0x11c>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]

	/* Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2101      	movs	r1, #1
 8000fca:	4825      	ldr	r0, [pc, #148]	; (8001060 <MX_GPIO_Init+0x120>)
 8000fcc:	f001 f8d8 	bl	8002180 <HAL_GPIO_WritePin>

	/* Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2120      	movs	r1, #32
 8000fd4:	4823      	ldr	r0, [pc, #140]	; (8001064 <MX_GPIO_Init+0x124>)
 8000fd6:	f001 f8d3 	bl	8002180 <HAL_GPIO_WritePin>

	/* Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, SPI_DCRS_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2111      	movs	r1, #17
 8000fde:	4822      	ldr	r0, [pc, #136]	; (8001068 <MX_GPIO_Init+0x128>)
 8000fe0:	f001 f8ce 	bl	8002180 <HAL_GPIO_WritePin>

	/* Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000fe4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4819      	ldr	r0, [pc, #100]	; (8001060 <MX_GPIO_Init+0x120>)
 8000ffc:	f000 ff14 	bl	8001e28 <HAL_GPIO_Init>

	/* Configure GPIO pin : SPI_RESET_Pin */
	GPIO_InitStruct.Pin = SPI_RESET_Pin;
 8001000:	2301      	movs	r3, #1
 8001002:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001004:	2301      	movs	r3, #1
 8001006:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI_RESET_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4619      	mov	r1, r3
 8001016:	4812      	ldr	r0, [pc, #72]	; (8001060 <MX_GPIO_Init+0x120>)
 8001018:	f000 ff06 	bl	8001e28 <HAL_GPIO_Init>

	/* Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800101c:	2320      	movs	r3, #32
 800101e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	480c      	ldr	r0, [pc, #48]	; (8001064 <MX_GPIO_Init+0x124>)
 8001034:	f000 fef8 	bl	8001e28 <HAL_GPIO_Init>

	/* Configure GPIO pins : SPI_DCRS_Pin SPI_CS_Pin */
	GPIO_InitStruct.Pin = SPI_DCRS_Pin|SPI_CS_Pin;
 8001038:	2311      	movs	r3, #17
 800103a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4619      	mov	r1, r3
 800104e:	4806      	ldr	r0, [pc, #24]	; (8001068 <MX_GPIO_Init+0x128>)
 8001050:	f000 feea 	bl	8001e28 <HAL_GPIO_Init>
}
 8001054:	bf00      	nop
 8001056:	3728      	adds	r7, #40	; 0x28
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40023800 	.word	0x40023800
 8001060:	40020800 	.word	0x40020800
 8001064:	40020000 	.word	0x40020000
 8001068:	40020400 	.word	0x40020400

0800106c <MX_TIM2_Init>:


void MX_TIM2_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001080:	463b      	mov	r3, r7
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]

  /* Initialize timer to generate interrupts every 1 second */
  htim2.Instance = TIM2;
 8001088:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <MX_TIM2_Init+0x98>)
 800108a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800108e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8001090:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <MX_TIM2_Init+0x98>)
 8001092:	f242 720f 	movw	r2, #9999	; 0x270f
 8001096:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001098:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <MX_TIM2_Init+0x98>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8399;
 800109e:	4b19      	ldr	r3, [pc, #100]	; (8001104 <MX_TIM2_Init+0x98>)
 80010a0:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80010a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <MX_TIM2_Init+0x98>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <MX_TIM2_Init+0x98>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010b2:	4814      	ldr	r0, [pc, #80]	; (8001104 <MX_TIM2_Init+0x98>)
 80010b4:	f002 f910 	bl	80032d8 <HAL_TIM_Base_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80010be:	f000 f871 	bl	80011a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010c8:	f107 0308 	add.w	r3, r7, #8
 80010cc:	4619      	mov	r1, r3
 80010ce:	480d      	ldr	r0, [pc, #52]	; (8001104 <MX_TIM2_Init+0x98>)
 80010d0:	f002 faca 	bl	8003668 <HAL_TIM_ConfigClockSource>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80010da:	f000 f863 	bl	80011a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010de:	2300      	movs	r3, #0
 80010e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010e6:	463b      	mov	r3, r7
 80010e8:	4619      	mov	r1, r3
 80010ea:	4806      	ldr	r0, [pc, #24]	; (8001104 <MX_TIM2_Init+0x98>)
 80010ec:	f002 fce6 	bl	8003abc <HAL_TIMEx_MasterConfigSynchronization>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80010f6:	f000 f855 	bl	80011a4 <Error_Handler>
  }
}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20012d4c 	.word	0x20012d4c

08001108 <MX_TIM3_Init>:

void MX_TIM3_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111c:	463b      	mov	r3, r7
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]

  /* Initialize timer to generate interrupt every 1 milliseconds */
  htim3.Instance = TIM3;
 8001124:	4b1d      	ldr	r3, [pc, #116]	; (800119c <MX_TIM3_Init+0x94>)
 8001126:	4a1e      	ldr	r2, [pc, #120]	; (80011a0 <MX_TIM3_Init+0x98>)
 8001128:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 800112a:	4b1c      	ldr	r3, [pc, #112]	; (800119c <MX_TIM3_Init+0x94>)
 800112c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001130:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001132:	4b1a      	ldr	r3, [pc, #104]	; (800119c <MX_TIM3_Init+0x94>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 83;
 8001138:	4b18      	ldr	r3, [pc, #96]	; (800119c <MX_TIM3_Init+0x94>)
 800113a:	2253      	movs	r2, #83	; 0x53
 800113c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <MX_TIM3_Init+0x94>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001144:	4b15      	ldr	r3, [pc, #84]	; (800119c <MX_TIM3_Init+0x94>)
 8001146:	2200      	movs	r2, #0
 8001148:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800114a:	4814      	ldr	r0, [pc, #80]	; (800119c <MX_TIM3_Init+0x94>)
 800114c:	f002 f8c4 	bl	80032d8 <HAL_TIM_Base_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001156:	f000 f825 	bl	80011a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800115a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800115e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001160:	f107 0308 	add.w	r3, r7, #8
 8001164:	4619      	mov	r1, r3
 8001166:	480d      	ldr	r0, [pc, #52]	; (800119c <MX_TIM3_Init+0x94>)
 8001168:	f002 fa7e 	bl	8003668 <HAL_TIM_ConfigClockSource>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001172:	f000 f817 	bl	80011a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001176:	2300      	movs	r3, #0
 8001178:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800117e:	463b      	mov	r3, r7
 8001180:	4619      	mov	r1, r3
 8001182:	4806      	ldr	r0, [pc, #24]	; (800119c <MX_TIM3_Init+0x94>)
 8001184:	f002 fc9a 	bl	8003abc <HAL_TIMEx_MasterConfigSynchronization>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800118e:	f000 f809 	bl	80011a4 <Error_Handler>
  }
}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20012d04 	.word	0x20012d04
 80011a0:	40000400 	.word	0x40000400

080011a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * Auto-generated by CubeIDE.
  */
void Error_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a8:	b672      	cpsid	i
}
 80011aa:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ac:	e7fe      	b.n	80011ac <Error_Handler+0x8>

080011ae <Led_Init>:
 */

#include "led.h"
#include "main.h"

void Led_Init(void) {
 80011ae:	b580      	push	{r7, lr}
 80011b0:	af00      	add	r7, sp, #0
	Led_Off(LED_ID_1);
 80011b2:	2000      	movs	r0, #0
 80011b4:	f000 f808 	bl	80011c8 <Led_Off>
	Led_Off(LED_ID_2);
 80011b8:	2001      	movs	r0, #1
 80011ba:	f000 f805 	bl	80011c8 <Led_Off>
	Led_Off(LED_ID_3);
 80011be:	2002      	movs	r0, #2
 80011c0:	f000 f802 	bl	80011c8 <Led_Off>
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <Led_Off>:
		default:
			break;
	}
}

void Led_Off(led_id_t led_id) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
	switch (led_id) {
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d00c      	beq.n	80011f2 <Led_Off+0x2a>
 80011d8:	2b02      	cmp	r3, #2
 80011da:	dc0c      	bgt.n	80011f6 <Led_Off+0x2e>
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d002      	beq.n	80011e6 <Led_Off+0x1e>
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d00a      	beq.n	80011fa <Led_Off+0x32>
			break;
		case LED_ID_3:
			// TODO turn led off
			break;
		default:
			break;
 80011e4:	e007      	b.n	80011f6 <Led_Off+0x2e>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2120      	movs	r1, #32
 80011ea:	4806      	ldr	r0, [pc, #24]	; (8001204 <Led_Off+0x3c>)
 80011ec:	f000 ffc8 	bl	8002180 <HAL_GPIO_WritePin>
			break;
 80011f0:	e004      	b.n	80011fc <Led_Off+0x34>
			break;
 80011f2:	bf00      	nop
 80011f4:	e002      	b.n	80011fc <Led_Off+0x34>
			break;
 80011f6:	bf00      	nop
 80011f8:	e000      	b.n	80011fc <Led_Off+0x34>
			break;
 80011fa:	bf00      	nop
	}
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40020000 	.word	0x40020000

08001208 <Led_Toggle>:

void Led_Toggle(led_id_t led_id) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
	switch (led_id) {
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	2b02      	cmp	r3, #2
 8001216:	d00b      	beq.n	8001230 <Led_Toggle+0x28>
 8001218:	2b02      	cmp	r3, #2
 800121a:	dc0b      	bgt.n	8001234 <Led_Toggle+0x2c>
 800121c:	2b00      	cmp	r3, #0
 800121e:	d002      	beq.n	8001226 <Led_Toggle+0x1e>
 8001220:	2b01      	cmp	r3, #1
 8001222:	d009      	beq.n	8001238 <Led_Toggle+0x30>
			break;
		case LED_ID_3:
			// TODO toggle LED
			break;
		default:
			break;
 8001224:	e006      	b.n	8001234 <Led_Toggle+0x2c>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001226:	2120      	movs	r1, #32
 8001228:	4806      	ldr	r0, [pc, #24]	; (8001244 <Led_Toggle+0x3c>)
 800122a:	f000 ffc2 	bl	80021b2 <HAL_GPIO_TogglePin>
			break;
 800122e:	e004      	b.n	800123a <Led_Toggle+0x32>
			break;
 8001230:	bf00      	nop
 8001232:	e002      	b.n	800123a <Led_Toggle+0x32>
			break;
 8001234:	bf00      	nop
 8001236:	e000      	b.n	800123a <Led_Toggle+0x32>
			break;
 8001238:	bf00      	nop
	}
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40020000 	.word	0x40020000

08001248 <main>:
#include "img.h"
#include "timer.h"
#include "ui.h"

int main(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, initializes the flash interface and the systick */
	HAL_Init();
 800124c:	f000 fc44 	bl	8001ad8 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8001250:	f7ff fda8 	bl	8000da4 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001254:	f7ff fe74 	bl	8000f40 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001258:	f7ff fe48 	bl	8000eec <MX_USART2_UART_Init>
	MX_SPI2_Init();
 800125c:	f7ff fe10 	bl	8000e80 <MX_SPI2_Init>
	MX_TIM2_Init();
 8001260:	f7ff ff04 	bl	800106c <MX_TIM2_Init>
	MX_TIM3_Init();
 8001264:	f7ff ff50 	bl	8001108 <MX_TIM3_Init>

	/* Turn off all LEDs */
	Led_Init();
 8001268:	f7ff ffa1 	bl	80011ae <Led_Init>

	/* Reset button controllers */
	Button_Init();
 800126c:	f7ff f94c 	bl	8000508 <Button_Init>

	/* Initialize rotary encoder controllers */
	Encoder_Init();
 8001270:	f7ff fb74 	bl	800095c <Encoder_Init>

	/* Initialize display */
	Display_Init();
 8001274:	f7ff f9c8 	bl	8000608 <Display_Init>

	/* Initialize graphics unit */
	Gfx_Init();
 8001278:	f7ff fbfc 	bl	8000a74 <Gfx_Init>

	/* Initialize UI */
	UI_Init();
 800127c:	f000 f9c6 	bl	800160c <UI_Init>

	/* Start interrupts from timer */
	Timer_EnableInterrupts();
 8001280:	f000 f97e 	bl	8001580 <Timer_EnableInterrupts>

	/* Infinite main loop */
	while (1)
 8001284:	e7fe      	b.n	8001284 <main+0x3c>
	...

08001288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <HAL_MspInit+0x4c>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	4a0f      	ldr	r2, [pc, #60]	; (80012d4 <HAL_MspInit+0x4c>)
 8001298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800129c:	6453      	str	r3, [r2, #68]	; 0x44
 800129e:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <HAL_MspInit+0x4c>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	603b      	str	r3, [r7, #0]
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <HAL_MspInit+0x4c>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	4a08      	ldr	r2, [pc, #32]	; (80012d4 <HAL_MspInit+0x4c>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_MspInit+0x4c>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012c6:	2007      	movs	r0, #7
 80012c8:	f000 fd6c 	bl	8001da4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40023800 	.word	0x40023800

080012d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a30      	ldr	r2, [pc, #192]	; (80013b8 <HAL_SPI_MspInit+0xe0>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d15a      	bne.n	80013b0 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	4b2f      	ldr	r3, [pc, #188]	; (80013bc <HAL_SPI_MspInit+0xe4>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	4a2e      	ldr	r2, [pc, #184]	; (80013bc <HAL_SPI_MspInit+0xe4>)
 8001304:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001308:	6413      	str	r3, [r2, #64]	; 0x40
 800130a:	4b2c      	ldr	r3, [pc, #176]	; (80013bc <HAL_SPI_MspInit+0xe4>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b28      	ldr	r3, [pc, #160]	; (80013bc <HAL_SPI_MspInit+0xe4>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a27      	ldr	r2, [pc, #156]	; (80013bc <HAL_SPI_MspInit+0xe4>)
 8001320:	f043 0304 	orr.w	r3, r3, #4
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b25      	ldr	r3, [pc, #148]	; (80013bc <HAL_SPI_MspInit+0xe4>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0304 	and.w	r3, r3, #4
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	4b21      	ldr	r3, [pc, #132]	; (80013bc <HAL_SPI_MspInit+0xe4>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a20      	ldr	r2, [pc, #128]	; (80013bc <HAL_SPI_MspInit+0xe4>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <HAL_SPI_MspInit+0xe4>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800134e:	2302      	movs	r3, #2
 8001350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800135e:	2307      	movs	r3, #7
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	4815      	ldr	r0, [pc, #84]	; (80013c0 <HAL_SPI_MspInit+0xe8>)
 800136a:	f000 fd5d 	bl	8001e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800136e:	2304      	movs	r3, #4
 8001370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800137e:	2305      	movs	r3, #5
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	4619      	mov	r1, r3
 8001388:	480d      	ldr	r0, [pc, #52]	; (80013c0 <HAL_SPI_MspInit+0xe8>)
 800138a:	f000 fd4d 	bl	8001e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800138e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013a0:	2305      	movs	r3, #5
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4619      	mov	r1, r3
 80013aa:	4806      	ldr	r0, [pc, #24]	; (80013c4 <HAL_SPI_MspInit+0xec>)
 80013ac:	f000 fd3c 	bl	8001e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80013b0:	bf00      	nop
 80013b2:	3728      	adds	r7, #40	; 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40003800 	.word	0x40003800
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40020800 	.word	0x40020800
 80013c4:	40020400 	.word	0x40020400

080013c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013d8:	d116      	bne.n	8001408 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <HAL_TIM_Base_MspInit+0x80>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	4a19      	ldr	r2, [pc, #100]	; (8001448 <HAL_TIM_Base_MspInit+0x80>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ea:	4b17      	ldr	r3, [pc, #92]	; (8001448 <HAL_TIM_Base_MspInit+0x80>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	201c      	movs	r0, #28
 80013fc:	f000 fcdd 	bl	8001dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001400:	201c      	movs	r0, #28
 8001402:	f000 fcf6 	bl	8001df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001406:	e01a      	b.n	800143e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0f      	ldr	r2, [pc, #60]	; (800144c <HAL_TIM_Base_MspInit+0x84>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d115      	bne.n	800143e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <HAL_TIM_Base_MspInit+0x80>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	4a0b      	ldr	r2, [pc, #44]	; (8001448 <HAL_TIM_Base_MspInit+0x80>)
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	6413      	str	r3, [r2, #64]	; 0x40
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <HAL_TIM_Base_MspInit+0x80>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2100      	movs	r1, #0
 8001432:	201d      	movs	r0, #29
 8001434:	f000 fcc1 	bl	8001dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001438:	201d      	movs	r0, #29
 800143a:	f000 fcda 	bl	8001df2 <HAL_NVIC_EnableIRQ>
}
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800
 800144c:	40000400 	.word	0x40000400

08001450 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a19      	ldr	r2, [pc, #100]	; (80014d4 <HAL_UART_MspInit+0x84>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d12b      	bne.n	80014ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <HAL_UART_MspInit+0x88>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	4a17      	ldr	r2, [pc, #92]	; (80014d8 <HAL_UART_MspInit+0x88>)
 800147c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001480:	6413      	str	r3, [r2, #64]	; 0x40
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <HAL_UART_MspInit+0x88>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <HAL_UART_MspInit+0x88>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a10      	ldr	r2, [pc, #64]	; (80014d8 <HAL_UART_MspInit+0x88>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <HAL_UART_MspInit+0x88>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014aa:	230c      	movs	r3, #12
 80014ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ae:	2302      	movs	r3, #2
 80014b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b6:	2303      	movs	r3, #3
 80014b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ba:	2307      	movs	r3, #7
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4619      	mov	r1, r3
 80014c4:	4805      	ldr	r0, [pc, #20]	; (80014dc <HAL_UART_MspInit+0x8c>)
 80014c6:	f000 fcaf 	bl	8001e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014ca:	bf00      	nop
 80014cc:	3728      	adds	r7, #40	; 0x28
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40004400 	.word	0x40004400
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020000 	.word	0x40020000

080014e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <NMI_Handler+0x4>

080014e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ea:	e7fe      	b.n	80014ea <HardFault_Handler+0x4>

080014ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <MemManage_Handler+0x4>

080014f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f6:	e7fe      	b.n	80014f6 <BusFault_Handler+0x4>

080014f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014fc:	e7fe      	b.n	80014fc <UsageFault_Handler+0x4>

080014fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800152c:	f000 fb26 	bl	8001b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}

08001534 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001538:	4802      	ldr	r0, [pc, #8]	; (8001544 <TIM2_IRQHandler+0x10>)
 800153a:	f001 ff8d 	bl	8003458 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20012d4c 	.word	0x20012d4c

08001548 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800154c:	4802      	ldr	r0, [pc, #8]	; (8001558 <TIM3_IRQHandler+0x10>)
 800154e:	f001 ff83 	bl	8003458 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20012d04 	.word	0x20012d04

0800155c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <SystemInit+0x20>)
 8001562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <SystemInit+0x20>)
 8001568:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800156c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <Timer_EnableInterrupts>:
extern TIM_HandleTypeDef htim3;

/* Stop watch variables (seconds) */
static uint32_t time_elapsed = 0;

void Timer_EnableInterrupts(void) {
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001584:	4803      	ldr	r0, [pc, #12]	; (8001594 <Timer_EnableInterrupts+0x14>)
 8001586:	f001 fef7 	bl	8003378 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 800158a:	4803      	ldr	r0, [pc, #12]	; (8001598 <Timer_EnableInterrupts+0x18>)
 800158c:	f001 fef4 	bl	8003378 <HAL_TIM_Base_Start_IT>
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20012d4c 	.word	0x20012d4c
 8001598:	20012d04 	.word	0x20012d04

0800159c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a16      	ldr	r2, [pc, #88]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d104      	bne.n	80015b6 <HAL_TIM_PeriodElapsedCallback+0x1a>
		// Should be called every 1ms
		Button_Debounce();
 80015ac:	f7fe ffde 	bl	800056c <Button_Debounce>
		Encoder_Debounce();
 80015b0:	f7ff fa18 	bl	80009e4 <Encoder_Debounce>

		// add one more second to time elapsed
		time_elapsed++;

	}
}
 80015b4:	e020      	b.n	80015f8 <HAL_TIM_PeriodElapsedCallback+0x5c>
	} else if (htim == &htim2) {
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a12      	ldr	r2, [pc, #72]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d11c      	bne.n	80015f8 <HAL_TIM_PeriodElapsedCallback+0x5c>
		UI_Update_Laptime(time_elapsed);
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 f82e 	bl	8001624 <UI_Update_Laptime>
		UI_Update_BatteryPct(78);
 80015c8:	204e      	movs	r0, #78	; 0x4e
 80015ca:	f000 f8ab 	bl	8001724 <UI_Update_BatteryPct>
		UI_Update_RPM(2173);
 80015ce:	f640 007d 	movw	r0, #2173	; 0x87d
 80015d2:	f000 f909 	bl	80017e8 <UI_Update_RPM>
		UI_Update_WheelTemps(74,71,72,67);
 80015d6:	2343      	movs	r3, #67	; 0x43
 80015d8:	2248      	movs	r2, #72	; 0x48
 80015da:	2147      	movs	r1, #71	; 0x47
 80015dc:	204a      	movs	r0, #74	; 0x4a
 80015de:	f000 f967 	bl	80018b0 <UI_Update_WheelTemps>
		UI_Update_Speedometer(69);
 80015e2:	2045      	movs	r0, #69	; 0x45
 80015e4:	f000 f9fa 	bl	80019dc <UI_Update_Speedometer>
		UI_Update_CoolingTemp(23);
 80015e8:	2017      	movs	r0, #23
 80015ea:	f000 fa21 	bl	8001a30 <UI_Update_CoolingTemp>
		time_elapsed++;
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	3301      	adds	r3, #1
 80015f4:	4a04      	ldr	r2, [pc, #16]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20012d04 	.word	0x20012d04
 8001604:	20012d4c 	.word	0x20012d4c
 8001608:	20012d94 	.word	0x20012d94

0800160c <UI_Init>:
	.h = 320,
	.data = drive_mode_background_img,
	.data_len = DRIVE_MODE_BACKGROUND_IMG_LEN
};

void UI_Init(void) {
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
	Gfx_SetBackground(COLOR_BLACK);
 8001610:	2000      	movs	r0, #0
 8001612:	f7ff fa37 	bl	8000a84 <Gfx_SetBackground>
	Gfx_DrawImage(&background_img);
 8001616:	4802      	ldr	r0, [pc, #8]	; (8001620 <UI_Init+0x14>)
 8001618:	f7ff fb9c 	bl	8000d54 <Gfx_DrawImage>
}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20012c18 	.word	0x20012c18

08001624 <UI_Update_Laptime>:

void UI_Reset_Laptime(uint32_t time_elapsed) {
	lap_time_start = time_elapsed;
}

void UI_Update_Laptime(uint32_t time_elapsed) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af02      	add	r7, sp, #8
 800162a:	6078      	str	r0, [r7, #4]
	uint8_t minutes = (time_elapsed - lap_time_start) / 60;
 800162c:	4b3a      	ldr	r3, [pc, #232]	; (8001718 <UI_Update_Laptime+0xf4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	4a39      	ldr	r2, [pc, #228]	; (800171c <UI_Update_Laptime+0xf8>)
 8001636:	fba2 2303 	umull	r2, r3, r2, r3
 800163a:	095b      	lsrs	r3, r3, #5
 800163c:	73fb      	strb	r3, [r7, #15]
	uint8_t seconds = (time_elapsed - lap_time_start) % 60;
 800163e:	4b36      	ldr	r3, [pc, #216]	; (8001718 <UI_Update_Laptime+0xf4>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	1ad1      	subs	r1, r2, r3
 8001646:	4b35      	ldr	r3, [pc, #212]	; (800171c <UI_Update_Laptime+0xf8>)
 8001648:	fba3 2301 	umull	r2, r3, r3, r1
 800164c:	095a      	lsrs	r2, r3, #5
 800164e:	4613      	mov	r3, r2
 8001650:	011b      	lsls	r3, r3, #4
 8001652:	1a9b      	subs	r3, r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	1aca      	subs	r2, r1, r3
 8001658:	4613      	mov	r3, r2
 800165a:	73bb      	strb	r3, [r7, #14]

	Gfx_DrawDigit(325, 260, minutes / 10, 40, COLOR_PINK);
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	4a30      	ldr	r2, [pc, #192]	; (8001720 <UI_Update_Laptime+0xfc>)
 8001660:	fba2 2303 	umull	r2, r3, r2, r3
 8001664:	08db      	lsrs	r3, r3, #3
 8001666:	b2da      	uxtb	r2, r3
 8001668:	232d      	movs	r3, #45	; 0x2d
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2328      	movs	r3, #40	; 0x28
 800166e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001672:	f240 1045 	movw	r0, #325	; 0x145
 8001676:	f7ff fa4b 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawDigit(355, 260, minutes % 10, 40, COLOR_PINK);
 800167a:	7bfa      	ldrb	r2, [r7, #15]
 800167c:	4b28      	ldr	r3, [pc, #160]	; (8001720 <UI_Update_Laptime+0xfc>)
 800167e:	fba3 1302 	umull	r1, r3, r3, r2
 8001682:	08d9      	lsrs	r1, r3, #3
 8001684:	460b      	mov	r3, r1
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	b2da      	uxtb	r2, r3
 8001690:	232d      	movs	r3, #45	; 0x2d
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	2328      	movs	r3, #40	; 0x28
 8001696:	f44f 7182 	mov.w	r1, #260	; 0x104
 800169a:	f240 1063 	movw	r0, #355	; 0x163
 800169e:	f7ff fa37 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawDigit(405, 260, seconds / 10, 40, COLOR_PINK);
 80016a2:	7bbb      	ldrb	r3, [r7, #14]
 80016a4:	4a1e      	ldr	r2, [pc, #120]	; (8001720 <UI_Update_Laptime+0xfc>)
 80016a6:	fba2 2303 	umull	r2, r3, r2, r3
 80016aa:	08db      	lsrs	r3, r3, #3
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	232d      	movs	r3, #45	; 0x2d
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2328      	movs	r3, #40	; 0x28
 80016b4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80016b8:	f240 1095 	movw	r0, #405	; 0x195
 80016bc:	f7ff fa28 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawDigit(435, 260, seconds % 10, 40, COLOR_PINK);
 80016c0:	7bba      	ldrb	r2, [r7, #14]
 80016c2:	4b17      	ldr	r3, [pc, #92]	; (8001720 <UI_Update_Laptime+0xfc>)
 80016c4:	fba3 1302 	umull	r1, r3, r3, r2
 80016c8:	08d9      	lsrs	r1, r3, #3
 80016ca:	460b      	mov	r3, r1
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	440b      	add	r3, r1
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	232d      	movs	r3, #45	; 0x2d
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	2328      	movs	r3, #40	; 0x28
 80016dc:	f44f 7182 	mov.w	r1, #260	; 0x104
 80016e0:	f240 10b3 	movw	r0, #435	; 0x1b3
 80016e4:	f7ff fa14 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawRect(390, 270, 5, 5, COLOR_PINK);
 80016e8:	232d      	movs	r3, #45	; 0x2d
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	2305      	movs	r3, #5
 80016ee:	2205      	movs	r2, #5
 80016f0:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80016f4:	f44f 70c3 	mov.w	r0, #390	; 0x186
 80016f8:	f7ff f9dc 	bl	8000ab4 <Gfx_DrawRect>
	Gfx_DrawRect(390, 290, 5, 5, COLOR_PINK);
 80016fc:	232d      	movs	r3, #45	; 0x2d
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	2305      	movs	r3, #5
 8001702:	2205      	movs	r2, #5
 8001704:	f44f 7191 	mov.w	r1, #290	; 0x122
 8001708:	f44f 70c3 	mov.w	r0, #390	; 0x186
 800170c:	f7ff f9d2 	bl	8000ab4 <Gfx_DrawRect>
}
 8001710:	bf00      	nop
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20012d98 	.word	0x20012d98
 800171c:	88888889 	.word	0x88888889
 8001720:	cccccccd 	.word	0xcccccccd

08001724 <UI_Update_BatteryPct>:

void UI_Update_BatteryPct(uint8_t battery_pct) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af02      	add	r7, sp, #8
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
	uint8_t color;
	if (battery_pct > BATTERY_THRESHOLD_PCT_YELLOW) {
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	2b3c      	cmp	r3, #60	; 0x3c
 8001732:	d902      	bls.n	800173a <UI_Update_BatteryPct+0x16>
		color = COLOR_GREEN;
 8001734:	2312      	movs	r3, #18
 8001736:	73fb      	strb	r3, [r7, #15]
 8001738:	e007      	b.n	800174a <UI_Update_BatteryPct+0x26>
	} else if (battery_pct > BATTERY_THRESHOLD_PCT_RED) {
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	2b1e      	cmp	r3, #30
 800173e:	d902      	bls.n	8001746 <UI_Update_BatteryPct+0x22>
		color = COLOR_YELLOW;
 8001740:	2336      	movs	r3, #54	; 0x36
 8001742:	73fb      	strb	r3, [r7, #15]
 8001744:	e001      	b.n	800174a <UI_Update_BatteryPct+0x26>
	} else {
		color = COLOR_RED;
 8001746:	2324      	movs	r3, #36	; 0x24
 8001748:	73fb      	strb	r3, [r7, #15]
	}

	uint8_t width = battery_pct * BATTERY_ICON_WIDTH / 100;
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	224c      	movs	r2, #76	; 0x4c
 800174e:	fb02 f303 	mul.w	r3, r2, r3
 8001752:	4a23      	ldr	r2, [pc, #140]	; (80017e0 <UI_Update_BatteryPct+0xbc>)
 8001754:	fb82 1203 	smull	r1, r2, r2, r3
 8001758:	1152      	asrs	r2, r2, #5
 800175a:	17db      	asrs	r3, r3, #31
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	73bb      	strb	r3, [r7, #14]
	Gfx_DrawRect(295, 15, width, BATTERY_ICON_HEIGHT, color);
 8001760:	7bbb      	ldrb	r3, [r7, #14]
 8001762:	b29a      	uxth	r2, r3
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	2323      	movs	r3, #35	; 0x23
 800176a:	210f      	movs	r1, #15
 800176c:	f240 1027 	movw	r0, #295	; 0x127
 8001770:	f7ff f9a0 	bl	8000ab4 <Gfx_DrawRect>
	Gfx_DrawRect(295+width, 15, BATTERY_ICON_WIDTH - width, BATTERY_ICON_HEIGHT, COLOR_BLACK);
 8001774:	7bbb      	ldrb	r3, [r7, #14]
 8001776:	b29b      	uxth	r3, r3
 8001778:	f203 1327 	addw	r3, r3, #295	; 0x127
 800177c:	b298      	uxth	r0, r3
 800177e:	7bbb      	ldrb	r3, [r7, #14]
 8001780:	b29b      	uxth	r3, r3
 8001782:	f1c3 034c 	rsb	r3, r3, #76	; 0x4c
 8001786:	b29a      	uxth	r2, r3
 8001788:	2300      	movs	r3, #0
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	2323      	movs	r3, #35	; 0x23
 800178e:	210f      	movs	r1, #15
 8001790:	f7ff f990 	bl	8000ab4 <Gfx_DrawRect>

	/* Battery */
	Gfx_DrawDigit(390, 20, battery_pct / 10, 25, COLOR_GREEN);
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	4a13      	ldr	r2, [pc, #76]	; (80017e4 <UI_Update_BatteryPct+0xc0>)
 8001798:	fba2 2303 	umull	r2, r3, r2, r3
 800179c:	08db      	lsrs	r3, r3, #3
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	2312      	movs	r3, #18
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	2319      	movs	r3, #25
 80017a6:	2114      	movs	r1, #20
 80017a8:	f44f 70c3 	mov.w	r0, #390	; 0x186
 80017ac:	f7ff f9b0 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawDigit(410, 20, battery_pct % 10, 25, COLOR_GREEN);
 80017b0:	79fa      	ldrb	r2, [r7, #7]
 80017b2:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <UI_Update_BatteryPct+0xc0>)
 80017b4:	fba3 1302 	umull	r1, r3, r3, r2
 80017b8:	08d9      	lsrs	r1, r3, #3
 80017ba:	460b      	mov	r3, r1
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	440b      	add	r3, r1
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	2312      	movs	r3, #18
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2319      	movs	r3, #25
 80017cc:	2114      	movs	r1, #20
 80017ce:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80017d2:	f7ff f99d 	bl	8000b10 <Gfx_DrawDigit>
}
 80017d6:	bf00      	nop
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	51eb851f 	.word	0x51eb851f
 80017e4:	cccccccd 	.word	0xcccccccd

080017e8 <UI_Update_RPM>:

void UI_Update_RPM(uint16_t rpm) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af02      	add	r7, sp, #8
 80017ee:	4603      	mov	r3, r0
 80017f0:	80fb      	strh	r3, [r7, #6]
	Gfx_DrawDigit(195, 260, rpm / 1000, 40, COLOR_GREEN);
 80017f2:	88fb      	ldrh	r3, [r7, #6]
 80017f4:	4a2b      	ldr	r2, [pc, #172]	; (80018a4 <UI_Update_RPM+0xbc>)
 80017f6:	fba2 2303 	umull	r2, r3, r2, r3
 80017fa:	099b      	lsrs	r3, r3, #6
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	2312      	movs	r3, #18
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	2328      	movs	r3, #40	; 0x28
 8001806:	f44f 7182 	mov.w	r1, #260	; 0x104
 800180a:	20c3      	movs	r0, #195	; 0xc3
 800180c:	f7ff f980 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawDigit(220, 260, (rpm / 100) % 10, 40, COLOR_GREEN);
 8001810:	88fb      	ldrh	r3, [r7, #6]
 8001812:	4a25      	ldr	r2, [pc, #148]	; (80018a8 <UI_Update_RPM+0xc0>)
 8001814:	fba2 2303 	umull	r2, r3, r2, r3
 8001818:	095b      	lsrs	r3, r3, #5
 800181a:	b29a      	uxth	r2, r3
 800181c:	4b23      	ldr	r3, [pc, #140]	; (80018ac <UI_Update_RPM+0xc4>)
 800181e:	fba3 1302 	umull	r1, r3, r3, r2
 8001822:	08d9      	lsrs	r1, r3, #3
 8001824:	460b      	mov	r3, r1
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	b29b      	uxth	r3, r3
 8001830:	b2da      	uxtb	r2, r3
 8001832:	2312      	movs	r3, #18
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	2328      	movs	r3, #40	; 0x28
 8001838:	f44f 7182 	mov.w	r1, #260	; 0x104
 800183c:	20dc      	movs	r0, #220	; 0xdc
 800183e:	f7ff f967 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawDigit(245, 260, (rpm % 100) / 10, 40, COLOR_GREEN);
 8001842:	88fb      	ldrh	r3, [r7, #6]
 8001844:	4a18      	ldr	r2, [pc, #96]	; (80018a8 <UI_Update_RPM+0xc0>)
 8001846:	fba2 1203 	umull	r1, r2, r2, r3
 800184a:	0952      	lsrs	r2, r2, #5
 800184c:	2164      	movs	r1, #100	; 0x64
 800184e:	fb01 f202 	mul.w	r2, r1, r2
 8001852:	1a9b      	subs	r3, r3, r2
 8001854:	b29b      	uxth	r3, r3
 8001856:	4a15      	ldr	r2, [pc, #84]	; (80018ac <UI_Update_RPM+0xc4>)
 8001858:	fba2 2303 	umull	r2, r3, r2, r3
 800185c:	08db      	lsrs	r3, r3, #3
 800185e:	b29b      	uxth	r3, r3
 8001860:	b2da      	uxtb	r2, r3
 8001862:	2312      	movs	r3, #18
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	2328      	movs	r3, #40	; 0x28
 8001868:	f44f 7182 	mov.w	r1, #260	; 0x104
 800186c:	20f5      	movs	r0, #245	; 0xf5
 800186e:	f7ff f94f 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawDigit(270, 260, rpm % 10, 40, COLOR_GREEN);
 8001872:	88fa      	ldrh	r2, [r7, #6]
 8001874:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <UI_Update_RPM+0xc4>)
 8001876:	fba3 1302 	umull	r1, r3, r3, r2
 800187a:	08d9      	lsrs	r1, r3, #3
 800187c:	460b      	mov	r3, r1
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	b29b      	uxth	r3, r3
 8001888:	b2da      	uxtb	r2, r3
 800188a:	2312      	movs	r3, #18
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	2328      	movs	r3, #40	; 0x28
 8001890:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001894:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8001898:	f7ff f93a 	bl	8000b10 <Gfx_DrawDigit>
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	10624dd3 	.word	0x10624dd3
 80018a8:	51eb851f 	.word	0x51eb851f
 80018ac:	cccccccd 	.word	0xcccccccd

080018b0 <UI_Update_WheelTemps>:

void UI_Update_WheelTemps(uint8_t front_left, uint8_t front_right,
		  	  	  	  	  uint8_t back_left, uint8_t back_right) {
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af02      	add	r7, sp, #8
 80018b6:	4604      	mov	r4, r0
 80018b8:	4608      	mov	r0, r1
 80018ba:	4611      	mov	r1, r2
 80018bc:	461a      	mov	r2, r3
 80018be:	4623      	mov	r3, r4
 80018c0:	71fb      	strb	r3, [r7, #7]
 80018c2:	4603      	mov	r3, r0
 80018c4:	71bb      	strb	r3, [r7, #6]
 80018c6:	460b      	mov	r3, r1
 80018c8:	717b      	strb	r3, [r7, #5]
 80018ca:	4613      	mov	r3, r2
 80018cc:	713b      	strb	r3, [r7, #4]
	Gfx_DrawDigit( 10, 230, front_left / 10, 25, COLOR_CYAN);
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	4a41      	ldr	r2, [pc, #260]	; (80019d8 <UI_Update_WheelTemps+0x128>)
 80018d2:	fba2 2303 	umull	r2, r3, r2, r3
 80018d6:	08db      	lsrs	r3, r3, #3
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	231a      	movs	r3, #26
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	2319      	movs	r3, #25
 80018e0:	21e6      	movs	r1, #230	; 0xe6
 80018e2:	200a      	movs	r0, #10
 80018e4:	f7ff f914 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawDigit( 30, 230, front_left % 10, 25, COLOR_CYAN);
 80018e8:	79fa      	ldrb	r2, [r7, #7]
 80018ea:	4b3b      	ldr	r3, [pc, #236]	; (80019d8 <UI_Update_WheelTemps+0x128>)
 80018ec:	fba3 1302 	umull	r1, r3, r3, r2
 80018f0:	08d9      	lsrs	r1, r3, #3
 80018f2:	460b      	mov	r3, r1
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	440b      	add	r3, r1
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	231a      	movs	r3, #26
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	2319      	movs	r3, #25
 8001904:	21e6      	movs	r1, #230	; 0xe6
 8001906:	201e      	movs	r0, #30
 8001908:	f7ff f902 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawDigit( 90, 230, front_right / 10, 25, COLOR_CYAN);
 800190c:	79bb      	ldrb	r3, [r7, #6]
 800190e:	4a32      	ldr	r2, [pc, #200]	; (80019d8 <UI_Update_WheelTemps+0x128>)
 8001910:	fba2 2303 	umull	r2, r3, r2, r3
 8001914:	08db      	lsrs	r3, r3, #3
 8001916:	b2da      	uxtb	r2, r3
 8001918:	231a      	movs	r3, #26
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	2319      	movs	r3, #25
 800191e:	21e6      	movs	r1, #230	; 0xe6
 8001920:	205a      	movs	r0, #90	; 0x5a
 8001922:	f7ff f8f5 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawDigit(110, 230, front_right % 10, 25, COLOR_CYAN);
 8001926:	79ba      	ldrb	r2, [r7, #6]
 8001928:	4b2b      	ldr	r3, [pc, #172]	; (80019d8 <UI_Update_WheelTemps+0x128>)
 800192a:	fba3 1302 	umull	r1, r3, r3, r2
 800192e:	08d9      	lsrs	r1, r3, #3
 8001930:	460b      	mov	r3, r1
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	b2da      	uxtb	r2, r3
 800193c:	231a      	movs	r3, #26
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	2319      	movs	r3, #25
 8001942:	21e6      	movs	r1, #230	; 0xe6
 8001944:	206e      	movs	r0, #110	; 0x6e
 8001946:	f7ff f8e3 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawDigit( 10, 280, back_left / 10, 25, COLOR_CYAN);
 800194a:	797b      	ldrb	r3, [r7, #5]
 800194c:	4a22      	ldr	r2, [pc, #136]	; (80019d8 <UI_Update_WheelTemps+0x128>)
 800194e:	fba2 2303 	umull	r2, r3, r2, r3
 8001952:	08db      	lsrs	r3, r3, #3
 8001954:	b2da      	uxtb	r2, r3
 8001956:	231a      	movs	r3, #26
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2319      	movs	r3, #25
 800195c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001960:	200a      	movs	r0, #10
 8001962:	f7ff f8d5 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawDigit( 30, 280, back_left % 10, 25, COLOR_CYAN);
 8001966:	797a      	ldrb	r2, [r7, #5]
 8001968:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <UI_Update_WheelTemps+0x128>)
 800196a:	fba3 1302 	umull	r1, r3, r3, r2
 800196e:	08d9      	lsrs	r1, r3, #3
 8001970:	460b      	mov	r3, r1
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	b2da      	uxtb	r2, r3
 800197c:	231a      	movs	r3, #26
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	2319      	movs	r3, #25
 8001982:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001986:	201e      	movs	r0, #30
 8001988:	f7ff f8c2 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawDigit( 90, 280, back_right / 10, 25, COLOR_CYAN);
 800198c:	793b      	ldrb	r3, [r7, #4]
 800198e:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <UI_Update_WheelTemps+0x128>)
 8001990:	fba2 2303 	umull	r2, r3, r2, r3
 8001994:	08db      	lsrs	r3, r3, #3
 8001996:	b2da      	uxtb	r2, r3
 8001998:	231a      	movs	r3, #26
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	2319      	movs	r3, #25
 800199e:	f44f 718c 	mov.w	r1, #280	; 0x118
 80019a2:	205a      	movs	r0, #90	; 0x5a
 80019a4:	f7ff f8b4 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawDigit(110, 280, back_right % 10, 25, COLOR_CYAN);
 80019a8:	793a      	ldrb	r2, [r7, #4]
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <UI_Update_WheelTemps+0x128>)
 80019ac:	fba3 1302 	umull	r1, r3, r3, r2
 80019b0:	08d9      	lsrs	r1, r3, #3
 80019b2:	460b      	mov	r3, r1
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	440b      	add	r3, r1
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	231a      	movs	r3, #26
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	2319      	movs	r3, #25
 80019c4:	f44f 718c 	mov.w	r1, #280	; 0x118
 80019c8:	206e      	movs	r0, #110	; 0x6e
 80019ca:	f7ff f8a1 	bl	8000b10 <Gfx_DrawDigit>
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd90      	pop	{r4, r7, pc}
 80019d6:	bf00      	nop
 80019d8:	cccccccd 	.word	0xcccccccd

080019dc <UI_Update_Speedometer>:

void UI_Update_Speedometer(uint8_t speed) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af02      	add	r7, sp, #8
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
	Gfx_DrawDigit(150, 70, speed / 10, 120, COLOR_YELLOW);
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	4a10      	ldr	r2, [pc, #64]	; (8001a2c <UI_Update_Speedometer+0x50>)
 80019ea:	fba2 2303 	umull	r2, r3, r2, r3
 80019ee:	08db      	lsrs	r3, r3, #3
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	2336      	movs	r3, #54	; 0x36
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	2378      	movs	r3, #120	; 0x78
 80019f8:	2146      	movs	r1, #70	; 0x46
 80019fa:	2096      	movs	r0, #150	; 0x96
 80019fc:	f7ff f888 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawDigit(240, 70, speed % 10, 120, COLOR_YELLOW);
 8001a00:	79fa      	ldrb	r2, [r7, #7]
 8001a02:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <UI_Update_Speedometer+0x50>)
 8001a04:	fba3 1302 	umull	r1, r3, r3, r2
 8001a08:	08d9      	lsrs	r1, r3, #3
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	440b      	add	r3, r1
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	2336      	movs	r3, #54	; 0x36
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2378      	movs	r3, #120	; 0x78
 8001a1c:	2146      	movs	r1, #70	; 0x46
 8001a1e:	20f0      	movs	r0, #240	; 0xf0
 8001a20:	f7ff f876 	bl	8000b10 <Gfx_DrawDigit>
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	cccccccd 	.word	0xcccccccd

08001a30 <UI_Update_CoolingTemp>:

void UI_Update_CoolingTemp(uint8_t temp) {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af02      	add	r7, sp, #8
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
	Gfx_DrawDigit(60, 20, temp / 10, 25, COLOR_CYAN);
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	4a10      	ldr	r2, [pc, #64]	; (8001a80 <UI_Update_CoolingTemp+0x50>)
 8001a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a42:	08db      	lsrs	r3, r3, #3
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	231a      	movs	r3, #26
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2319      	movs	r3, #25
 8001a4c:	2114      	movs	r1, #20
 8001a4e:	203c      	movs	r0, #60	; 0x3c
 8001a50:	f7ff f85e 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawDigit(80, 20, temp % 10, 25, COLOR_CYAN);
 8001a54:	79fa      	ldrb	r2, [r7, #7]
 8001a56:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <UI_Update_CoolingTemp+0x50>)
 8001a58:	fba3 1302 	umull	r1, r3, r3, r2
 8001a5c:	08d9      	lsrs	r1, r3, #3
 8001a5e:	460b      	mov	r3, r1
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	440b      	add	r3, r1
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	231a      	movs	r3, #26
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2319      	movs	r3, #25
 8001a70:	2114      	movs	r1, #20
 8001a72:	2050      	movs	r0, #80	; 0x50
 8001a74:	f7ff f84c 	bl	8000b10 <Gfx_DrawDigit>
}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	cccccccd 	.word	0xcccccccd

08001a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001abc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a88:	480d      	ldr	r0, [pc, #52]	; (8001ac0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a8a:	490e      	ldr	r1, [pc, #56]	; (8001ac4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a8c:	4a0e      	ldr	r2, [pc, #56]	; (8001ac8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a90:	e002      	b.n	8001a98 <LoopCopyDataInit>

08001a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a96:	3304      	adds	r3, #4

08001a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a9c:	d3f9      	bcc.n	8001a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9e:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001aa0:	4c0b      	ldr	r4, [pc, #44]	; (8001ad0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa4:	e001      	b.n	8001aaa <LoopFillZerobss>

08001aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa8:	3204      	adds	r2, #4

08001aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aac:	d3fb      	bcc.n	8001aa6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001aae:	f7ff fd55 	bl	800155c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ab2:	f002 fb55 	bl	8004160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ab6:	f7ff fbc7 	bl	8001248 <main>
  bx  lr    
 8001aba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001abc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac4:	20012c30 	.word	0x20012c30
  ldr r2, =_sidata
 8001ac8:	08004204 	.word	0x08004204
  ldr r2, =_sbss
 8001acc:	20012c30 	.word	0x20012c30
  ldr r4, =_ebss
 8001ad0:	20012da0 	.word	0x20012da0

08001ad4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad4:	e7fe      	b.n	8001ad4 <ADC_IRQHandler>
	...

08001ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001adc:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <HAL_Init+0x40>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a0d      	ldr	r2, [pc, #52]	; (8001b18 <HAL_Init+0x40>)
 8001ae2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ae6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <HAL_Init+0x40>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <HAL_Init+0x40>)
 8001aee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001af2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af4:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <HAL_Init+0x40>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a07      	ldr	r2, [pc, #28]	; (8001b18 <HAL_Init+0x40>)
 8001afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001afe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b00:	2003      	movs	r0, #3
 8001b02:	f000 f94f 	bl	8001da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b06:	2000      	movs	r0, #0
 8001b08:	f000 f808 	bl	8001b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b0c:	f7ff fbbc 	bl	8001288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023c00 	.word	0x40023c00

08001b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_InitTick+0x54>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_InitTick+0x58>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f967 	bl	8001e0e <HAL_SYSTICK_Config>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e00e      	b.n	8001b68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b0f      	cmp	r3, #15
 8001b4e:	d80a      	bhi.n	8001b66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b50:	2200      	movs	r2, #0
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	f04f 30ff 	mov.w	r0, #4294967295
 8001b58:	f000 f92f 	bl	8001dba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b5c:	4a06      	ldr	r2, [pc, #24]	; (8001b78 <HAL_InitTick+0x5c>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
 8001b64:	e000      	b.n	8001b68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20012c14 	.word	0x20012c14
 8001b74:	20012c2c 	.word	0x20012c2c
 8001b78:	20012c28 	.word	0x20012c28

08001b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <HAL_IncTick+0x20>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_IncTick+0x24>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <HAL_IncTick+0x24>)
 8001b8e:	6013      	str	r3, [r2, #0]
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20012c2c 	.word	0x20012c2c
 8001ba0:	20012d9c 	.word	0x20012d9c

08001ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba8:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <HAL_GetTick+0x14>)
 8001baa:	681b      	ldr	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20012d9c 	.word	0x20012d9c

08001bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc4:	f7ff ffee 	bl	8001ba4 <HAL_GetTick>
 8001bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd4:	d005      	beq.n	8001be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <HAL_Delay+0x44>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4413      	add	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001be2:	bf00      	nop
 8001be4:	f7ff ffde 	bl	8001ba4 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d8f7      	bhi.n	8001be4 <HAL_Delay+0x28>
  {
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20012c2c 	.word	0x20012c2c

08001c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c20:	4013      	ands	r3, r2
 8001c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c36:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	60d3      	str	r3, [r2, #12]
}
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c50:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <__NVIC_GetPriorityGrouping+0x18>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	0a1b      	lsrs	r3, r3, #8
 8001c56:	f003 0307 	and.w	r3, r3, #7
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	db0b      	blt.n	8001c92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	f003 021f 	and.w	r2, r3, #31
 8001c80:	4907      	ldr	r1, [pc, #28]	; (8001ca0 <__NVIC_EnableIRQ+0x38>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	095b      	lsrs	r3, r3, #5
 8001c88:	2001      	movs	r0, #1
 8001c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000e100 	.word	0xe000e100

08001ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	6039      	str	r1, [r7, #0]
 8001cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	db0a      	blt.n	8001cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	490c      	ldr	r1, [pc, #48]	; (8001cf0 <__NVIC_SetPriority+0x4c>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	0112      	lsls	r2, r2, #4
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ccc:	e00a      	b.n	8001ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4908      	ldr	r1, [pc, #32]	; (8001cf4 <__NVIC_SetPriority+0x50>)
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	3b04      	subs	r3, #4
 8001cdc:	0112      	lsls	r2, r2, #4
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	761a      	strb	r2, [r3, #24]
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000e100 	.word	0xe000e100
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b089      	sub	sp, #36	; 0x24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f1c3 0307 	rsb	r3, r3, #7
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	bf28      	it	cs
 8001d16:	2304      	movcs	r3, #4
 8001d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	2b06      	cmp	r3, #6
 8001d20:	d902      	bls.n	8001d28 <NVIC_EncodePriority+0x30>
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3b03      	subs	r3, #3
 8001d26:	e000      	b.n	8001d2a <NVIC_EncodePriority+0x32>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43da      	mvns	r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d40:	f04f 31ff 	mov.w	r1, #4294967295
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4a:	43d9      	mvns	r1, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d50:	4313      	orrs	r3, r2
         );
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3724      	adds	r7, #36	; 0x24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d70:	d301      	bcc.n	8001d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d72:	2301      	movs	r3, #1
 8001d74:	e00f      	b.n	8001d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d76:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <SysTick_Config+0x40>)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d7e:	210f      	movs	r1, #15
 8001d80:	f04f 30ff 	mov.w	r0, #4294967295
 8001d84:	f7ff ff8e 	bl	8001ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <SysTick_Config+0x40>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d8e:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <SysTick_Config+0x40>)
 8001d90:	2207      	movs	r2, #7
 8001d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	e000e010 	.word	0xe000e010

08001da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ff29 	bl	8001c04 <__NVIC_SetPriorityGrouping>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dcc:	f7ff ff3e 	bl	8001c4c <__NVIC_GetPriorityGrouping>
 8001dd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68b9      	ldr	r1, [r7, #8]
 8001dd6:	6978      	ldr	r0, [r7, #20]
 8001dd8:	f7ff ff8e 	bl	8001cf8 <NVIC_EncodePriority>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff5d 	bl	8001ca4 <__NVIC_SetPriority>
}
 8001dea:	bf00      	nop
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff31 	bl	8001c68 <__NVIC_EnableIRQ>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff ffa2 	bl	8001d60 <SysTick_Config>
 8001e1c:	4603      	mov	r3, r0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b089      	sub	sp, #36	; 0x24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61fb      	str	r3, [r7, #28]
 8001e42:	e165      	b.n	8002110 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e44:	2201      	movs	r2, #1
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	f040 8154 	bne.w	800210a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d005      	beq.n	8001e7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d130      	bne.n	8001edc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	2203      	movs	r2, #3
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	091b      	lsrs	r3, r3, #4
 8001ec6:	f003 0201 	and.w	r2, r3, #1
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d017      	beq.n	8001f18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d123      	bne.n	8001f6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	08da      	lsrs	r2, r3, #3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3208      	adds	r2, #8
 8001f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	220f      	movs	r2, #15
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	08da      	lsrs	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3208      	adds	r2, #8
 8001f66:	69b9      	ldr	r1, [r7, #24]
 8001f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	2203      	movs	r2, #3
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0203 	and.w	r2, r3, #3
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 80ae 	beq.w	800210a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	4b5d      	ldr	r3, [pc, #372]	; (8002128 <HAL_GPIO_Init+0x300>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	4a5c      	ldr	r2, [pc, #368]	; (8002128 <HAL_GPIO_Init+0x300>)
 8001fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fbe:	4b5a      	ldr	r3, [pc, #360]	; (8002128 <HAL_GPIO_Init+0x300>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fca:	4a58      	ldr	r2, [pc, #352]	; (800212c <HAL_GPIO_Init+0x304>)
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	089b      	lsrs	r3, r3, #2
 8001fd0:	3302      	adds	r3, #2
 8001fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	220f      	movs	r2, #15
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a4f      	ldr	r2, [pc, #316]	; (8002130 <HAL_GPIO_Init+0x308>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d025      	beq.n	8002042 <HAL_GPIO_Init+0x21a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a4e      	ldr	r2, [pc, #312]	; (8002134 <HAL_GPIO_Init+0x30c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d01f      	beq.n	800203e <HAL_GPIO_Init+0x216>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a4d      	ldr	r2, [pc, #308]	; (8002138 <HAL_GPIO_Init+0x310>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d019      	beq.n	800203a <HAL_GPIO_Init+0x212>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a4c      	ldr	r2, [pc, #304]	; (800213c <HAL_GPIO_Init+0x314>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d013      	beq.n	8002036 <HAL_GPIO_Init+0x20e>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a4b      	ldr	r2, [pc, #300]	; (8002140 <HAL_GPIO_Init+0x318>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d00d      	beq.n	8002032 <HAL_GPIO_Init+0x20a>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a4a      	ldr	r2, [pc, #296]	; (8002144 <HAL_GPIO_Init+0x31c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d007      	beq.n	800202e <HAL_GPIO_Init+0x206>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a49      	ldr	r2, [pc, #292]	; (8002148 <HAL_GPIO_Init+0x320>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d101      	bne.n	800202a <HAL_GPIO_Init+0x202>
 8002026:	2306      	movs	r3, #6
 8002028:	e00c      	b.n	8002044 <HAL_GPIO_Init+0x21c>
 800202a:	2307      	movs	r3, #7
 800202c:	e00a      	b.n	8002044 <HAL_GPIO_Init+0x21c>
 800202e:	2305      	movs	r3, #5
 8002030:	e008      	b.n	8002044 <HAL_GPIO_Init+0x21c>
 8002032:	2304      	movs	r3, #4
 8002034:	e006      	b.n	8002044 <HAL_GPIO_Init+0x21c>
 8002036:	2303      	movs	r3, #3
 8002038:	e004      	b.n	8002044 <HAL_GPIO_Init+0x21c>
 800203a:	2302      	movs	r3, #2
 800203c:	e002      	b.n	8002044 <HAL_GPIO_Init+0x21c>
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <HAL_GPIO_Init+0x21c>
 8002042:	2300      	movs	r3, #0
 8002044:	69fa      	ldr	r2, [r7, #28]
 8002046:	f002 0203 	and.w	r2, r2, #3
 800204a:	0092      	lsls	r2, r2, #2
 800204c:	4093      	lsls	r3, r2
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4313      	orrs	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002054:	4935      	ldr	r1, [pc, #212]	; (800212c <HAL_GPIO_Init+0x304>)
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	089b      	lsrs	r3, r3, #2
 800205a:	3302      	adds	r3, #2
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002062:	4b3a      	ldr	r3, [pc, #232]	; (800214c <HAL_GPIO_Init+0x324>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002086:	4a31      	ldr	r2, [pc, #196]	; (800214c <HAL_GPIO_Init+0x324>)
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800208c:	4b2f      	ldr	r3, [pc, #188]	; (800214c <HAL_GPIO_Init+0x324>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020b0:	4a26      	ldr	r2, [pc, #152]	; (800214c <HAL_GPIO_Init+0x324>)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020b6:	4b25      	ldr	r3, [pc, #148]	; (800214c <HAL_GPIO_Init+0x324>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	43db      	mvns	r3, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4013      	ands	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020da:	4a1c      	ldr	r2, [pc, #112]	; (800214c <HAL_GPIO_Init+0x324>)
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020e0:	4b1a      	ldr	r3, [pc, #104]	; (800214c <HAL_GPIO_Init+0x324>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002104:	4a11      	ldr	r2, [pc, #68]	; (800214c <HAL_GPIO_Init+0x324>)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3301      	adds	r3, #1
 800210e:	61fb      	str	r3, [r7, #28]
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	2b0f      	cmp	r3, #15
 8002114:	f67f ae96 	bls.w	8001e44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002118:	bf00      	nop
 800211a:	bf00      	nop
 800211c:	3724      	adds	r7, #36	; 0x24
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40023800 	.word	0x40023800
 800212c:	40013800 	.word	0x40013800
 8002130:	40020000 	.word	0x40020000
 8002134:	40020400 	.word	0x40020400
 8002138:	40020800 	.word	0x40020800
 800213c:	40020c00 	.word	0x40020c00
 8002140:	40021000 	.word	0x40021000
 8002144:	40021400 	.word	0x40021400
 8002148:	40021800 	.word	0x40021800
 800214c:	40013c00 	.word	0x40013c00

08002150 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	887b      	ldrh	r3, [r7, #2]
 8002162:	4013      	ands	r3, r2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d002      	beq.n	800216e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002168:	2301      	movs	r3, #1
 800216a:	73fb      	strb	r3, [r7, #15]
 800216c:	e001      	b.n	8002172 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800216e:	2300      	movs	r3, #0
 8002170:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002172:	7bfb      	ldrb	r3, [r7, #15]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	807b      	strh	r3, [r7, #2]
 800218c:	4613      	mov	r3, r2
 800218e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002190:	787b      	ldrb	r3, [r7, #1]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002196:	887a      	ldrh	r2, [r7, #2]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800219c:	e003      	b.n	80021a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800219e:	887b      	ldrh	r3, [r7, #2]
 80021a0:	041a      	lsls	r2, r3, #16
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	619a      	str	r2, [r3, #24]
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b085      	sub	sp, #20
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	460b      	mov	r3, r1
 80021bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021c4:	887a      	ldrh	r2, [r7, #2]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4013      	ands	r3, r2
 80021ca:	041a      	lsls	r2, r3, #16
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	43d9      	mvns	r1, r3
 80021d0:	887b      	ldrh	r3, [r7, #2]
 80021d2:	400b      	ands	r3, r1
 80021d4:	431a      	orrs	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	619a      	str	r2, [r3, #24]
}
 80021da:	bf00      	nop
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
	...

080021e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e0cc      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021fc:	4b68      	ldr	r3, [pc, #416]	; (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 030f 	and.w	r3, r3, #15
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d90c      	bls.n	8002224 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220a:	4b65      	ldr	r3, [pc, #404]	; (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002212:	4b63      	ldr	r3, [pc, #396]	; (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	d001      	beq.n	8002224 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e0b8      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d020      	beq.n	8002272 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800223c:	4b59      	ldr	r3, [pc, #356]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	4a58      	ldr	r2, [pc, #352]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002246:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002254:	4b53      	ldr	r3, [pc, #332]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	4a52      	ldr	r2, [pc, #328]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800225e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002260:	4b50      	ldr	r3, [pc, #320]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	494d      	ldr	r1, [pc, #308]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	4313      	orrs	r3, r2
 8002270:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d044      	beq.n	8002308 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d107      	bne.n	8002296 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002286:	4b47      	ldr	r3, [pc, #284]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d119      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e07f      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d003      	beq.n	80022a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d107      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a6:	4b3f      	ldr	r3, [pc, #252]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d109      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e06f      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b6:	4b3b      	ldr	r3, [pc, #236]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e067      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022c6:	4b37      	ldr	r3, [pc, #220]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f023 0203 	bic.w	r2, r3, #3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	4934      	ldr	r1, [pc, #208]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d8:	f7ff fc64 	bl	8001ba4 <HAL_GetTick>
 80022dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022de:	e00a      	b.n	80022f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e0:	f7ff fc60 	bl	8001ba4 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e04f      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f6:	4b2b      	ldr	r3, [pc, #172]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 020c 	and.w	r2, r3, #12
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	429a      	cmp	r2, r3
 8002306:	d1eb      	bne.n	80022e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002308:	4b25      	ldr	r3, [pc, #148]	; (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 030f 	and.w	r3, r3, #15
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d20c      	bcs.n	8002330 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002316:	4b22      	ldr	r3, [pc, #136]	; (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	4b20      	ldr	r3, [pc, #128]	; (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e032      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d008      	beq.n	800234e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800233c:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	4916      	ldr	r1, [pc, #88]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	4313      	orrs	r3, r2
 800234c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d009      	beq.n	800236e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800235a:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	490e      	ldr	r1, [pc, #56]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	4313      	orrs	r3, r2
 800236c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800236e:	f000 f855 	bl	800241c <HAL_RCC_GetSysClockFreq>
 8002372:	4602      	mov	r2, r0
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	490a      	ldr	r1, [pc, #40]	; (80023a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002380:	5ccb      	ldrb	r3, [r1, r3]
 8002382:	fa22 f303 	lsr.w	r3, r2, r3
 8002386:	4a09      	ldr	r2, [pc, #36]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 8002388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <HAL_RCC_ClockConfig+0x1c8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff fbc4 	bl	8001b1c <HAL_InitTick>

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40023c00 	.word	0x40023c00
 80023a4:	40023800 	.word	0x40023800
 80023a8:	080041dc 	.word	0x080041dc
 80023ac:	20012c14 	.word	0x20012c14
 80023b0:	20012c28 	.word	0x20012c28

080023b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b8:	4b03      	ldr	r3, [pc, #12]	; (80023c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023ba:	681b      	ldr	r3, [r3, #0]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	20012c14 	.word	0x20012c14

080023cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023d0:	f7ff fff0 	bl	80023b4 <HAL_RCC_GetHCLKFreq>
 80023d4:	4602      	mov	r2, r0
 80023d6:	4b05      	ldr	r3, [pc, #20]	; (80023ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	0a9b      	lsrs	r3, r3, #10
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	4903      	ldr	r1, [pc, #12]	; (80023f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023e2:	5ccb      	ldrb	r3, [r1, r3]
 80023e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40023800 	.word	0x40023800
 80023f0:	080041ec 	.word	0x080041ec

080023f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023f8:	f7ff ffdc 	bl	80023b4 <HAL_RCC_GetHCLKFreq>
 80023fc:	4602      	mov	r2, r0
 80023fe:	4b05      	ldr	r3, [pc, #20]	; (8002414 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	0b5b      	lsrs	r3, r3, #13
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	4903      	ldr	r1, [pc, #12]	; (8002418 <HAL_RCC_GetPCLK2Freq+0x24>)
 800240a:	5ccb      	ldrb	r3, [r1, r3]
 800240c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002410:	4618      	mov	r0, r3
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40023800 	.word	0x40023800
 8002418:	080041ec 	.word	0x080041ec

0800241c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800241c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002420:	b0ae      	sub	sp, #184	; 0xb8
 8002422:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002430:	2300      	movs	r3, #0
 8002432:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002436:	2300      	movs	r3, #0
 8002438:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002442:	4bcb      	ldr	r3, [pc, #812]	; (8002770 <HAL_RCC_GetSysClockFreq+0x354>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 030c 	and.w	r3, r3, #12
 800244a:	2b0c      	cmp	r3, #12
 800244c:	f200 8206 	bhi.w	800285c <HAL_RCC_GetSysClockFreq+0x440>
 8002450:	a201      	add	r2, pc, #4	; (adr r2, 8002458 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002456:	bf00      	nop
 8002458:	0800248d 	.word	0x0800248d
 800245c:	0800285d 	.word	0x0800285d
 8002460:	0800285d 	.word	0x0800285d
 8002464:	0800285d 	.word	0x0800285d
 8002468:	08002495 	.word	0x08002495
 800246c:	0800285d 	.word	0x0800285d
 8002470:	0800285d 	.word	0x0800285d
 8002474:	0800285d 	.word	0x0800285d
 8002478:	0800249d 	.word	0x0800249d
 800247c:	0800285d 	.word	0x0800285d
 8002480:	0800285d 	.word	0x0800285d
 8002484:	0800285d 	.word	0x0800285d
 8002488:	0800268d 	.word	0x0800268d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800248c:	4bb9      	ldr	r3, [pc, #740]	; (8002774 <HAL_RCC_GetSysClockFreq+0x358>)
 800248e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002492:	e1e7      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002494:	4bb8      	ldr	r3, [pc, #736]	; (8002778 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002496:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800249a:	e1e3      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800249c:	4bb4      	ldr	r3, [pc, #720]	; (8002770 <HAL_RCC_GetSysClockFreq+0x354>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024a8:	4bb1      	ldr	r3, [pc, #708]	; (8002770 <HAL_RCC_GetSysClockFreq+0x354>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d071      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024b4:	4bae      	ldr	r3, [pc, #696]	; (8002770 <HAL_RCC_GetSysClockFreq+0x354>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	099b      	lsrs	r3, r3, #6
 80024ba:	2200      	movs	r2, #0
 80024bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80024c0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80024c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80024d0:	2300      	movs	r3, #0
 80024d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80024d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80024da:	4622      	mov	r2, r4
 80024dc:	462b      	mov	r3, r5
 80024de:	f04f 0000 	mov.w	r0, #0
 80024e2:	f04f 0100 	mov.w	r1, #0
 80024e6:	0159      	lsls	r1, r3, #5
 80024e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024ec:	0150      	lsls	r0, r2, #5
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4621      	mov	r1, r4
 80024f4:	1a51      	subs	r1, r2, r1
 80024f6:	6439      	str	r1, [r7, #64]	; 0x40
 80024f8:	4629      	mov	r1, r5
 80024fa:	eb63 0301 	sbc.w	r3, r3, r1
 80024fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800250c:	4649      	mov	r1, r9
 800250e:	018b      	lsls	r3, r1, #6
 8002510:	4641      	mov	r1, r8
 8002512:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002516:	4641      	mov	r1, r8
 8002518:	018a      	lsls	r2, r1, #6
 800251a:	4641      	mov	r1, r8
 800251c:	1a51      	subs	r1, r2, r1
 800251e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002520:	4649      	mov	r1, r9
 8002522:	eb63 0301 	sbc.w	r3, r3, r1
 8002526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002534:	4649      	mov	r1, r9
 8002536:	00cb      	lsls	r3, r1, #3
 8002538:	4641      	mov	r1, r8
 800253a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800253e:	4641      	mov	r1, r8
 8002540:	00ca      	lsls	r2, r1, #3
 8002542:	4610      	mov	r0, r2
 8002544:	4619      	mov	r1, r3
 8002546:	4603      	mov	r3, r0
 8002548:	4622      	mov	r2, r4
 800254a:	189b      	adds	r3, r3, r2
 800254c:	633b      	str	r3, [r7, #48]	; 0x30
 800254e:	462b      	mov	r3, r5
 8002550:	460a      	mov	r2, r1
 8002552:	eb42 0303 	adc.w	r3, r2, r3
 8002556:	637b      	str	r3, [r7, #52]	; 0x34
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002564:	4629      	mov	r1, r5
 8002566:	024b      	lsls	r3, r1, #9
 8002568:	4621      	mov	r1, r4
 800256a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800256e:	4621      	mov	r1, r4
 8002570:	024a      	lsls	r2, r1, #9
 8002572:	4610      	mov	r0, r2
 8002574:	4619      	mov	r1, r3
 8002576:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800257a:	2200      	movs	r2, #0
 800257c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002580:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002584:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002588:	f7fd fe3c 	bl	8000204 <__aeabi_uldivmod>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4613      	mov	r3, r2
 8002592:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002596:	e067      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002598:	4b75      	ldr	r3, [pc, #468]	; (8002770 <HAL_RCC_GetSysClockFreq+0x354>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	099b      	lsrs	r3, r3, #6
 800259e:	2200      	movs	r2, #0
 80025a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025a4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80025a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80025b2:	2300      	movs	r3, #0
 80025b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025b6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80025ba:	4622      	mov	r2, r4
 80025bc:	462b      	mov	r3, r5
 80025be:	f04f 0000 	mov.w	r0, #0
 80025c2:	f04f 0100 	mov.w	r1, #0
 80025c6:	0159      	lsls	r1, r3, #5
 80025c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025cc:	0150      	lsls	r0, r2, #5
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	4621      	mov	r1, r4
 80025d4:	1a51      	subs	r1, r2, r1
 80025d6:	62b9      	str	r1, [r7, #40]	; 0x28
 80025d8:	4629      	mov	r1, r5
 80025da:	eb63 0301 	sbc.w	r3, r3, r1
 80025de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	f04f 0300 	mov.w	r3, #0
 80025e8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80025ec:	4649      	mov	r1, r9
 80025ee:	018b      	lsls	r3, r1, #6
 80025f0:	4641      	mov	r1, r8
 80025f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025f6:	4641      	mov	r1, r8
 80025f8:	018a      	lsls	r2, r1, #6
 80025fa:	4641      	mov	r1, r8
 80025fc:	ebb2 0a01 	subs.w	sl, r2, r1
 8002600:	4649      	mov	r1, r9
 8002602:	eb63 0b01 	sbc.w	fp, r3, r1
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	f04f 0300 	mov.w	r3, #0
 800260e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002612:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002616:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800261a:	4692      	mov	sl, r2
 800261c:	469b      	mov	fp, r3
 800261e:	4623      	mov	r3, r4
 8002620:	eb1a 0303 	adds.w	r3, sl, r3
 8002624:	623b      	str	r3, [r7, #32]
 8002626:	462b      	mov	r3, r5
 8002628:	eb4b 0303 	adc.w	r3, fp, r3
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	f04f 0300 	mov.w	r3, #0
 8002636:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800263a:	4629      	mov	r1, r5
 800263c:	028b      	lsls	r3, r1, #10
 800263e:	4621      	mov	r1, r4
 8002640:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002644:	4621      	mov	r1, r4
 8002646:	028a      	lsls	r2, r1, #10
 8002648:	4610      	mov	r0, r2
 800264a:	4619      	mov	r1, r3
 800264c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002650:	2200      	movs	r2, #0
 8002652:	673b      	str	r3, [r7, #112]	; 0x70
 8002654:	677a      	str	r2, [r7, #116]	; 0x74
 8002656:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800265a:	f7fd fdd3 	bl	8000204 <__aeabi_uldivmod>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4613      	mov	r3, r2
 8002664:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002668:	4b41      	ldr	r3, [pc, #260]	; (8002770 <HAL_RCC_GetSysClockFreq+0x354>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	0c1b      	lsrs	r3, r3, #16
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	3301      	adds	r3, #1
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800267a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800267e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002682:	fbb2 f3f3 	udiv	r3, r2, r3
 8002686:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800268a:	e0eb      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800268c:	4b38      	ldr	r3, [pc, #224]	; (8002770 <HAL_RCC_GetSysClockFreq+0x354>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002694:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002698:	4b35      	ldr	r3, [pc, #212]	; (8002770 <HAL_RCC_GetSysClockFreq+0x354>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d06b      	beq.n	800277c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026a4:	4b32      	ldr	r3, [pc, #200]	; (8002770 <HAL_RCC_GetSysClockFreq+0x354>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	099b      	lsrs	r3, r3, #6
 80026aa:	2200      	movs	r2, #0
 80026ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80026ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80026b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026b6:	663b      	str	r3, [r7, #96]	; 0x60
 80026b8:	2300      	movs	r3, #0
 80026ba:	667b      	str	r3, [r7, #100]	; 0x64
 80026bc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80026c0:	4622      	mov	r2, r4
 80026c2:	462b      	mov	r3, r5
 80026c4:	f04f 0000 	mov.w	r0, #0
 80026c8:	f04f 0100 	mov.w	r1, #0
 80026cc:	0159      	lsls	r1, r3, #5
 80026ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026d2:	0150      	lsls	r0, r2, #5
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4621      	mov	r1, r4
 80026da:	1a51      	subs	r1, r2, r1
 80026dc:	61b9      	str	r1, [r7, #24]
 80026de:	4629      	mov	r1, r5
 80026e0:	eb63 0301 	sbc.w	r3, r3, r1
 80026e4:	61fb      	str	r3, [r7, #28]
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	f04f 0300 	mov.w	r3, #0
 80026ee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80026f2:	4659      	mov	r1, fp
 80026f4:	018b      	lsls	r3, r1, #6
 80026f6:	4651      	mov	r1, sl
 80026f8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026fc:	4651      	mov	r1, sl
 80026fe:	018a      	lsls	r2, r1, #6
 8002700:	4651      	mov	r1, sl
 8002702:	ebb2 0801 	subs.w	r8, r2, r1
 8002706:	4659      	mov	r1, fp
 8002708:	eb63 0901 	sbc.w	r9, r3, r1
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002718:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800271c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002720:	4690      	mov	r8, r2
 8002722:	4699      	mov	r9, r3
 8002724:	4623      	mov	r3, r4
 8002726:	eb18 0303 	adds.w	r3, r8, r3
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	462b      	mov	r3, r5
 800272e:	eb49 0303 	adc.w	r3, r9, r3
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002740:	4629      	mov	r1, r5
 8002742:	024b      	lsls	r3, r1, #9
 8002744:	4621      	mov	r1, r4
 8002746:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800274a:	4621      	mov	r1, r4
 800274c:	024a      	lsls	r2, r1, #9
 800274e:	4610      	mov	r0, r2
 8002750:	4619      	mov	r1, r3
 8002752:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002756:	2200      	movs	r2, #0
 8002758:	65bb      	str	r3, [r7, #88]	; 0x58
 800275a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800275c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002760:	f7fd fd50 	bl	8000204 <__aeabi_uldivmod>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4613      	mov	r3, r2
 800276a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800276e:	e065      	b.n	800283c <HAL_RCC_GetSysClockFreq+0x420>
 8002770:	40023800 	.word	0x40023800
 8002774:	00f42400 	.word	0x00f42400
 8002778:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800277c:	4b3d      	ldr	r3, [pc, #244]	; (8002874 <HAL_RCC_GetSysClockFreq+0x458>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	099b      	lsrs	r3, r3, #6
 8002782:	2200      	movs	r2, #0
 8002784:	4618      	mov	r0, r3
 8002786:	4611      	mov	r1, r2
 8002788:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800278c:	653b      	str	r3, [r7, #80]	; 0x50
 800278e:	2300      	movs	r3, #0
 8002790:	657b      	str	r3, [r7, #84]	; 0x54
 8002792:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002796:	4642      	mov	r2, r8
 8002798:	464b      	mov	r3, r9
 800279a:	f04f 0000 	mov.w	r0, #0
 800279e:	f04f 0100 	mov.w	r1, #0
 80027a2:	0159      	lsls	r1, r3, #5
 80027a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027a8:	0150      	lsls	r0, r2, #5
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4641      	mov	r1, r8
 80027b0:	1a51      	subs	r1, r2, r1
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	4649      	mov	r1, r9
 80027b6:	eb63 0301 	sbc.w	r3, r3, r1
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80027c8:	4659      	mov	r1, fp
 80027ca:	018b      	lsls	r3, r1, #6
 80027cc:	4651      	mov	r1, sl
 80027ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027d2:	4651      	mov	r1, sl
 80027d4:	018a      	lsls	r2, r1, #6
 80027d6:	4651      	mov	r1, sl
 80027d8:	1a54      	subs	r4, r2, r1
 80027da:	4659      	mov	r1, fp
 80027dc:	eb63 0501 	sbc.w	r5, r3, r1
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	f04f 0300 	mov.w	r3, #0
 80027e8:	00eb      	lsls	r3, r5, #3
 80027ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027ee:	00e2      	lsls	r2, r4, #3
 80027f0:	4614      	mov	r4, r2
 80027f2:	461d      	mov	r5, r3
 80027f4:	4643      	mov	r3, r8
 80027f6:	18e3      	adds	r3, r4, r3
 80027f8:	603b      	str	r3, [r7, #0]
 80027fa:	464b      	mov	r3, r9
 80027fc:	eb45 0303 	adc.w	r3, r5, r3
 8002800:	607b      	str	r3, [r7, #4]
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800280e:	4629      	mov	r1, r5
 8002810:	028b      	lsls	r3, r1, #10
 8002812:	4621      	mov	r1, r4
 8002814:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002818:	4621      	mov	r1, r4
 800281a:	028a      	lsls	r2, r1, #10
 800281c:	4610      	mov	r0, r2
 800281e:	4619      	mov	r1, r3
 8002820:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002824:	2200      	movs	r2, #0
 8002826:	64bb      	str	r3, [r7, #72]	; 0x48
 8002828:	64fa      	str	r2, [r7, #76]	; 0x4c
 800282a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800282e:	f7fd fce9 	bl	8000204 <__aeabi_uldivmod>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4613      	mov	r3, r2
 8002838:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800283c:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <HAL_RCC_GetSysClockFreq+0x458>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	0f1b      	lsrs	r3, r3, #28
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800284a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800284e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002852:	fbb2 f3f3 	udiv	r3, r2, r3
 8002856:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800285a:	e003      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <HAL_RCC_GetSysClockFreq+0x45c>)
 800285e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002862:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002864:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002868:	4618      	mov	r0, r3
 800286a:	37b8      	adds	r7, #184	; 0xb8
 800286c:	46bd      	mov	sp, r7
 800286e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002872:	bf00      	nop
 8002874:	40023800 	.word	0x40023800
 8002878:	00f42400 	.word	0x00f42400

0800287c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e28d      	b.n	8002daa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 8083 	beq.w	80029a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800289c:	4b94      	ldr	r3, [pc, #592]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 030c 	and.w	r3, r3, #12
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d019      	beq.n	80028dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028a8:	4b91      	ldr	r3, [pc, #580]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d106      	bne.n	80028c2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028b4:	4b8e      	ldr	r3, [pc, #568]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028c0:	d00c      	beq.n	80028dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028c2:	4b8b      	ldr	r3, [pc, #556]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028ca:	2b0c      	cmp	r3, #12
 80028cc:	d112      	bne.n	80028f4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ce:	4b88      	ldr	r3, [pc, #544]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028da:	d10b      	bne.n	80028f4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028dc:	4b84      	ldr	r3, [pc, #528]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d05b      	beq.n	80029a0 <HAL_RCC_OscConfig+0x124>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d157      	bne.n	80029a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e25a      	b.n	8002daa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028fc:	d106      	bne.n	800290c <HAL_RCC_OscConfig+0x90>
 80028fe:	4b7c      	ldr	r3, [pc, #496]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a7b      	ldr	r2, [pc, #492]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 8002904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e01d      	b.n	8002948 <HAL_RCC_OscConfig+0xcc>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002914:	d10c      	bne.n	8002930 <HAL_RCC_OscConfig+0xb4>
 8002916:	4b76      	ldr	r3, [pc, #472]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a75      	ldr	r2, [pc, #468]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 800291c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	4b73      	ldr	r3, [pc, #460]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a72      	ldr	r2, [pc, #456]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 8002928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	e00b      	b.n	8002948 <HAL_RCC_OscConfig+0xcc>
 8002930:	4b6f      	ldr	r3, [pc, #444]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a6e      	ldr	r2, [pc, #440]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 8002936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	4b6c      	ldr	r3, [pc, #432]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a6b      	ldr	r2, [pc, #428]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 8002942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d013      	beq.n	8002978 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002950:	f7ff f928 	bl	8001ba4 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002958:	f7ff f924 	bl	8001ba4 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b64      	cmp	r3, #100	; 0x64
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e21f      	b.n	8002daa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296a:	4b61      	ldr	r3, [pc, #388]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0xdc>
 8002976:	e014      	b.n	80029a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002978:	f7ff f914 	bl	8001ba4 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002980:	f7ff f910 	bl	8001ba4 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b64      	cmp	r3, #100	; 0x64
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e20b      	b.n	8002daa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002992:	4b57      	ldr	r3, [pc, #348]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0x104>
 800299e:	e000      	b.n	80029a2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d06f      	beq.n	8002a8e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80029ae:	4b50      	ldr	r3, [pc, #320]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d017      	beq.n	80029ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029ba:	4b4d      	ldr	r3, [pc, #308]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d105      	bne.n	80029d2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029c6:	4b4a      	ldr	r3, [pc, #296]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00b      	beq.n	80029ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029d2:	4b47      	ldr	r3, [pc, #284]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029da:	2b0c      	cmp	r3, #12
 80029dc:	d11c      	bne.n	8002a18 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029de:	4b44      	ldr	r3, [pc, #272]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d116      	bne.n	8002a18 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ea:	4b41      	ldr	r3, [pc, #260]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d005      	beq.n	8002a02 <HAL_RCC_OscConfig+0x186>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d001      	beq.n	8002a02 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e1d3      	b.n	8002daa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a02:	4b3b      	ldr	r3, [pc, #236]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	4937      	ldr	r1, [pc, #220]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a16:	e03a      	b.n	8002a8e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d020      	beq.n	8002a62 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a20:	4b34      	ldr	r3, [pc, #208]	; (8002af4 <HAL_RCC_OscConfig+0x278>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a26:	f7ff f8bd 	bl	8001ba4 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a2e:	f7ff f8b9 	bl	8001ba4 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e1b4      	b.n	8002daa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a40:	4b2b      	ldr	r3, [pc, #172]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0f0      	beq.n	8002a2e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4c:	4b28      	ldr	r3, [pc, #160]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	4925      	ldr	r1, [pc, #148]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	600b      	str	r3, [r1, #0]
 8002a60:	e015      	b.n	8002a8e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a62:	4b24      	ldr	r3, [pc, #144]	; (8002af4 <HAL_RCC_OscConfig+0x278>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a68:	f7ff f89c 	bl	8001ba4 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a70:	f7ff f898 	bl	8001ba4 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e193      	b.n	8002daa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a82:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f0      	bne.n	8002a70 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d036      	beq.n	8002b08 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d016      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aa2:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <HAL_RCC_OscConfig+0x27c>)
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa8:	f7ff f87c 	bl	8001ba4 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ab0:	f7ff f878 	bl	8001ba4 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e173      	b.n	8002daa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <HAL_RCC_OscConfig+0x274>)
 8002ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x234>
 8002ace:	e01b      	b.n	8002b08 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ad0:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <HAL_RCC_OscConfig+0x27c>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad6:	f7ff f865 	bl	8001ba4 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002adc:	e00e      	b.n	8002afc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ade:	f7ff f861 	bl	8001ba4 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d907      	bls.n	8002afc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e15c      	b.n	8002daa <HAL_RCC_OscConfig+0x52e>
 8002af0:	40023800 	.word	0x40023800
 8002af4:	42470000 	.word	0x42470000
 8002af8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002afc:	4b8a      	ldr	r3, [pc, #552]	; (8002d28 <HAL_RCC_OscConfig+0x4ac>)
 8002afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1ea      	bne.n	8002ade <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 8097 	beq.w	8002c44 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b16:	2300      	movs	r3, #0
 8002b18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b1a:	4b83      	ldr	r3, [pc, #524]	; (8002d28 <HAL_RCC_OscConfig+0x4ac>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10f      	bne.n	8002b46 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	60bb      	str	r3, [r7, #8]
 8002b2a:	4b7f      	ldr	r3, [pc, #508]	; (8002d28 <HAL_RCC_OscConfig+0x4ac>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	4a7e      	ldr	r2, [pc, #504]	; (8002d28 <HAL_RCC_OscConfig+0x4ac>)
 8002b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b34:	6413      	str	r3, [r2, #64]	; 0x40
 8002b36:	4b7c      	ldr	r3, [pc, #496]	; (8002d28 <HAL_RCC_OscConfig+0x4ac>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3e:	60bb      	str	r3, [r7, #8]
 8002b40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b42:	2301      	movs	r3, #1
 8002b44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b46:	4b79      	ldr	r3, [pc, #484]	; (8002d2c <HAL_RCC_OscConfig+0x4b0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d118      	bne.n	8002b84 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b52:	4b76      	ldr	r3, [pc, #472]	; (8002d2c <HAL_RCC_OscConfig+0x4b0>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a75      	ldr	r2, [pc, #468]	; (8002d2c <HAL_RCC_OscConfig+0x4b0>)
 8002b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b5e:	f7ff f821 	bl	8001ba4 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b66:	f7ff f81d 	bl	8001ba4 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e118      	b.n	8002daa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b78:	4b6c      	ldr	r3, [pc, #432]	; (8002d2c <HAL_RCC_OscConfig+0x4b0>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0f0      	beq.n	8002b66 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d106      	bne.n	8002b9a <HAL_RCC_OscConfig+0x31e>
 8002b8c:	4b66      	ldr	r3, [pc, #408]	; (8002d28 <HAL_RCC_OscConfig+0x4ac>)
 8002b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b90:	4a65      	ldr	r2, [pc, #404]	; (8002d28 <HAL_RCC_OscConfig+0x4ac>)
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	6713      	str	r3, [r2, #112]	; 0x70
 8002b98:	e01c      	b.n	8002bd4 <HAL_RCC_OscConfig+0x358>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b05      	cmp	r3, #5
 8002ba0:	d10c      	bne.n	8002bbc <HAL_RCC_OscConfig+0x340>
 8002ba2:	4b61      	ldr	r3, [pc, #388]	; (8002d28 <HAL_RCC_OscConfig+0x4ac>)
 8002ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba6:	4a60      	ldr	r2, [pc, #384]	; (8002d28 <HAL_RCC_OscConfig+0x4ac>)
 8002ba8:	f043 0304 	orr.w	r3, r3, #4
 8002bac:	6713      	str	r3, [r2, #112]	; 0x70
 8002bae:	4b5e      	ldr	r3, [pc, #376]	; (8002d28 <HAL_RCC_OscConfig+0x4ac>)
 8002bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb2:	4a5d      	ldr	r2, [pc, #372]	; (8002d28 <HAL_RCC_OscConfig+0x4ac>)
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bba:	e00b      	b.n	8002bd4 <HAL_RCC_OscConfig+0x358>
 8002bbc:	4b5a      	ldr	r3, [pc, #360]	; (8002d28 <HAL_RCC_OscConfig+0x4ac>)
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc0:	4a59      	ldr	r2, [pc, #356]	; (8002d28 <HAL_RCC_OscConfig+0x4ac>)
 8002bc2:	f023 0301 	bic.w	r3, r3, #1
 8002bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc8:	4b57      	ldr	r3, [pc, #348]	; (8002d28 <HAL_RCC_OscConfig+0x4ac>)
 8002bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bcc:	4a56      	ldr	r2, [pc, #344]	; (8002d28 <HAL_RCC_OscConfig+0x4ac>)
 8002bce:	f023 0304 	bic.w	r3, r3, #4
 8002bd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d015      	beq.n	8002c08 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bdc:	f7fe ffe2 	bl	8001ba4 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be2:	e00a      	b.n	8002bfa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002be4:	f7fe ffde 	bl	8001ba4 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e0d7      	b.n	8002daa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bfa:	4b4b      	ldr	r3, [pc, #300]	; (8002d28 <HAL_RCC_OscConfig+0x4ac>)
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0ee      	beq.n	8002be4 <HAL_RCC_OscConfig+0x368>
 8002c06:	e014      	b.n	8002c32 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c08:	f7fe ffcc 	bl	8001ba4 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c0e:	e00a      	b.n	8002c26 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c10:	f7fe ffc8 	bl	8001ba4 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e0c1      	b.n	8002daa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c26:	4b40      	ldr	r3, [pc, #256]	; (8002d28 <HAL_RCC_OscConfig+0x4ac>)
 8002c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1ee      	bne.n	8002c10 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c32:	7dfb      	ldrb	r3, [r7, #23]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d105      	bne.n	8002c44 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c38:	4b3b      	ldr	r3, [pc, #236]	; (8002d28 <HAL_RCC_OscConfig+0x4ac>)
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	4a3a      	ldr	r2, [pc, #232]	; (8002d28 <HAL_RCC_OscConfig+0x4ac>)
 8002c3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 80ad 	beq.w	8002da8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c4e:	4b36      	ldr	r3, [pc, #216]	; (8002d28 <HAL_RCC_OscConfig+0x4ac>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 030c 	and.w	r3, r3, #12
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d060      	beq.n	8002d1c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d145      	bne.n	8002cee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c62:	4b33      	ldr	r3, [pc, #204]	; (8002d30 <HAL_RCC_OscConfig+0x4b4>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7fe ff9c 	bl	8001ba4 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c70:	f7fe ff98 	bl	8001ba4 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e093      	b.n	8002daa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c82:	4b29      	ldr	r3, [pc, #164]	; (8002d28 <HAL_RCC_OscConfig+0x4ac>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69da      	ldr	r2, [r3, #28]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	019b      	lsls	r3, r3, #6
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca4:	085b      	lsrs	r3, r3, #1
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	041b      	lsls	r3, r3, #16
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb0:	061b      	lsls	r3, r3, #24
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb8:	071b      	lsls	r3, r3, #28
 8002cba:	491b      	ldr	r1, [pc, #108]	; (8002d28 <HAL_RCC_OscConfig+0x4ac>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cc0:	4b1b      	ldr	r3, [pc, #108]	; (8002d30 <HAL_RCC_OscConfig+0x4b4>)
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc6:	f7fe ff6d 	bl	8001ba4 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cce:	f7fe ff69 	bl	8001ba4 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e064      	b.n	8002daa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce0:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <HAL_RCC_OscConfig+0x4ac>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0f0      	beq.n	8002cce <HAL_RCC_OscConfig+0x452>
 8002cec:	e05c      	b.n	8002da8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cee:	4b10      	ldr	r3, [pc, #64]	; (8002d30 <HAL_RCC_OscConfig+0x4b4>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf4:	f7fe ff56 	bl	8001ba4 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cfc:	f7fe ff52 	bl	8001ba4 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e04d      	b.n	8002daa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0e:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <HAL_RCC_OscConfig+0x4ac>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f0      	bne.n	8002cfc <HAL_RCC_OscConfig+0x480>
 8002d1a:	e045      	b.n	8002da8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d107      	bne.n	8002d34 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e040      	b.n	8002daa <HAL_RCC_OscConfig+0x52e>
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	40007000 	.word	0x40007000
 8002d30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d34:	4b1f      	ldr	r3, [pc, #124]	; (8002db4 <HAL_RCC_OscConfig+0x538>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d030      	beq.n	8002da4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d129      	bne.n	8002da4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d122      	bne.n	8002da4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d64:	4013      	ands	r3, r2
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d119      	bne.n	8002da4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7a:	085b      	lsrs	r3, r3, #1
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d10f      	bne.n	8002da4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d107      	bne.n	8002da4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d001      	beq.n	8002da8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e000      	b.n	8002daa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40023800 	.word	0x40023800

08002db8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e07b      	b.n	8002ec2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d108      	bne.n	8002de4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dda:	d009      	beq.n	8002df0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	61da      	str	r2, [r3, #28]
 8002de2:	e005      	b.n	8002df0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fe fa64 	bl	80012d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e60:	431a      	orrs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e74:	ea42 0103 	orr.w	r1, r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	0c1b      	lsrs	r3, r3, #16
 8002e8e:	f003 0104 	and.w	r1, r3, #4
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	f003 0210 	and.w	r2, r3, #16
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	69da      	ldr	r2, [r3, #28]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b088      	sub	sp, #32
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	603b      	str	r3, [r7, #0]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d101      	bne.n	8002eec <HAL_SPI_Transmit+0x22>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e126      	b.n	800313a <HAL_SPI_Transmit+0x270>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ef4:	f7fe fe56 	bl	8001ba4 <HAL_GetTick>
 8002ef8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002efa:	88fb      	ldrh	r3, [r7, #6]
 8002efc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d002      	beq.n	8002f10 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f0e:	e10b      	b.n	8003128 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <HAL_SPI_Transmit+0x52>
 8002f16:	88fb      	ldrh	r3, [r7, #6]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d102      	bne.n	8002f22 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f20:	e102      	b.n	8003128 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2203      	movs	r2, #3
 8002f26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	88fa      	ldrh	r2, [r7, #6]
 8002f3a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	88fa      	ldrh	r2, [r7, #6]
 8002f40:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f68:	d10f      	bne.n	8002f8a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f94:	2b40      	cmp	r3, #64	; 0x40
 8002f96:	d007      	beq.n	8002fa8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fa6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fb0:	d14b      	bne.n	800304a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d002      	beq.n	8002fc0 <HAL_SPI_Transmit+0xf6>
 8002fba:	8afb      	ldrh	r3, [r7, #22]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d13e      	bne.n	800303e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc4:	881a      	ldrh	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd0:	1c9a      	adds	r2, r3, #2
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002fe4:	e02b      	b.n	800303e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d112      	bne.n	800301a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff8:	881a      	ldrh	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003004:	1c9a      	adds	r2, r3, #2
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800300e:	b29b      	uxth	r3, r3
 8003010:	3b01      	subs	r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	86da      	strh	r2, [r3, #54]	; 0x36
 8003018:	e011      	b.n	800303e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800301a:	f7fe fdc3 	bl	8001ba4 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d803      	bhi.n	8003032 <HAL_SPI_Transmit+0x168>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003030:	d102      	bne.n	8003038 <HAL_SPI_Transmit+0x16e>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d102      	bne.n	800303e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800303c:	e074      	b.n	8003128 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003042:	b29b      	uxth	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1ce      	bne.n	8002fe6 <HAL_SPI_Transmit+0x11c>
 8003048:	e04c      	b.n	80030e4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <HAL_SPI_Transmit+0x18e>
 8003052:	8afb      	ldrh	r3, [r7, #22]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d140      	bne.n	80030da <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	330c      	adds	r3, #12
 8003062:	7812      	ldrb	r2, [r2, #0]
 8003064:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003074:	b29b      	uxth	r3, r3
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800307e:	e02c      	b.n	80030da <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b02      	cmp	r3, #2
 800308c:	d113      	bne.n	80030b6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	330c      	adds	r3, #12
 8003098:	7812      	ldrb	r2, [r2, #0]
 800309a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80030b4:	e011      	b.n	80030da <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030b6:	f7fe fd75 	bl	8001ba4 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d803      	bhi.n	80030ce <HAL_SPI_Transmit+0x204>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030cc:	d102      	bne.n	80030d4 <HAL_SPI_Transmit+0x20a>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d102      	bne.n	80030da <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80030d8:	e026      	b.n	8003128 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030de:	b29b      	uxth	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1cd      	bne.n	8003080 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	6839      	ldr	r1, [r7, #0]
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f8b3 	bl	8003254 <SPI_EndRxTxTransaction>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d002      	beq.n	80030fa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2220      	movs	r2, #32
 80030f8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10a      	bne.n	8003118 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003102:	2300      	movs	r3, #0
 8003104:	613b      	str	r3, [r7, #16]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	77fb      	strb	r3, [r7, #31]
 8003124:	e000      	b.n	8003128 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003126:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003138:	7ffb      	ldrb	r3, [r7, #31]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3720      	adds	r7, #32
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	603b      	str	r3, [r7, #0]
 8003150:	4613      	mov	r3, r2
 8003152:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003154:	f7fe fd26 	bl	8001ba4 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	4413      	add	r3, r2
 8003162:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003164:	f7fe fd1e 	bl	8001ba4 <HAL_GetTick>
 8003168:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800316a:	4b39      	ldr	r3, [pc, #228]	; (8003250 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	015b      	lsls	r3, r3, #5
 8003170:	0d1b      	lsrs	r3, r3, #20
 8003172:	69fa      	ldr	r2, [r7, #28]
 8003174:	fb02 f303 	mul.w	r3, r2, r3
 8003178:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800317a:	e054      	b.n	8003226 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003182:	d050      	beq.n	8003226 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003184:	f7fe fd0e 	bl	8001ba4 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	69fa      	ldr	r2, [r7, #28]
 8003190:	429a      	cmp	r2, r3
 8003192:	d902      	bls.n	800319a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d13d      	bne.n	8003216 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031b2:	d111      	bne.n	80031d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031bc:	d004      	beq.n	80031c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c6:	d107      	bne.n	80031d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031e0:	d10f      	bne.n	8003202 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003200:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e017      	b.n	8003246 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	3b01      	subs	r3, #1
 8003224:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	4013      	ands	r3, r2
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	429a      	cmp	r2, r3
 8003234:	bf0c      	ite	eq
 8003236:	2301      	moveq	r3, #1
 8003238:	2300      	movne	r3, #0
 800323a:	b2db      	uxtb	r3, r3
 800323c:	461a      	mov	r2, r3
 800323e:	79fb      	ldrb	r3, [r7, #7]
 8003240:	429a      	cmp	r2, r3
 8003242:	d19b      	bne.n	800317c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3720      	adds	r7, #32
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	20012c14 	.word	0x20012c14

08003254 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b088      	sub	sp, #32
 8003258:	af02      	add	r7, sp, #8
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003260:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <SPI_EndRxTxTransaction+0x7c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a1b      	ldr	r2, [pc, #108]	; (80032d4 <SPI_EndRxTxTransaction+0x80>)
 8003266:	fba2 2303 	umull	r2, r3, r2, r3
 800326a:	0d5b      	lsrs	r3, r3, #21
 800326c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003270:	fb02 f303 	mul.w	r3, r2, r3
 8003274:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800327e:	d112      	bne.n	80032a6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2200      	movs	r2, #0
 8003288:	2180      	movs	r1, #128	; 0x80
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f7ff ff5a 	bl	8003144 <SPI_WaitFlagStateUntilTimeout>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d016      	beq.n	80032c4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329a:	f043 0220 	orr.w	r2, r3, #32
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e00f      	b.n	80032c6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00a      	beq.n	80032c2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	3b01      	subs	r3, #1
 80032b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032bc:	2b80      	cmp	r3, #128	; 0x80
 80032be:	d0f2      	beq.n	80032a6 <SPI_EndRxTxTransaction+0x52>
 80032c0:	e000      	b.n	80032c4 <SPI_EndRxTxTransaction+0x70>
        break;
 80032c2:	bf00      	nop
  }

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	20012c14 	.word	0x20012c14
 80032d4:	165e9f81 	.word	0x165e9f81

080032d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e041      	b.n	800336e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d106      	bne.n	8003304 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7fe f862 	bl	80013c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3304      	adds	r3, #4
 8003314:	4619      	mov	r1, r3
 8003316:	4610      	mov	r0, r2
 8003318:	f000 fa96 	bl	8003848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b01      	cmp	r3, #1
 800338a:	d001      	beq.n	8003390 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e04e      	b.n	800342e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a23      	ldr	r2, [pc, #140]	; (800343c <HAL_TIM_Base_Start_IT+0xc4>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d022      	beq.n	80033f8 <HAL_TIM_Base_Start_IT+0x80>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ba:	d01d      	beq.n	80033f8 <HAL_TIM_Base_Start_IT+0x80>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a1f      	ldr	r2, [pc, #124]	; (8003440 <HAL_TIM_Base_Start_IT+0xc8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d018      	beq.n	80033f8 <HAL_TIM_Base_Start_IT+0x80>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a1e      	ldr	r2, [pc, #120]	; (8003444 <HAL_TIM_Base_Start_IT+0xcc>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d013      	beq.n	80033f8 <HAL_TIM_Base_Start_IT+0x80>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a1c      	ldr	r2, [pc, #112]	; (8003448 <HAL_TIM_Base_Start_IT+0xd0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00e      	beq.n	80033f8 <HAL_TIM_Base_Start_IT+0x80>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a1b      	ldr	r2, [pc, #108]	; (800344c <HAL_TIM_Base_Start_IT+0xd4>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d009      	beq.n	80033f8 <HAL_TIM_Base_Start_IT+0x80>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a19      	ldr	r2, [pc, #100]	; (8003450 <HAL_TIM_Base_Start_IT+0xd8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d004      	beq.n	80033f8 <HAL_TIM_Base_Start_IT+0x80>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a18      	ldr	r2, [pc, #96]	; (8003454 <HAL_TIM_Base_Start_IT+0xdc>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d111      	bne.n	800341c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2b06      	cmp	r3, #6
 8003408:	d010      	beq.n	800342c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f042 0201 	orr.w	r2, r2, #1
 8003418:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800341a:	e007      	b.n	800342c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0201 	orr.w	r2, r2, #1
 800342a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	40010000 	.word	0x40010000
 8003440:	40000400 	.word	0x40000400
 8003444:	40000800 	.word	0x40000800
 8003448:	40000c00 	.word	0x40000c00
 800344c:	40010400 	.word	0x40010400
 8003450:	40014000 	.word	0x40014000
 8003454:	40001800 	.word	0x40001800

08003458 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b02      	cmp	r3, #2
 800346c:	d122      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b02      	cmp	r3, #2
 800347a:	d11b      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0202 	mvn.w	r2, #2
 8003484:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f9b5 	bl	800380a <HAL_TIM_IC_CaptureCallback>
 80034a0:	e005      	b.n	80034ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f9a7 	bl	80037f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f9b8 	bl	800381e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0304 	and.w	r3, r3, #4
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d122      	bne.n	8003508 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d11b      	bne.n	8003508 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0204 	mvn.w	r2, #4
 80034d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2202      	movs	r2, #2
 80034de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f98b 	bl	800380a <HAL_TIM_IC_CaptureCallback>
 80034f4:	e005      	b.n	8003502 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f97d 	bl	80037f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f98e 	bl	800381e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b08      	cmp	r3, #8
 8003514:	d122      	bne.n	800355c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b08      	cmp	r3, #8
 8003522:	d11b      	bne.n	800355c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f06f 0208 	mvn.w	r2, #8
 800352c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2204      	movs	r2, #4
 8003532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f961 	bl	800380a <HAL_TIM_IC_CaptureCallback>
 8003548:	e005      	b.n	8003556 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f953 	bl	80037f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f964 	bl	800381e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f003 0310 	and.w	r3, r3, #16
 8003566:	2b10      	cmp	r3, #16
 8003568:	d122      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f003 0310 	and.w	r3, r3, #16
 8003574:	2b10      	cmp	r3, #16
 8003576:	d11b      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0210 	mvn.w	r2, #16
 8003580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2208      	movs	r2, #8
 8003586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f937 	bl	800380a <HAL_TIM_IC_CaptureCallback>
 800359c:	e005      	b.n	80035aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f929 	bl	80037f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f93a 	bl	800381e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d10e      	bne.n	80035dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d107      	bne.n	80035dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f06f 0201 	mvn.w	r2, #1
 80035d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7fd ffe0 	bl	800159c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e6:	2b80      	cmp	r3, #128	; 0x80
 80035e8:	d10e      	bne.n	8003608 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f4:	2b80      	cmp	r3, #128	; 0x80
 80035f6:	d107      	bne.n	8003608 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 fae0 	bl	8003bc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003612:	2b40      	cmp	r3, #64	; 0x40
 8003614:	d10e      	bne.n	8003634 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003620:	2b40      	cmp	r3, #64	; 0x40
 8003622:	d107      	bne.n	8003634 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800362c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f8ff 	bl	8003832 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	f003 0320 	and.w	r3, r3, #32
 800363e:	2b20      	cmp	r3, #32
 8003640:	d10e      	bne.n	8003660 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f003 0320 	and.w	r3, r3, #32
 800364c:	2b20      	cmp	r3, #32
 800364e:	d107      	bne.n	8003660 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f06f 0220 	mvn.w	r2, #32
 8003658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 faaa 	bl	8003bb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003660:	bf00      	nop
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800367c:	2b01      	cmp	r3, #1
 800367e:	d101      	bne.n	8003684 <HAL_TIM_ConfigClockSource+0x1c>
 8003680:	2302      	movs	r3, #2
 8003682:	e0b4      	b.n	80037ee <HAL_TIM_ConfigClockSource+0x186>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036bc:	d03e      	beq.n	800373c <HAL_TIM_ConfigClockSource+0xd4>
 80036be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036c2:	f200 8087 	bhi.w	80037d4 <HAL_TIM_ConfigClockSource+0x16c>
 80036c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ca:	f000 8086 	beq.w	80037da <HAL_TIM_ConfigClockSource+0x172>
 80036ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d2:	d87f      	bhi.n	80037d4 <HAL_TIM_ConfigClockSource+0x16c>
 80036d4:	2b70      	cmp	r3, #112	; 0x70
 80036d6:	d01a      	beq.n	800370e <HAL_TIM_ConfigClockSource+0xa6>
 80036d8:	2b70      	cmp	r3, #112	; 0x70
 80036da:	d87b      	bhi.n	80037d4 <HAL_TIM_ConfigClockSource+0x16c>
 80036dc:	2b60      	cmp	r3, #96	; 0x60
 80036de:	d050      	beq.n	8003782 <HAL_TIM_ConfigClockSource+0x11a>
 80036e0:	2b60      	cmp	r3, #96	; 0x60
 80036e2:	d877      	bhi.n	80037d4 <HAL_TIM_ConfigClockSource+0x16c>
 80036e4:	2b50      	cmp	r3, #80	; 0x50
 80036e6:	d03c      	beq.n	8003762 <HAL_TIM_ConfigClockSource+0xfa>
 80036e8:	2b50      	cmp	r3, #80	; 0x50
 80036ea:	d873      	bhi.n	80037d4 <HAL_TIM_ConfigClockSource+0x16c>
 80036ec:	2b40      	cmp	r3, #64	; 0x40
 80036ee:	d058      	beq.n	80037a2 <HAL_TIM_ConfigClockSource+0x13a>
 80036f0:	2b40      	cmp	r3, #64	; 0x40
 80036f2:	d86f      	bhi.n	80037d4 <HAL_TIM_ConfigClockSource+0x16c>
 80036f4:	2b30      	cmp	r3, #48	; 0x30
 80036f6:	d064      	beq.n	80037c2 <HAL_TIM_ConfigClockSource+0x15a>
 80036f8:	2b30      	cmp	r3, #48	; 0x30
 80036fa:	d86b      	bhi.n	80037d4 <HAL_TIM_ConfigClockSource+0x16c>
 80036fc:	2b20      	cmp	r3, #32
 80036fe:	d060      	beq.n	80037c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003700:	2b20      	cmp	r3, #32
 8003702:	d867      	bhi.n	80037d4 <HAL_TIM_ConfigClockSource+0x16c>
 8003704:	2b00      	cmp	r3, #0
 8003706:	d05c      	beq.n	80037c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003708:	2b10      	cmp	r3, #16
 800370a:	d05a      	beq.n	80037c2 <HAL_TIM_ConfigClockSource+0x15a>
 800370c:	e062      	b.n	80037d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6818      	ldr	r0, [r3, #0]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	6899      	ldr	r1, [r3, #8]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f000 f9ad 	bl	8003a7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003730:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	609a      	str	r2, [r3, #8]
      break;
 800373a:	e04f      	b.n	80037dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6818      	ldr	r0, [r3, #0]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	6899      	ldr	r1, [r3, #8]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f000 f996 	bl	8003a7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800375e:	609a      	str	r2, [r3, #8]
      break;
 8003760:	e03c      	b.n	80037dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	6859      	ldr	r1, [r3, #4]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	461a      	mov	r2, r3
 8003770:	f000 f90a 	bl	8003988 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2150      	movs	r1, #80	; 0x50
 800377a:	4618      	mov	r0, r3
 800377c:	f000 f963 	bl	8003a46 <TIM_ITRx_SetConfig>
      break;
 8003780:	e02c      	b.n	80037dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6818      	ldr	r0, [r3, #0]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	6859      	ldr	r1, [r3, #4]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	461a      	mov	r2, r3
 8003790:	f000 f929 	bl	80039e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2160      	movs	r1, #96	; 0x60
 800379a:	4618      	mov	r0, r3
 800379c:	f000 f953 	bl	8003a46 <TIM_ITRx_SetConfig>
      break;
 80037a0:	e01c      	b.n	80037dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	6859      	ldr	r1, [r3, #4]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	461a      	mov	r2, r3
 80037b0:	f000 f8ea 	bl	8003988 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2140      	movs	r1, #64	; 0x40
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 f943 	bl	8003a46 <TIM_ITRx_SetConfig>
      break;
 80037c0:	e00c      	b.n	80037dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4619      	mov	r1, r3
 80037cc:	4610      	mov	r0, r2
 80037ce:	f000 f93a 	bl	8003a46 <TIM_ITRx_SetConfig>
      break;
 80037d2:	e003      	b.n	80037dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	73fb      	strb	r3, [r7, #15]
      break;
 80037d8:	e000      	b.n	80037dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
	...

08003848 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a40      	ldr	r2, [pc, #256]	; (800395c <TIM_Base_SetConfig+0x114>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d013      	beq.n	8003888 <TIM_Base_SetConfig+0x40>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003866:	d00f      	beq.n	8003888 <TIM_Base_SetConfig+0x40>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a3d      	ldr	r2, [pc, #244]	; (8003960 <TIM_Base_SetConfig+0x118>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d00b      	beq.n	8003888 <TIM_Base_SetConfig+0x40>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a3c      	ldr	r2, [pc, #240]	; (8003964 <TIM_Base_SetConfig+0x11c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d007      	beq.n	8003888 <TIM_Base_SetConfig+0x40>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a3b      	ldr	r2, [pc, #236]	; (8003968 <TIM_Base_SetConfig+0x120>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d003      	beq.n	8003888 <TIM_Base_SetConfig+0x40>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a3a      	ldr	r2, [pc, #232]	; (800396c <TIM_Base_SetConfig+0x124>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d108      	bne.n	800389a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800388e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	4313      	orrs	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a2f      	ldr	r2, [pc, #188]	; (800395c <TIM_Base_SetConfig+0x114>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d02b      	beq.n	80038fa <TIM_Base_SetConfig+0xb2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a8:	d027      	beq.n	80038fa <TIM_Base_SetConfig+0xb2>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a2c      	ldr	r2, [pc, #176]	; (8003960 <TIM_Base_SetConfig+0x118>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d023      	beq.n	80038fa <TIM_Base_SetConfig+0xb2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a2b      	ldr	r2, [pc, #172]	; (8003964 <TIM_Base_SetConfig+0x11c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d01f      	beq.n	80038fa <TIM_Base_SetConfig+0xb2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a2a      	ldr	r2, [pc, #168]	; (8003968 <TIM_Base_SetConfig+0x120>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d01b      	beq.n	80038fa <TIM_Base_SetConfig+0xb2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a29      	ldr	r2, [pc, #164]	; (800396c <TIM_Base_SetConfig+0x124>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d017      	beq.n	80038fa <TIM_Base_SetConfig+0xb2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a28      	ldr	r2, [pc, #160]	; (8003970 <TIM_Base_SetConfig+0x128>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d013      	beq.n	80038fa <TIM_Base_SetConfig+0xb2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a27      	ldr	r2, [pc, #156]	; (8003974 <TIM_Base_SetConfig+0x12c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00f      	beq.n	80038fa <TIM_Base_SetConfig+0xb2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a26      	ldr	r2, [pc, #152]	; (8003978 <TIM_Base_SetConfig+0x130>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00b      	beq.n	80038fa <TIM_Base_SetConfig+0xb2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a25      	ldr	r2, [pc, #148]	; (800397c <TIM_Base_SetConfig+0x134>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d007      	beq.n	80038fa <TIM_Base_SetConfig+0xb2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a24      	ldr	r2, [pc, #144]	; (8003980 <TIM_Base_SetConfig+0x138>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d003      	beq.n	80038fa <TIM_Base_SetConfig+0xb2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a23      	ldr	r2, [pc, #140]	; (8003984 <TIM_Base_SetConfig+0x13c>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d108      	bne.n	800390c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	4313      	orrs	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a0a      	ldr	r2, [pc, #40]	; (800395c <TIM_Base_SetConfig+0x114>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d003      	beq.n	8003940 <TIM_Base_SetConfig+0xf8>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a0c      	ldr	r2, [pc, #48]	; (800396c <TIM_Base_SetConfig+0x124>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d103      	bne.n	8003948 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	615a      	str	r2, [r3, #20]
}
 800394e:	bf00      	nop
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40010000 	.word	0x40010000
 8003960:	40000400 	.word	0x40000400
 8003964:	40000800 	.word	0x40000800
 8003968:	40000c00 	.word	0x40000c00
 800396c:	40010400 	.word	0x40010400
 8003970:	40014000 	.word	0x40014000
 8003974:	40014400 	.word	0x40014400
 8003978:	40014800 	.word	0x40014800
 800397c:	40001800 	.word	0x40001800
 8003980:	40001c00 	.word	0x40001c00
 8003984:	40002000 	.word	0x40002000

08003988 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003988:	b480      	push	{r7}
 800398a:	b087      	sub	sp, #28
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	f023 0201 	bic.w	r2, r3, #1
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f023 030a 	bic.w	r3, r3, #10
 80039c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	621a      	str	r2, [r3, #32]
}
 80039da:	bf00      	nop
 80039dc:	371c      	adds	r7, #28
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b087      	sub	sp, #28
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	60f8      	str	r0, [r7, #12]
 80039ee:	60b9      	str	r1, [r7, #8]
 80039f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	f023 0210 	bic.w	r2, r3, #16
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	031b      	lsls	r3, r3, #12
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	621a      	str	r2, [r3, #32]
}
 8003a3a:	bf00      	nop
 8003a3c:	371c      	adds	r7, #28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b085      	sub	sp, #20
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f043 0307 	orr.w	r3, r3, #7
 8003a68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	609a      	str	r2, [r3, #8]
}
 8003a70:	bf00      	nop
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
 8003a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	021a      	lsls	r2, r3, #8
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	609a      	str	r2, [r3, #8]
}
 8003ab0:	bf00      	nop
 8003ab2:	371c      	adds	r7, #28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	e05a      	b.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003afa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a21      	ldr	r2, [pc, #132]	; (8003b98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d022      	beq.n	8003b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b20:	d01d      	beq.n	8003b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a1d      	ldr	r2, [pc, #116]	; (8003b9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d018      	beq.n	8003b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a1b      	ldr	r2, [pc, #108]	; (8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d013      	beq.n	8003b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a1a      	ldr	r2, [pc, #104]	; (8003ba4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d00e      	beq.n	8003b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a18      	ldr	r2, [pc, #96]	; (8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d009      	beq.n	8003b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a17      	ldr	r2, [pc, #92]	; (8003bac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d004      	beq.n	8003b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a15      	ldr	r2, [pc, #84]	; (8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d10c      	bne.n	8003b78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40010000 	.word	0x40010000
 8003b9c:	40000400 	.word	0x40000400
 8003ba0:	40000800 	.word	0x40000800
 8003ba4:	40000c00 	.word	0x40000c00
 8003ba8:	40010400 	.word	0x40010400
 8003bac:	40014000 	.word	0x40014000
 8003bb0:	40001800 	.word	0x40001800

08003bb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e03f      	b.n	8003c6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fd fc24 	bl	8001450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2224      	movs	r2, #36	; 0x24
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f829 	bl	8003c78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695a      	ldr	r2, [r3, #20]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c7c:	b0c0      	sub	sp, #256	; 0x100
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c94:	68d9      	ldr	r1, [r3, #12]
 8003c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	ea40 0301 	orr.w	r3, r0, r1
 8003ca0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003cd0:	f021 010c 	bic.w	r1, r1, #12
 8003cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cde:	430b      	orrs	r3, r1
 8003ce0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf2:	6999      	ldr	r1, [r3, #24]
 8003cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	ea40 0301 	orr.w	r3, r0, r1
 8003cfe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	4b8f      	ldr	r3, [pc, #572]	; (8003f44 <UART_SetConfig+0x2cc>)
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d005      	beq.n	8003d18 <UART_SetConfig+0xa0>
 8003d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	4b8d      	ldr	r3, [pc, #564]	; (8003f48 <UART_SetConfig+0x2d0>)
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d104      	bne.n	8003d22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d18:	f7fe fb6c 	bl	80023f4 <HAL_RCC_GetPCLK2Freq>
 8003d1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d20:	e003      	b.n	8003d2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d22:	f7fe fb53 	bl	80023cc <HAL_RCC_GetPCLK1Freq>
 8003d26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d34:	f040 810c 	bne.w	8003f50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d4a:	4622      	mov	r2, r4
 8003d4c:	462b      	mov	r3, r5
 8003d4e:	1891      	adds	r1, r2, r2
 8003d50:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d52:	415b      	adcs	r3, r3
 8003d54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d5a:	4621      	mov	r1, r4
 8003d5c:	eb12 0801 	adds.w	r8, r2, r1
 8003d60:	4629      	mov	r1, r5
 8003d62:	eb43 0901 	adc.w	r9, r3, r1
 8003d66:	f04f 0200 	mov.w	r2, #0
 8003d6a:	f04f 0300 	mov.w	r3, #0
 8003d6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d7a:	4690      	mov	r8, r2
 8003d7c:	4699      	mov	r9, r3
 8003d7e:	4623      	mov	r3, r4
 8003d80:	eb18 0303 	adds.w	r3, r8, r3
 8003d84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d88:	462b      	mov	r3, r5
 8003d8a:	eb49 0303 	adc.w	r3, r9, r3
 8003d8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003da2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003da6:	460b      	mov	r3, r1
 8003da8:	18db      	adds	r3, r3, r3
 8003daa:	653b      	str	r3, [r7, #80]	; 0x50
 8003dac:	4613      	mov	r3, r2
 8003dae:	eb42 0303 	adc.w	r3, r2, r3
 8003db2:	657b      	str	r3, [r7, #84]	; 0x54
 8003db4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003db8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003dbc:	f7fc fa22 	bl	8000204 <__aeabi_uldivmod>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	4b61      	ldr	r3, [pc, #388]	; (8003f4c <UART_SetConfig+0x2d4>)
 8003dc6:	fba3 2302 	umull	r2, r3, r3, r2
 8003dca:	095b      	lsrs	r3, r3, #5
 8003dcc:	011c      	lsls	r4, r3, #4
 8003dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003dd8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ddc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003de0:	4642      	mov	r2, r8
 8003de2:	464b      	mov	r3, r9
 8003de4:	1891      	adds	r1, r2, r2
 8003de6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003de8:	415b      	adcs	r3, r3
 8003dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003df0:	4641      	mov	r1, r8
 8003df2:	eb12 0a01 	adds.w	sl, r2, r1
 8003df6:	4649      	mov	r1, r9
 8003df8:	eb43 0b01 	adc.w	fp, r3, r1
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	f04f 0300 	mov.w	r3, #0
 8003e04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e10:	4692      	mov	sl, r2
 8003e12:	469b      	mov	fp, r3
 8003e14:	4643      	mov	r3, r8
 8003e16:	eb1a 0303 	adds.w	r3, sl, r3
 8003e1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e1e:	464b      	mov	r3, r9
 8003e20:	eb4b 0303 	adc.w	r3, fp, r3
 8003e24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	18db      	adds	r3, r3, r3
 8003e40:	643b      	str	r3, [r7, #64]	; 0x40
 8003e42:	4613      	mov	r3, r2
 8003e44:	eb42 0303 	adc.w	r3, r2, r3
 8003e48:	647b      	str	r3, [r7, #68]	; 0x44
 8003e4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e52:	f7fc f9d7 	bl	8000204 <__aeabi_uldivmod>
 8003e56:	4602      	mov	r2, r0
 8003e58:	460b      	mov	r3, r1
 8003e5a:	4611      	mov	r1, r2
 8003e5c:	4b3b      	ldr	r3, [pc, #236]	; (8003f4c <UART_SetConfig+0x2d4>)
 8003e5e:	fba3 2301 	umull	r2, r3, r3, r1
 8003e62:	095b      	lsrs	r3, r3, #5
 8003e64:	2264      	movs	r2, #100	; 0x64
 8003e66:	fb02 f303 	mul.w	r3, r2, r3
 8003e6a:	1acb      	subs	r3, r1, r3
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e72:	4b36      	ldr	r3, [pc, #216]	; (8003f4c <UART_SetConfig+0x2d4>)
 8003e74:	fba3 2302 	umull	r2, r3, r3, r2
 8003e78:	095b      	lsrs	r3, r3, #5
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e80:	441c      	add	r4, r3
 8003e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e86:	2200      	movs	r2, #0
 8003e88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003e90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003e94:	4642      	mov	r2, r8
 8003e96:	464b      	mov	r3, r9
 8003e98:	1891      	adds	r1, r2, r2
 8003e9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e9c:	415b      	adcs	r3, r3
 8003e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ea0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ea4:	4641      	mov	r1, r8
 8003ea6:	1851      	adds	r1, r2, r1
 8003ea8:	6339      	str	r1, [r7, #48]	; 0x30
 8003eaa:	4649      	mov	r1, r9
 8003eac:	414b      	adcs	r3, r1
 8003eae:	637b      	str	r3, [r7, #52]	; 0x34
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ebc:	4659      	mov	r1, fp
 8003ebe:	00cb      	lsls	r3, r1, #3
 8003ec0:	4651      	mov	r1, sl
 8003ec2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ec6:	4651      	mov	r1, sl
 8003ec8:	00ca      	lsls	r2, r1, #3
 8003eca:	4610      	mov	r0, r2
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4603      	mov	r3, r0
 8003ed0:	4642      	mov	r2, r8
 8003ed2:	189b      	adds	r3, r3, r2
 8003ed4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ed8:	464b      	mov	r3, r9
 8003eda:	460a      	mov	r2, r1
 8003edc:	eb42 0303 	adc.w	r3, r2, r3
 8003ee0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ef0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ef4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ef8:	460b      	mov	r3, r1
 8003efa:	18db      	adds	r3, r3, r3
 8003efc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003efe:	4613      	mov	r3, r2
 8003f00:	eb42 0303 	adc.w	r3, r2, r3
 8003f04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f0e:	f7fc f979 	bl	8000204 <__aeabi_uldivmod>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	4b0d      	ldr	r3, [pc, #52]	; (8003f4c <UART_SetConfig+0x2d4>)
 8003f18:	fba3 1302 	umull	r1, r3, r3, r2
 8003f1c:	095b      	lsrs	r3, r3, #5
 8003f1e:	2164      	movs	r1, #100	; 0x64
 8003f20:	fb01 f303 	mul.w	r3, r1, r3
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	3332      	adds	r3, #50	; 0x32
 8003f2a:	4a08      	ldr	r2, [pc, #32]	; (8003f4c <UART_SetConfig+0x2d4>)
 8003f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f30:	095b      	lsrs	r3, r3, #5
 8003f32:	f003 0207 	and.w	r2, r3, #7
 8003f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4422      	add	r2, r4
 8003f3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f40:	e105      	b.n	800414e <UART_SetConfig+0x4d6>
 8003f42:	bf00      	nop
 8003f44:	40011000 	.word	0x40011000
 8003f48:	40011400 	.word	0x40011400
 8003f4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f54:	2200      	movs	r2, #0
 8003f56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f5a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f62:	4642      	mov	r2, r8
 8003f64:	464b      	mov	r3, r9
 8003f66:	1891      	adds	r1, r2, r2
 8003f68:	6239      	str	r1, [r7, #32]
 8003f6a:	415b      	adcs	r3, r3
 8003f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f72:	4641      	mov	r1, r8
 8003f74:	1854      	adds	r4, r2, r1
 8003f76:	4649      	mov	r1, r9
 8003f78:	eb43 0501 	adc.w	r5, r3, r1
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	00eb      	lsls	r3, r5, #3
 8003f86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f8a:	00e2      	lsls	r2, r4, #3
 8003f8c:	4614      	mov	r4, r2
 8003f8e:	461d      	mov	r5, r3
 8003f90:	4643      	mov	r3, r8
 8003f92:	18e3      	adds	r3, r4, r3
 8003f94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f98:	464b      	mov	r3, r9
 8003f9a:	eb45 0303 	adc.w	r3, r5, r3
 8003f9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003fae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003fb2:	f04f 0200 	mov.w	r2, #0
 8003fb6:	f04f 0300 	mov.w	r3, #0
 8003fba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003fbe:	4629      	mov	r1, r5
 8003fc0:	008b      	lsls	r3, r1, #2
 8003fc2:	4621      	mov	r1, r4
 8003fc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fc8:	4621      	mov	r1, r4
 8003fca:	008a      	lsls	r2, r1, #2
 8003fcc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003fd0:	f7fc f918 	bl	8000204 <__aeabi_uldivmod>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4b60      	ldr	r3, [pc, #384]	; (800415c <UART_SetConfig+0x4e4>)
 8003fda:	fba3 2302 	umull	r2, r3, r3, r2
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	011c      	lsls	r4, r3, #4
 8003fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003fec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ff0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003ff4:	4642      	mov	r2, r8
 8003ff6:	464b      	mov	r3, r9
 8003ff8:	1891      	adds	r1, r2, r2
 8003ffa:	61b9      	str	r1, [r7, #24]
 8003ffc:	415b      	adcs	r3, r3
 8003ffe:	61fb      	str	r3, [r7, #28]
 8004000:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004004:	4641      	mov	r1, r8
 8004006:	1851      	adds	r1, r2, r1
 8004008:	6139      	str	r1, [r7, #16]
 800400a:	4649      	mov	r1, r9
 800400c:	414b      	adcs	r3, r1
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800401c:	4659      	mov	r1, fp
 800401e:	00cb      	lsls	r3, r1, #3
 8004020:	4651      	mov	r1, sl
 8004022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004026:	4651      	mov	r1, sl
 8004028:	00ca      	lsls	r2, r1, #3
 800402a:	4610      	mov	r0, r2
 800402c:	4619      	mov	r1, r3
 800402e:	4603      	mov	r3, r0
 8004030:	4642      	mov	r2, r8
 8004032:	189b      	adds	r3, r3, r2
 8004034:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004038:	464b      	mov	r3, r9
 800403a:	460a      	mov	r2, r1
 800403c:	eb42 0303 	adc.w	r3, r2, r3
 8004040:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	67bb      	str	r3, [r7, #120]	; 0x78
 800404e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	f04f 0300 	mov.w	r3, #0
 8004058:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800405c:	4649      	mov	r1, r9
 800405e:	008b      	lsls	r3, r1, #2
 8004060:	4641      	mov	r1, r8
 8004062:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004066:	4641      	mov	r1, r8
 8004068:	008a      	lsls	r2, r1, #2
 800406a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800406e:	f7fc f8c9 	bl	8000204 <__aeabi_uldivmod>
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	4b39      	ldr	r3, [pc, #228]	; (800415c <UART_SetConfig+0x4e4>)
 8004078:	fba3 1302 	umull	r1, r3, r3, r2
 800407c:	095b      	lsrs	r3, r3, #5
 800407e:	2164      	movs	r1, #100	; 0x64
 8004080:	fb01 f303 	mul.w	r3, r1, r3
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	3332      	adds	r3, #50	; 0x32
 800408a:	4a34      	ldr	r2, [pc, #208]	; (800415c <UART_SetConfig+0x4e4>)
 800408c:	fba2 2303 	umull	r2, r3, r2, r3
 8004090:	095b      	lsrs	r3, r3, #5
 8004092:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004096:	441c      	add	r4, r3
 8004098:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800409c:	2200      	movs	r2, #0
 800409e:	673b      	str	r3, [r7, #112]	; 0x70
 80040a0:	677a      	str	r2, [r7, #116]	; 0x74
 80040a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80040a6:	4642      	mov	r2, r8
 80040a8:	464b      	mov	r3, r9
 80040aa:	1891      	adds	r1, r2, r2
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	415b      	adcs	r3, r3
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040b6:	4641      	mov	r1, r8
 80040b8:	1851      	adds	r1, r2, r1
 80040ba:	6039      	str	r1, [r7, #0]
 80040bc:	4649      	mov	r1, r9
 80040be:	414b      	adcs	r3, r1
 80040c0:	607b      	str	r3, [r7, #4]
 80040c2:	f04f 0200 	mov.w	r2, #0
 80040c6:	f04f 0300 	mov.w	r3, #0
 80040ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040ce:	4659      	mov	r1, fp
 80040d0:	00cb      	lsls	r3, r1, #3
 80040d2:	4651      	mov	r1, sl
 80040d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040d8:	4651      	mov	r1, sl
 80040da:	00ca      	lsls	r2, r1, #3
 80040dc:	4610      	mov	r0, r2
 80040de:	4619      	mov	r1, r3
 80040e0:	4603      	mov	r3, r0
 80040e2:	4642      	mov	r2, r8
 80040e4:	189b      	adds	r3, r3, r2
 80040e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80040e8:	464b      	mov	r3, r9
 80040ea:	460a      	mov	r2, r1
 80040ec:	eb42 0303 	adc.w	r3, r2, r3
 80040f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	663b      	str	r3, [r7, #96]	; 0x60
 80040fc:	667a      	str	r2, [r7, #100]	; 0x64
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	f04f 0300 	mov.w	r3, #0
 8004106:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800410a:	4649      	mov	r1, r9
 800410c:	008b      	lsls	r3, r1, #2
 800410e:	4641      	mov	r1, r8
 8004110:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004114:	4641      	mov	r1, r8
 8004116:	008a      	lsls	r2, r1, #2
 8004118:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800411c:	f7fc f872 	bl	8000204 <__aeabi_uldivmod>
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	4b0d      	ldr	r3, [pc, #52]	; (800415c <UART_SetConfig+0x4e4>)
 8004126:	fba3 1302 	umull	r1, r3, r3, r2
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	2164      	movs	r1, #100	; 0x64
 800412e:	fb01 f303 	mul.w	r3, r1, r3
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	011b      	lsls	r3, r3, #4
 8004136:	3332      	adds	r3, #50	; 0x32
 8004138:	4a08      	ldr	r2, [pc, #32]	; (800415c <UART_SetConfig+0x4e4>)
 800413a:	fba2 2303 	umull	r2, r3, r2, r3
 800413e:	095b      	lsrs	r3, r3, #5
 8004140:	f003 020f 	and.w	r2, r3, #15
 8004144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4422      	add	r2, r4
 800414c:	609a      	str	r2, [r3, #8]
}
 800414e:	bf00      	nop
 8004150:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004154:	46bd      	mov	sp, r7
 8004156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800415a:	bf00      	nop
 800415c:	51eb851f 	.word	0x51eb851f

08004160 <__libc_init_array>:
 8004160:	b570      	push	{r4, r5, r6, lr}
 8004162:	4d0d      	ldr	r5, [pc, #52]	; (8004198 <__libc_init_array+0x38>)
 8004164:	4c0d      	ldr	r4, [pc, #52]	; (800419c <__libc_init_array+0x3c>)
 8004166:	1b64      	subs	r4, r4, r5
 8004168:	10a4      	asrs	r4, r4, #2
 800416a:	2600      	movs	r6, #0
 800416c:	42a6      	cmp	r6, r4
 800416e:	d109      	bne.n	8004184 <__libc_init_array+0x24>
 8004170:	4d0b      	ldr	r5, [pc, #44]	; (80041a0 <__libc_init_array+0x40>)
 8004172:	4c0c      	ldr	r4, [pc, #48]	; (80041a4 <__libc_init_array+0x44>)
 8004174:	f000 f820 	bl	80041b8 <_init>
 8004178:	1b64      	subs	r4, r4, r5
 800417a:	10a4      	asrs	r4, r4, #2
 800417c:	2600      	movs	r6, #0
 800417e:	42a6      	cmp	r6, r4
 8004180:	d105      	bne.n	800418e <__libc_init_array+0x2e>
 8004182:	bd70      	pop	{r4, r5, r6, pc}
 8004184:	f855 3b04 	ldr.w	r3, [r5], #4
 8004188:	4798      	blx	r3
 800418a:	3601      	adds	r6, #1
 800418c:	e7ee      	b.n	800416c <__libc_init_array+0xc>
 800418e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004192:	4798      	blx	r3
 8004194:	3601      	adds	r6, #1
 8004196:	e7f2      	b.n	800417e <__libc_init_array+0x1e>
 8004198:	080041fc 	.word	0x080041fc
 800419c:	080041fc 	.word	0x080041fc
 80041a0:	080041fc 	.word	0x080041fc
 80041a4:	08004200 	.word	0x08004200

080041a8 <memset>:
 80041a8:	4402      	add	r2, r0
 80041aa:	4603      	mov	r3, r0
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d100      	bne.n	80041b2 <memset+0xa>
 80041b0:	4770      	bx	lr
 80041b2:	f803 1b01 	strb.w	r1, [r3], #1
 80041b6:	e7f9      	b.n	80041ac <memset+0x4>

080041b8 <_init>:
 80041b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ba:	bf00      	nop
 80041bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041be:	bc08      	pop	{r3}
 80041c0:	469e      	mov	lr, r3
 80041c2:	4770      	bx	lr

080041c4 <_fini>:
 80041c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c6:	bf00      	nop
 80041c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ca:	bc08      	pop	{r3}
 80041cc:	469e      	mov	lr, r3
 80041ce:	4770      	bx	lr
