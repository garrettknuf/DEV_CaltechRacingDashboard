
DisplayILI9488.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e64  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003028  08003028  00013028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003040  08003040  00024a04  2**0
                  CONTENTS
  4 .ARM          00000008  08003040  08003040  00013040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003048  08003048  00024a04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003048  08003048  00013048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800304c  0800304c  0001304c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00004a04  20000000  08003050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20004a04  08007a54  00024a04  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004adc  08007a54  00024adc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00024a04  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb2e  00000000  00000000  00024a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d49  00000000  00000000  00030562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  000322b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a8  00000000  00000000  00032c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002bc2  00000000  00000000  000334f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c674  00000000  00000000  000360b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6735  00000000  00000000  00042726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00108e5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002548  00000000  00000000  00108eac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20004a04 	.word	0x20004a04
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003010 	.word	0x08003010

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20004a08 	.word	0x20004a08
 8000200:	08003010 	.word	0x08003010

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <Button_Init>:

static button_t btn1, btn2, btn3;

static button_t *button_list[BTN_CNT] = {&btn1, &btn2, &btn3};

void Button_Init(void) {
 8000508:	b480      	push	{r7}
 800050a:	b087      	sub	sp, #28
 800050c:	af00      	add	r7, sp, #0
	btn1 = (button_t){.id = BTN_ID_1, .counter = 0, .fxn = NULL};
 800050e:	4b10      	ldr	r3, [pc, #64]	; (8000550 <Button_Init+0x48>)
 8000510:	2200      	movs	r2, #0
 8000512:	701a      	strb	r2, [r3, #0]
 8000514:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <Button_Init+0x48>)
 8000516:	2200      	movs	r2, #0
 8000518:	705a      	strb	r2, [r3, #1]
 800051a:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <Button_Init+0x48>)
 800051c:	2200      	movs	r2, #0
 800051e:	605a      	str	r2, [r3, #4]
	btn2 = (button_t){.id = BTN_ID_2, .counter = 0, .fxn = NULL};
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <Button_Init+0x4c>)
 8000522:	2201      	movs	r2, #1
 8000524:	701a      	strb	r2, [r3, #0]
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <Button_Init+0x4c>)
 8000528:	2200      	movs	r2, #0
 800052a:	705a      	strb	r2, [r3, #1]
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <Button_Init+0x4c>)
 800052e:	2200      	movs	r2, #0
 8000530:	605a      	str	r2, [r3, #4]
	btn3 = (button_t){.id = BTN_ID_3, .counter = 0, .fxn = NULL};
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <Button_Init+0x50>)
 8000534:	2202      	movs	r2, #2
 8000536:	701a      	strb	r2, [r3, #0]
 8000538:	4b07      	ldr	r3, [pc, #28]	; (8000558 <Button_Init+0x50>)
 800053a:	2200      	movs	r2, #0
 800053c:	705a      	strb	r2, [r3, #1]
 800053e:	4b06      	ldr	r3, [pc, #24]	; (8000558 <Button_Init+0x50>)
 8000540:	2200      	movs	r2, #0
 8000542:	605a      	str	r2, [r3, #4]
}
 8000544:	bf00      	nop
 8000546:	371c      	adds	r7, #28
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	20004a20 	.word	0x20004a20
 8000554:	20004a28 	.word	0x20004a28
 8000558:	20004a30 	.word	0x20004a30

0800055c <Display_Init>:

/* Auto-generated includes */
#include "main.h"

void Display_Init(SPI_HandleTypeDef *hspi)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	/* Hardware reset display */
	Display_HWReset(hspi);
 8000564:	6878      	ldr	r0, [r7, #4]
 8000566:	f000 f82d 	bl	80005c4 <Display_HWReset>

	/* Software reset */
	Display_TransmitCmd(hspi, DISPLAY_SWRESET);
 800056a:	2101      	movs	r1, #1
 800056c:	6878      	ldr	r0, [r7, #4]
 800056e:	f000 f843 	bl	80005f8 <Display_TransmitCmd>
	HAL_Delay(250);
 8000572:	20fa      	movs	r0, #250	; 0xfa
 8000574:	f000 ff2e 	bl	80013d4 <HAL_Delay>

	/* Exit sleep mode */
	Display_TransmitCmd(hspi, DISPLAY_SLEEPOUT);
 8000578:	2111      	movs	r1, #17
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f000 f83c 	bl	80005f8 <Display_TransmitCmd>
	HAL_Delay(100);
 8000580:	2064      	movs	r0, #100	; 0x64
 8000582:	f000 ff27 	bl	80013d4 <HAL_Delay>

	/* 4-line serial interface mode control */
	Display_TransmitCmdParam(hspi, DISPLAY_INTMCTRL, 0x00);
 8000586:	2200      	movs	r2, #0
 8000588:	21b0      	movs	r1, #176	; 0xb0
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f000 f878 	bl	8000680 <Display_TransmitCmdParam>

	/* 3-bit RGB interface pixel format */
	Display_TransmitCmdParam(hspi, DISPLAY_INTPXLFMT, 0x01);
 8000590:	2201      	movs	r2, #1
 8000592:	213a      	movs	r1, #58	; 0x3a
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f000 f873 	bl	8000680 <Display_TransmitCmdParam>

	/* Memory access control sets scanning direction of frame memory */
	// was 0x08
	Display_TransmitCmdParam(hspi, DISPLAY_MEMACTRL, 0x08);
 800059a:	2208      	movs	r2, #8
 800059c:	2136      	movs	r1, #54	; 0x36
 800059e:	6878      	ldr	r0, [r7, #4]
 80005a0:	f000 f86e 	bl	8000680 <Display_TransmitCmdParam>

	/* TODO modify positive, negative, and digital gamma settings */

	/* Exit sleep mode */
	Display_TransmitCmd(hspi, DISPLAY_SLEEPOUT);
 80005a4:	2111      	movs	r1, #17
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f000 f826 	bl	80005f8 <Display_TransmitCmd>
	HAL_Delay(250);
 80005ac:	20fa      	movs	r0, #250	; 0xfa
 80005ae:	f000 ff11 	bl	80013d4 <HAL_Delay>

	/* Turn display on */
	Display_TransmitCmd(hspi, DISPLAY_DISPON);
 80005b2:	2129      	movs	r1, #41	; 0x29
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f000 f81f 	bl	80005f8 <Display_TransmitCmd>
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <Display_HWReset>:

void Display_HWReset(SPI_HandleTypeDef *hspi)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	/* Hold RESET pin LOW with delay */
	HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_RESET);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2101      	movs	r1, #1
 80005d0:	4808      	ldr	r0, [pc, #32]	; (80005f4 <Display_HWReset+0x30>)
 80005d2:	f001 f99d 	bl	8001910 <HAL_GPIO_WritePin>
	HAL_Delay(DISPLAY_RESET_TIME_MS);
 80005d6:	200a      	movs	r0, #10
 80005d8:	f000 fefc 	bl	80013d4 <HAL_Delay>

	/* Set RESET pin HIGH and wait for system reset to complete */
	HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	2101      	movs	r1, #1
 80005e0:	4804      	ldr	r0, [pc, #16]	; (80005f4 <Display_HWReset+0x30>)
 80005e2:	f001 f995 	bl	8001910 <HAL_GPIO_WritePin>
	HAL_Delay(DISPLAY_RESET_TIME_MS);
 80005e6:	200a      	movs	r0, #10
 80005e8:	f000 fef4 	bl	80013d4 <HAL_Delay>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40020800 	.word	0x40020800

080005f8 <Display_TransmitCmd>:

void Display_TransmitCmd(SPI_HandleTypeDef *hspi, uint8_t cmd)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	460b      	mov	r3, r1
 8000602:	70fb      	strb	r3, [r7, #3]
	/* DC/RS LOW since writing command */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	2101      	movs	r1, #1
 8000608:	480b      	ldr	r0, [pc, #44]	; (8000638 <Display_TransmitCmd+0x40>)
 800060a:	f001 f981 	bl	8001910 <HAL_GPIO_WritePin>

	/* Set CS LOW */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	2110      	movs	r1, #16
 8000612:	4809      	ldr	r0, [pc, #36]	; (8000638 <Display_TransmitCmd+0x40>)
 8000614:	f001 f97c 	bl	8001910 <HAL_GPIO_WritePin>

	/* Write SPI data */
	HAL_SPI_Transmit(hspi, &cmd, sizeof(uint8_t), SPI_TIMEOUT_MS);
 8000618:	1cf9      	adds	r1, r7, #3
 800061a:	2364      	movs	r3, #100	; 0x64
 800061c:	2201      	movs	r2, #1
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f002 f801 	bl	8002626 <HAL_SPI_Transmit>

	/* Set CS HIGH */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000624:	2201      	movs	r2, #1
 8000626:	2110      	movs	r1, #16
 8000628:	4803      	ldr	r0, [pc, #12]	; (8000638 <Display_TransmitCmd+0x40>)
 800062a:	f001 f971 	bl	8001910 <HAL_GPIO_WritePin>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40020400 	.word	0x40020400

0800063c <Display_TransmitParam>:

void Display_TransmitParam(SPI_HandleTypeDef *hspi, uint8_t param)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	460b      	mov	r3, r1
 8000646:	70fb      	strb	r3, [r7, #3]
	/* DC/RS HIGH since writing data */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_SET);
 8000648:	2201      	movs	r2, #1
 800064a:	2101      	movs	r1, #1
 800064c:	480b      	ldr	r0, [pc, #44]	; (800067c <Display_TransmitParam+0x40>)
 800064e:	f001 f95f 	bl	8001910 <HAL_GPIO_WritePin>

	/* Set CS LOW */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2110      	movs	r1, #16
 8000656:	4809      	ldr	r0, [pc, #36]	; (800067c <Display_TransmitParam+0x40>)
 8000658:	f001 f95a 	bl	8001910 <HAL_GPIO_WritePin>

	/* Write SPI data */
	HAL_SPI_Transmit(hspi, &param, sizeof(uint8_t), SPI_TIMEOUT_MS);
 800065c:	1cf9      	adds	r1, r7, #3
 800065e:	2364      	movs	r3, #100	; 0x64
 8000660:	2201      	movs	r2, #1
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f001 ffdf 	bl	8002626 <HAL_SPI_Transmit>

	/* Set CS HIGH */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000668:	2201      	movs	r2, #1
 800066a:	2110      	movs	r1, #16
 800066c:	4803      	ldr	r0, [pc, #12]	; (800067c <Display_TransmitParam+0x40>)
 800066e:	f001 f94f 	bl	8001910 <HAL_GPIO_WritePin>
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40020400 	.word	0x40020400

08000680 <Display_TransmitCmdParam>:

void Display_TransmitCmdParam(SPI_HandleTypeDef *hspi, uint8_t cmd, uint8_t param)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	460b      	mov	r3, r1
 800068a:	70fb      	strb	r3, [r7, #3]
 800068c:	4613      	mov	r3, r2
 800068e:	70bb      	strb	r3, [r7, #2]
	/* Send command */
	Display_TransmitCmd(hspi, cmd);
 8000690:	78fb      	ldrb	r3, [r7, #3]
 8000692:	4619      	mov	r1, r3
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f7ff ffaf 	bl	80005f8 <Display_TransmitCmd>

	/* Send parameter */
	Display_TransmitParam(hspi, param);
 800069a:	78bb      	ldrb	r3, [r7, #2]
 800069c:	4619      	mov	r1, r3
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f7ff ffcc 	bl	800063c <Display_TransmitParam>
}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <Display_SetWindow>:

void Display_SetWindow(SPI_HandleTypeDef *hspi, uint16_t xs, uint16_t ys, uint16_t xe, uint16_t ye)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	4608      	mov	r0, r1
 80006b6:	4611      	mov	r1, r2
 80006b8:	461a      	mov	r2, r3
 80006ba:	4603      	mov	r3, r0
 80006bc:	817b      	strh	r3, [r7, #10]
 80006be:	460b      	mov	r3, r1
 80006c0:	813b      	strh	r3, [r7, #8]
 80006c2:	4613      	mov	r3, r2
 80006c4:	80fb      	strh	r3, [r7, #6]
	/* Check coordinate are not out of range */
	if ((xs > xe) || (xe > DISPLAY_MAX_X) || (ys > ye) || (ye > DISPLAY_MAX_Y)) {
 80006c6:	897a      	ldrh	r2, [r7, #10]
 80006c8:	88fb      	ldrh	r3, [r7, #6]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	f200 808d 	bhi.w	80007ea <Display_SetWindow+0x13e>
 80006d0:	88fb      	ldrh	r3, [r7, #6]
 80006d2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80006d6:	f080 8088 	bcs.w	80007ea <Display_SetWindow+0x13e>
 80006da:	893a      	ldrh	r2, [r7, #8]
 80006dc:	8c3b      	ldrh	r3, [r7, #32]
 80006de:	429a      	cmp	r2, r3
 80006e0:	f200 8083 	bhi.w	80007ea <Display_SetWindow+0x13e>
 80006e4:	8c3b      	ldrh	r3, [r7, #32]
 80006e6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80006ea:	d27e      	bcs.n	80007ea <Display_SetWindow+0x13e>
		/* Error so do nothing */
		return;
	}

	/* Set column range */
	Display_TransmitCmd(hspi, DISPLAY_COLADDRSET);
 80006ec:	212a      	movs	r1, #42	; 0x2a
 80006ee:	68f8      	ldr	r0, [r7, #12]
 80006f0:	f7ff ff82 	bl	80005f8 <Display_TransmitCmd>

	/* Set DC/RS LOW since transmitting date */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_SET);
 80006f4:	2201      	movs	r2, #1
 80006f6:	2101      	movs	r1, #1
 80006f8:	483e      	ldr	r0, [pc, #248]	; (80007f4 <Display_SetWindow+0x148>)
 80006fa:	f001 f909 	bl	8001910 <HAL_GPIO_WritePin>

	/* Hold CS LOW until all parameters have been sent */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2110      	movs	r1, #16
 8000702:	483c      	ldr	r0, [pc, #240]	; (80007f4 <Display_SetWindow+0x148>)
 8000704:	f001 f904 	bl	8001910 <HAL_GPIO_WritePin>

	/* Write column start and end data */
	uint8_t byte = ys >> 8;	// SC[15:8]
 8000708:	893b      	ldrh	r3, [r7, #8]
 800070a:	0a1b      	lsrs	r3, r3, #8
 800070c:	b29b      	uxth	r3, r3
 800070e:	b2db      	uxtb	r3, r3
 8000710:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(hspi, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 8000712:	f107 0117 	add.w	r1, r7, #23
 8000716:	2364      	movs	r3, #100	; 0x64
 8000718:	2201      	movs	r2, #1
 800071a:	68f8      	ldr	r0, [r7, #12]
 800071c:	f001 ff83 	bl	8002626 <HAL_SPI_Transmit>
	byte = ys & 0xFF;		// SC[7:0]
 8000720:	893b      	ldrh	r3, [r7, #8]
 8000722:	b2db      	uxtb	r3, r3
 8000724:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(hspi, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 8000726:	f107 0117 	add.w	r1, r7, #23
 800072a:	2364      	movs	r3, #100	; 0x64
 800072c:	2201      	movs	r2, #1
 800072e:	68f8      	ldr	r0, [r7, #12]
 8000730:	f001 ff79 	bl	8002626 <HAL_SPI_Transmit>
	byte = ye >> 8;			// EC[15:8]
 8000734:	8c3b      	ldrh	r3, [r7, #32]
 8000736:	0a1b      	lsrs	r3, r3, #8
 8000738:	b29b      	uxth	r3, r3
 800073a:	b2db      	uxtb	r3, r3
 800073c:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(hspi, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 800073e:	f107 0117 	add.w	r1, r7, #23
 8000742:	2364      	movs	r3, #100	; 0x64
 8000744:	2201      	movs	r2, #1
 8000746:	68f8      	ldr	r0, [r7, #12]
 8000748:	f001 ff6d 	bl	8002626 <HAL_SPI_Transmit>
	byte = ye & 0xFF;		// EC[7:0]
 800074c:	8c3b      	ldrh	r3, [r7, #32]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(hspi, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 8000752:	f107 0117 	add.w	r1, r7, #23
 8000756:	2364      	movs	r3, #100	; 0x64
 8000758:	2201      	movs	r2, #1
 800075a:	68f8      	ldr	r0, [r7, #12]
 800075c:	f001 ff63 	bl	8002626 <HAL_SPI_Transmit>

	/* Last parameter sent so end transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000760:	2201      	movs	r2, #1
 8000762:	2110      	movs	r1, #16
 8000764:	4823      	ldr	r0, [pc, #140]	; (80007f4 <Display_SetWindow+0x148>)
 8000766:	f001 f8d3 	bl	8001910 <HAL_GPIO_WritePin>

	/* Set page range */
	Display_TransmitCmd(hspi, DISPLAY_PGADDRSET);
 800076a:	212b      	movs	r1, #43	; 0x2b
 800076c:	68f8      	ldr	r0, [r7, #12]
 800076e:	f7ff ff43 	bl	80005f8 <Display_TransmitCmd>

	/* Set DC/RS LOW since transmitting date */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_SET);
 8000772:	2201      	movs	r2, #1
 8000774:	2101      	movs	r1, #1
 8000776:	481f      	ldr	r0, [pc, #124]	; (80007f4 <Display_SetWindow+0x148>)
 8000778:	f001 f8ca 	bl	8001910 <HAL_GPIO_WritePin>

	/* Begin multi-parameter transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	2110      	movs	r1, #16
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <Display_SetWindow+0x148>)
 8000782:	f001 f8c5 	bl	8001910 <HAL_GPIO_WritePin>

	/* Write page start and end data */
	byte = xs >> 8;		// SP[15:8]
 8000786:	897b      	ldrh	r3, [r7, #10]
 8000788:	0a1b      	lsrs	r3, r3, #8
 800078a:	b29b      	uxth	r3, r3
 800078c:	b2db      	uxtb	r3, r3
 800078e:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(hspi, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 8000790:	f107 0117 	add.w	r1, r7, #23
 8000794:	2364      	movs	r3, #100	; 0x64
 8000796:	2201      	movs	r2, #1
 8000798:	68f8      	ldr	r0, [r7, #12]
 800079a:	f001 ff44 	bl	8002626 <HAL_SPI_Transmit>
	byte = xs & 0xFF;	// SP[7:0]
 800079e:	897b      	ldrh	r3, [r7, #10]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(hspi, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80007a4:	f107 0117 	add.w	r1, r7, #23
 80007a8:	2364      	movs	r3, #100	; 0x64
 80007aa:	2201      	movs	r2, #1
 80007ac:	68f8      	ldr	r0, [r7, #12]
 80007ae:	f001 ff3a 	bl	8002626 <HAL_SPI_Transmit>
	byte = xe >> 8;		// EP[15:8]
 80007b2:	88fb      	ldrh	r3, [r7, #6]
 80007b4:	0a1b      	lsrs	r3, r3, #8
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(hspi, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80007bc:	f107 0117 	add.w	r1, r7, #23
 80007c0:	2364      	movs	r3, #100	; 0x64
 80007c2:	2201      	movs	r2, #1
 80007c4:	68f8      	ldr	r0, [r7, #12]
 80007c6:	f001 ff2e 	bl	8002626 <HAL_SPI_Transmit>
	byte = xe & 0xFF;	// EP[7:0]
 80007ca:	88fb      	ldrh	r3, [r7, #6]
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(hspi, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80007d0:	f107 0117 	add.w	r1, r7, #23
 80007d4:	2364      	movs	r3, #100	; 0x64
 80007d6:	2201      	movs	r2, #1
 80007d8:	68f8      	ldr	r0, [r7, #12]
 80007da:	f001 ff24 	bl	8002626 <HAL_SPI_Transmit>

	/* Last parameter sent so end transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80007de:	2201      	movs	r2, #1
 80007e0:	2110      	movs	r1, #16
 80007e2:	4804      	ldr	r0, [pc, #16]	; (80007f4 <Display_SetWindow+0x148>)
 80007e4:	f001 f894 	bl	8001910 <HAL_GPIO_WritePin>
 80007e8:	e000      	b.n	80007ec <Display_SetWindow+0x140>
		return;
 80007ea:	bf00      	nop
}
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40020400 	.word	0x40020400

080007f8 <Display_DrawRect>:

void Display_DrawRect(SPI_HandleTypeDef *hspi, uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t color)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b088      	sub	sp, #32
 80007fc:	af02      	add	r7, sp, #8
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	4608      	mov	r0, r1
 8000802:	4611      	mov	r1, r2
 8000804:	461a      	mov	r2, r3
 8000806:	4603      	mov	r3, r0
 8000808:	817b      	strh	r3, [r7, #10]
 800080a:	460b      	mov	r3, r1
 800080c:	813b      	strh	r3, [r7, #8]
 800080e:	4613      	mov	r3, r2
 8000810:	80fb      	strh	r3, [r7, #6]
	/* Set window of rectangle */
	Display_SetWindow(hspi, x, y, x + w - 1, y + h - 1);
 8000812:	897a      	ldrh	r2, [r7, #10]
 8000814:	88fb      	ldrh	r3, [r7, #6]
 8000816:	4413      	add	r3, r2
 8000818:	b29b      	uxth	r3, r3
 800081a:	3b01      	subs	r3, #1
 800081c:	b298      	uxth	r0, r3
 800081e:	893a      	ldrh	r2, [r7, #8]
 8000820:	8c3b      	ldrh	r3, [r7, #32]
 8000822:	4413      	add	r3, r2
 8000824:	b29b      	uxth	r3, r3
 8000826:	3b01      	subs	r3, #1
 8000828:	b29b      	uxth	r3, r3
 800082a:	893a      	ldrh	r2, [r7, #8]
 800082c:	8979      	ldrh	r1, [r7, #10]
 800082e:	9300      	str	r3, [sp, #0]
 8000830:	4603      	mov	r3, r0
 8000832:	68f8      	ldr	r0, [r7, #12]
 8000834:	f7ff ff3a 	bl	80006ac <Display_SetWindow>

	/* Set up writing to frame buffer */
	Display_TransmitCmd(hspi, DISPLAY_MEMWR);
 8000838:	212c      	movs	r1, #44	; 0x2c
 800083a:	68f8      	ldr	r0, [r7, #12]
 800083c:	f7ff fedc 	bl	80005f8 <Display_TransmitCmd>

	/* Set up sending data to display */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_SET);
 8000840:	2201      	movs	r2, #1
 8000842:	2101      	movs	r1, #1
 8000844:	4814      	ldr	r0, [pc, #80]	; (8000898 <Display_DrawRect+0xa0>)
 8000846:	f001 f863 	bl	8001910 <HAL_GPIO_WritePin>

	/* Set CS LOW to begin transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2110      	movs	r1, #16
 800084e:	4812      	ldr	r0, [pc, #72]	; (8000898 <Display_DrawRect+0xa0>)
 8000850:	f001 f85e 	bl	8001910 <HAL_GPIO_WritePin>

	/* Write the color to every pixel in the frame buffer. Since 3-bit RGB is
	 * used for color there is data for 2 pixels in each byte, hence divide
	 * the number of pixels to write to by 2 */
	for (uint32_t i = 0; i < w * h / 2; i++) {
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	e009      	b.n	800086e <Display_DrawRect+0x76>
		HAL_SPI_Transmit(hspi, &color, sizeof(uint8_t), SPI_TIMEOUT_MS);
 800085a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800085e:	2364      	movs	r3, #100	; 0x64
 8000860:	2201      	movs	r2, #1
 8000862:	68f8      	ldr	r0, [r7, #12]
 8000864:	f001 fedf 	bl	8002626 <HAL_SPI_Transmit>
	for (uint32_t i = 0; i < w * h / 2; i++) {
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	3301      	adds	r3, #1
 800086c:	617b      	str	r3, [r7, #20]
 800086e:	88fb      	ldrh	r3, [r7, #6]
 8000870:	8c3a      	ldrh	r2, [r7, #32]
 8000872:	fb02 f303 	mul.w	r3, r2, r3
 8000876:	0fda      	lsrs	r2, r3, #31
 8000878:	4413      	add	r3, r2
 800087a:	105b      	asrs	r3, r3, #1
 800087c:	461a      	mov	r2, r3
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	4293      	cmp	r3, r2
 8000882:	d3ea      	bcc.n	800085a <Display_DrawRect+0x62>
	}

	/* Set CS HIGH to end transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2110      	movs	r1, #16
 8000888:	4803      	ldr	r0, [pc, #12]	; (8000898 <Display_DrawRect+0xa0>)
 800088a:	f001 f841 	bl	8001910 <HAL_GPIO_WritePin>
}
 800088e:	bf00      	nop
 8000890:	3718      	adds	r7, #24
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40020400 	.word	0x40020400

0800089c <Display_FillScreen>:
	/* Set CS HIGH to end transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
}

void Display_FillScreen(SPI_HandleTypeDef *hspi, uint8_t color)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af02      	add	r7, sp, #8
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	460b      	mov	r3, r1
 80008a6:	70fb      	strb	r3, [r7, #3]
	/* Set entire display as window */
	Display_SetWindow(hspi, 0, 0, DISPLAY_MAX_X, DISPLAY_MAX_Y);
 80008a8:	f240 133f 	movw	r3, #319	; 0x13f
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	f240 13df 	movw	r3, #479	; 0x1df
 80008b2:	2200      	movs	r2, #0
 80008b4:	2100      	movs	r1, #0
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff fef8 	bl	80006ac <Display_SetWindow>

	/* Set up writing to frame buffer */
	Display_TransmitCmd(hspi, DISPLAY_MEMWR);
 80008bc:	212c      	movs	r1, #44	; 0x2c
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff fe9a 	bl	80005f8 <Display_TransmitCmd>

	/* Set up sending data to display */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_SET);
 80008c4:	2201      	movs	r2, #1
 80008c6:	2101      	movs	r1, #1
 80008c8:	4810      	ldr	r0, [pc, #64]	; (800090c <Display_FillScreen+0x70>)
 80008ca:	f001 f821 	bl	8001910 <HAL_GPIO_WritePin>

	/* Set CS LOW to begin transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2110      	movs	r1, #16
 80008d2:	480e      	ldr	r0, [pc, #56]	; (800090c <Display_FillScreen+0x70>)
 80008d4:	f001 f81c 	bl	8001910 <HAL_GPIO_WritePin>

	/* Write the color to every pixel in the frame buffer. Since 3-bit RGB
	 * stores color data for 2 pixels in 1 byte, the total number of data
	 * bytes is the total number of pixels divided by 2 */
	for (uint32_t i = 0; i < DISPLAY_CACHE_MEM / 2; i++) {
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	e008      	b.n	80008f0 <Display_FillScreen+0x54>
		HAL_SPI_Transmit(hspi, &color, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80008de:	1cf9      	adds	r1, r7, #3
 80008e0:	2364      	movs	r3, #100	; 0x64
 80008e2:	2201      	movs	r2, #1
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f001 fe9e 	bl	8002626 <HAL_SPI_Transmit>
	for (uint32_t i = 0; i < DISPLAY_CACHE_MEM / 2; i++) {
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	3301      	adds	r3, #1
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 80008f6:	d3f2      	bcc.n	80008de <Display_FillScreen+0x42>
	}

	/* Set CS HIGH to end transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	2110      	movs	r1, #16
 80008fc:	4803      	ldr	r0, [pc, #12]	; (800090c <Display_FillScreen+0x70>)
 80008fe:	f001 f807 	bl	8001910 <HAL_GPIO_WritePin>
}
 8000902:	bf00      	nop
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40020400 	.word	0x40020400

08000910 <Display_Image>:
void Display_ClearScreen(SPI_HandleTypeDef *hspi, uint16_t color) {
	// TODO
}

void Display_Image(SPI_HandleTypeDef *hspi, uint16_t x, uint16_t y,
					uint16_t w, uint16_t h, uint8_t *pixels) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b088      	sub	sp, #32
 8000914:	af02      	add	r7, sp, #8
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	4608      	mov	r0, r1
 800091a:	4611      	mov	r1, r2
 800091c:	461a      	mov	r2, r3
 800091e:	4603      	mov	r3, r0
 8000920:	817b      	strh	r3, [r7, #10]
 8000922:	460b      	mov	r3, r1
 8000924:	813b      	strh	r3, [r7, #8]
 8000926:	4613      	mov	r3, r2
 8000928:	80fb      	strh	r3, [r7, #6]

	/* Set window to display image */
	Display_SetWindow(hspi, x, y, x+w-1, y+h-1);
 800092a:	897a      	ldrh	r2, [r7, #10]
 800092c:	88fb      	ldrh	r3, [r7, #6]
 800092e:	4413      	add	r3, r2
 8000930:	b29b      	uxth	r3, r3
 8000932:	3b01      	subs	r3, #1
 8000934:	b298      	uxth	r0, r3
 8000936:	893a      	ldrh	r2, [r7, #8]
 8000938:	8c3b      	ldrh	r3, [r7, #32]
 800093a:	4413      	add	r3, r2
 800093c:	b29b      	uxth	r3, r3
 800093e:	3b01      	subs	r3, #1
 8000940:	b29b      	uxth	r3, r3
 8000942:	893a      	ldrh	r2, [r7, #8]
 8000944:	8979      	ldrh	r1, [r7, #10]
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	4603      	mov	r3, r0
 800094a:	68f8      	ldr	r0, [r7, #12]
 800094c:	f7ff feae 	bl	80006ac <Display_SetWindow>

	/* Set up writing to frame buffer */
	Display_TransmitCmd(hspi, DISPLAY_MEMWR);
 8000950:	212c      	movs	r1, #44	; 0x2c
 8000952:	68f8      	ldr	r0, [r7, #12]
 8000954:	f7ff fe50 	bl	80005f8 <Display_TransmitCmd>

	/* Set up sending data to display */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	2101      	movs	r1, #1
 800095c:	4814      	ldr	r0, [pc, #80]	; (80009b0 <Display_Image+0xa0>)
 800095e:	f000 ffd7 	bl	8001910 <HAL_GPIO_WritePin>

	/* Set CS LOW to begin transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2110      	movs	r1, #16
 8000966:	4812      	ldr	r0, [pc, #72]	; (80009b0 <Display_Image+0xa0>)
 8000968:	f000 ffd2 	bl	8001910 <HAL_GPIO_WritePin>

	for (uint32_t i = 0; i < w*h / 2; i++) {
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	e00a      	b.n	8000988 <Display_Image+0x78>
		HAL_SPI_Transmit(hspi, &(pixels[i]), sizeof(uint8_t), SPI_TIMEOUT_MS);
 8000972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	18d1      	adds	r1, r2, r3
 8000978:	2364      	movs	r3, #100	; 0x64
 800097a:	2201      	movs	r2, #1
 800097c:	68f8      	ldr	r0, [r7, #12]
 800097e:	f001 fe52 	bl	8002626 <HAL_SPI_Transmit>
	for (uint32_t i = 0; i < w*h / 2; i++) {
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	3301      	adds	r3, #1
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	88fb      	ldrh	r3, [r7, #6]
 800098a:	8c3a      	ldrh	r2, [r7, #32]
 800098c:	fb02 f303 	mul.w	r3, r2, r3
 8000990:	0fda      	lsrs	r2, r3, #31
 8000992:	4413      	add	r3, r2
 8000994:	105b      	asrs	r3, r3, #1
 8000996:	461a      	mov	r2, r3
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	4293      	cmp	r3, r2
 800099c:	d3e9      	bcc.n	8000972 <Display_Image+0x62>
	}

	/* Set CS HIGH to end transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	2110      	movs	r1, #16
 80009a2:	4803      	ldr	r0, [pc, #12]	; (80009b0 <Display_Image+0xa0>)
 80009a4:	f000 ffb4 	bl	8001910 <HAL_GPIO_WritePin>
}
 80009a8:	bf00      	nop
 80009aa:	3718      	adds	r7, #24
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40020400 	.word	0x40020400

080009b4 <Gfx_Init>:
	0b1110000, // 7
	0b1111111, // 8
	0b1110011  // 9
};

void Gfx_Init(void) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	Gfx_SetBackground(COLOR_BLACK);
 80009b8:	2000      	movs	r0, #0
 80009ba:	f000 f803 	bl	80009c4 <Gfx_SetBackground>
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <Gfx_SetBackground>:

void Gfx_SetBackground(uint8_t color) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
	background_color = color;
 80009ce:	4a06      	ldr	r2, [pc, #24]	; (80009e8 <Gfx_SetBackground+0x24>)
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	7013      	strb	r3, [r2, #0]
	Display_FillScreen(&hspi2, color);
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	4619      	mov	r1, r3
 80009d8:	4804      	ldr	r0, [pc, #16]	; (80009ec <Gfx_SetBackground+0x28>)
 80009da:	f7ff ff5f 	bl	800089c <Display_FillScreen>
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20004a38 	.word	0x20004a38
 80009ec:	20004a3c 	.word	0x20004a3c

080009f0 <Gfx_DrawDigit>:

void Gfx_DrawDigit(uint16_t x, uint16_t y, uint8_t digit, uint8_t font_height, uint8_t color) {
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b087      	sub	sp, #28
 80009f4:	af02      	add	r7, sp, #8
 80009f6:	4604      	mov	r4, r0
 80009f8:	4608      	mov	r0, r1
 80009fa:	4611      	mov	r1, r2
 80009fc:	461a      	mov	r2, r3
 80009fe:	4623      	mov	r3, r4
 8000a00:	80fb      	strh	r3, [r7, #6]
 8000a02:	4603      	mov	r3, r0
 8000a04:	80bb      	strh	r3, [r7, #4]
 8000a06:	460b      	mov	r3, r1
 8000a08:	70fb      	strb	r3, [r7, #3]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	70bb      	strb	r3, [r7, #2]
	if (digit < 0 || digit > 9) {
 8000a0e:	78fb      	ldrb	r3, [r7, #3]
 8000a10:	2b09      	cmp	r3, #9
 8000a12:	f200 8112 	bhi.w	8000c3a <Gfx_DrawDigit+0x24a>
		// Do nothing if digit is not a valid value
		return;
	}

	/* thickness of each segment */
	uint8_t thickness = font_height / 10;
 8000a16:	78bb      	ldrb	r3, [r7, #2]
 8000a18:	4a8a      	ldr	r2, [pc, #552]	; (8000c44 <Gfx_DrawDigit+0x254>)
 8000a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a1e:	08db      	lsrs	r3, r3, #3
 8000a20:	73fb      	strb	r3, [r7, #15]

	/* length of each segment */
	uint8_t seg_len = (font_height - (thickness * 2)) / 2;
 8000a22:	78ba      	ldrb	r2, [r7, #2]
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	0fda      	lsrs	r2, r3, #31
 8000a2c:	4413      	add	r3, r2
 8000a2e:	105b      	asrs	r3, r3, #1
 8000a30:	73bb      	strb	r3, [r7, #14]

	/* for small fonts make the segments slightly thicker */
	if (font_height < 40) {
 8000a32:	78bb      	ldrb	r3, [r7, #2]
 8000a34:	2b27      	cmp	r3, #39	; 0x27
 8000a36:	d802      	bhi.n	8000a3e <Gfx_DrawDigit+0x4e>
		thickness += 2;
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	3302      	adds	r3, #2
 8000a3c:	73fb      	strb	r3, [r7, #15]
	}

	/* Get abcdefg pattern for digit */
	uint8_t pattern = digit_patterns[digit];
 8000a3e:	78fb      	ldrb	r3, [r7, #3]
 8000a40:	4a81      	ldr	r2, [pc, #516]	; (8000c48 <Gfx_DrawDigit+0x258>)
 8000a42:	5cd3      	ldrb	r3, [r2, r3]
 8000a44:	737b      	strb	r3, [r7, #13]
	/* Active segments are set to color */
	/* Inactive segments are set to background color */
	uint8_t new_color;

	// a
	new_color = ((pattern & SEG_A_MASK) ? color : background_color);
 8000a46:	7b7b      	ldrb	r3, [r7, #13]
 8000a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d002      	beq.n	8000a56 <Gfx_DrawDigit+0x66>
 8000a50:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a54:	e001      	b.n	8000a5a <Gfx_DrawDigit+0x6a>
 8000a56:	4b7d      	ldr	r3, [pc, #500]	; (8000c4c <Gfx_DrawDigit+0x25c>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	733b      	strb	r3, [r7, #12]
	Display_DrawRect(&hspi2, x+thickness, y, seg_len, thickness, new_color);
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	88fb      	ldrh	r3, [r7, #6]
 8000a62:	4413      	add	r3, r2
 8000a64:	b299      	uxth	r1, r3
 8000a66:	7bbb      	ldrb	r3, [r7, #14]
 8000a68:	b29c      	uxth	r4, r3
 8000a6a:	7bfb      	ldrb	r3, [r7, #15]
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	88b8      	ldrh	r0, [r7, #4]
 8000a70:	7b3a      	ldrb	r2, [r7, #12]
 8000a72:	9201      	str	r2, [sp, #4]
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	4623      	mov	r3, r4
 8000a78:	4602      	mov	r2, r0
 8000a7a:	4875      	ldr	r0, [pc, #468]	; (8000c50 <Gfx_DrawDigit+0x260>)
 8000a7c:	f7ff febc 	bl	80007f8 <Display_DrawRect>

	// b
	new_color = ((pattern & SEG_B_MASK) ? color : background_color);
 8000a80:	7b7b      	ldrb	r3, [r7, #13]
 8000a82:	f003 0320 	and.w	r3, r3, #32
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d002      	beq.n	8000a90 <Gfx_DrawDigit+0xa0>
 8000a8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a8e:	e001      	b.n	8000a94 <Gfx_DrawDigit+0xa4>
 8000a90:	4b6e      	ldr	r3, [pc, #440]	; (8000c4c <Gfx_DrawDigit+0x25c>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	733b      	strb	r3, [r7, #12]
	Display_DrawRect(&hspi2, x+seg_len+thickness, y+thickness, thickness, seg_len, new_color);
 8000a96:	7bbb      	ldrb	r3, [r7, #14]
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	88fb      	ldrh	r3, [r7, #6]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	4413      	add	r3, r2
 8000aa6:	b299      	uxth	r1, r3
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	88bb      	ldrh	r3, [r7, #4]
 8000aae:	4413      	add	r3, r2
 8000ab0:	b298      	uxth	r0, r3
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
 8000ab4:	b29c      	uxth	r4, r3
 8000ab6:	7bbb      	ldrb	r3, [r7, #14]
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	7b3a      	ldrb	r2, [r7, #12]
 8000abc:	9201      	str	r2, [sp, #4]
 8000abe:	9300      	str	r3, [sp, #0]
 8000ac0:	4623      	mov	r3, r4
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	4862      	ldr	r0, [pc, #392]	; (8000c50 <Gfx_DrawDigit+0x260>)
 8000ac6:	f7ff fe97 	bl	80007f8 <Display_DrawRect>

	// c
	new_color = ((pattern & SEG_C_MASK) ? color : background_color);
 8000aca:	7b7b      	ldrb	r3, [r7, #13]
 8000acc:	f003 0310 	and.w	r3, r3, #16
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d002      	beq.n	8000ada <Gfx_DrawDigit+0xea>
 8000ad4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ad8:	e001      	b.n	8000ade <Gfx_DrawDigit+0xee>
 8000ada:	4b5c      	ldr	r3, [pc, #368]	; (8000c4c <Gfx_DrawDigit+0x25c>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	733b      	strb	r3, [r7, #12]
	Display_DrawRect(&hspi2, x+seg_len+thickness, y+(2*thickness)+seg_len, thickness, seg_len, new_color);
 8000ae0:	7bbb      	ldrb	r3, [r7, #14]
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	88fb      	ldrh	r3, [r7, #6]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	4413      	add	r3, r2
 8000af0:	b299      	uxth	r1, r3
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	88bb      	ldrh	r3, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	7bbb      	ldrb	r3, [r7, #14]
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	4413      	add	r3, r2
 8000b06:	b298      	uxth	r0, r3
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	b29c      	uxth	r4, r3
 8000b0c:	7bbb      	ldrb	r3, [r7, #14]
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	7b3a      	ldrb	r2, [r7, #12]
 8000b12:	9201      	str	r2, [sp, #4]
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	4623      	mov	r3, r4
 8000b18:	4602      	mov	r2, r0
 8000b1a:	484d      	ldr	r0, [pc, #308]	; (8000c50 <Gfx_DrawDigit+0x260>)
 8000b1c:	f7ff fe6c 	bl	80007f8 <Display_DrawRect>

	// d
	new_color = ((pattern & SEG_D_MASK) ? color : background_color);
 8000b20:	7b7b      	ldrb	r3, [r7, #13]
 8000b22:	f003 0308 	and.w	r3, r3, #8
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d002      	beq.n	8000b30 <Gfx_DrawDigit+0x140>
 8000b2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b2e:	e001      	b.n	8000b34 <Gfx_DrawDigit+0x144>
 8000b30:	4b46      	ldr	r3, [pc, #280]	; (8000c4c <Gfx_DrawDigit+0x25c>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	733b      	strb	r3, [r7, #12]
	Display_DrawRect(&hspi2, x+thickness, y+(2*thickness)+(2*seg_len), seg_len, thickness, new_color);
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	b299      	uxth	r1, r3
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	7bbb      	ldrb	r3, [r7, #14]
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	4413      	add	r3, r2
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	88bb      	ldrh	r3, [r7, #4]
 8000b52:	4413      	add	r3, r2
 8000b54:	b298      	uxth	r0, r3
 8000b56:	7bbb      	ldrb	r3, [r7, #14]
 8000b58:	b29c      	uxth	r4, r3
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	7b3a      	ldrb	r2, [r7, #12]
 8000b60:	9201      	str	r2, [sp, #4]
 8000b62:	9300      	str	r3, [sp, #0]
 8000b64:	4623      	mov	r3, r4
 8000b66:	4602      	mov	r2, r0
 8000b68:	4839      	ldr	r0, [pc, #228]	; (8000c50 <Gfx_DrawDigit+0x260>)
 8000b6a:	f7ff fe45 	bl	80007f8 <Display_DrawRect>

	// e
	new_color = ((pattern & SEG_E_MASK) ? color : background_color);
 8000b6e:	7b7b      	ldrb	r3, [r7, #13]
 8000b70:	f003 0304 	and.w	r3, r3, #4
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d002      	beq.n	8000b7e <Gfx_DrawDigit+0x18e>
 8000b78:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b7c:	e001      	b.n	8000b82 <Gfx_DrawDigit+0x192>
 8000b7e:	4b33      	ldr	r3, [pc, #204]	; (8000c4c <Gfx_DrawDigit+0x25c>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	733b      	strb	r3, [r7, #12]
	Display_DrawRect(&hspi2, x, y+(2*thickness)+seg_len, thickness, seg_len, new_color);
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	88bb      	ldrh	r3, [r7, #4]
 8000b8e:	4413      	add	r3, r2
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	7bbb      	ldrb	r3, [r7, #14]
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	4413      	add	r3, r2
 8000b98:	b298      	uxth	r0, r3
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	b29c      	uxth	r4, r3
 8000b9e:	7bbb      	ldrb	r3, [r7, #14]
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	88f9      	ldrh	r1, [r7, #6]
 8000ba4:	7b3a      	ldrb	r2, [r7, #12]
 8000ba6:	9201      	str	r2, [sp, #4]
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	4623      	mov	r3, r4
 8000bac:	4602      	mov	r2, r0
 8000bae:	4828      	ldr	r0, [pc, #160]	; (8000c50 <Gfx_DrawDigit+0x260>)
 8000bb0:	f7ff fe22 	bl	80007f8 <Display_DrawRect>

	// f
	new_color = ((pattern & SEG_F_MASK) ? color : background_color);
 8000bb4:	7b7b      	ldrb	r3, [r7, #13]
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d002      	beq.n	8000bc4 <Gfx_DrawDigit+0x1d4>
 8000bbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bc2:	e001      	b.n	8000bc8 <Gfx_DrawDigit+0x1d8>
 8000bc4:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <Gfx_DrawDigit+0x25c>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	733b      	strb	r3, [r7, #12]
	Display_DrawRect(&hspi2, x, y+thickness, thickness, seg_len, new_color);
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	88bb      	ldrh	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	b298      	uxth	r0, r3
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	b29c      	uxth	r4, r3
 8000bd8:	7bbb      	ldrb	r3, [r7, #14]
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	88f9      	ldrh	r1, [r7, #6]
 8000bde:	7b3a      	ldrb	r2, [r7, #12]
 8000be0:	9201      	str	r2, [sp, #4]
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	4623      	mov	r3, r4
 8000be6:	4602      	mov	r2, r0
 8000be8:	4819      	ldr	r0, [pc, #100]	; (8000c50 <Gfx_DrawDigit+0x260>)
 8000bea:	f7ff fe05 	bl	80007f8 <Display_DrawRect>

	// g
	new_color = ((pattern & SEG_G_MASK) ? color : background_color);
 8000bee:	7b7b      	ldrb	r3, [r7, #13]
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d002      	beq.n	8000bfe <Gfx_DrawDigit+0x20e>
 8000bf8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bfc:	e001      	b.n	8000c02 <Gfx_DrawDigit+0x212>
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <Gfx_DrawDigit+0x25c>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	733b      	strb	r3, [r7, #12]
	Display_DrawRect(&hspi2, x+thickness, y+thickness+seg_len, seg_len, thickness, new_color);
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	88fb      	ldrh	r3, [r7, #6]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	b299      	uxth	r1, r3
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	88bb      	ldrh	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	7bbb      	ldrb	r3, [r7, #14]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	4413      	add	r3, r2
 8000c1e:	b298      	uxth	r0, r3
 8000c20:	7bbb      	ldrb	r3, [r7, #14]
 8000c22:	b29c      	uxth	r4, r3
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	7b3a      	ldrb	r2, [r7, #12]
 8000c2a:	9201      	str	r2, [sp, #4]
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	4623      	mov	r3, r4
 8000c30:	4602      	mov	r2, r0
 8000c32:	4807      	ldr	r0, [pc, #28]	; (8000c50 <Gfx_DrawDigit+0x260>)
 8000c34:	f7ff fde0 	bl	80007f8 <Display_DrawRect>
 8000c38:	e000      	b.n	8000c3c <Gfx_DrawDigit+0x24c>
		return;
 8000c3a:	bf00      	nop

}
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd90      	pop	{r4, r7, pc}
 8000c42:	bf00      	nop
 8000c44:	cccccccd 	.word	0xcccccccd
 8000c48:	20000000 	.word	0x20000000
 8000c4c:	20004a38 	.word	0x20004a38
 8000c50:	20004a3c 	.word	0x20004a3c

08000c54 <SystemClock_Config>:
/* Global variables */
SPI_HandleTypeDef hspi2;	// spi interface to control display
UART_HandleTypeDef huart2;	// uart interface for debugging

void SystemClock_Config(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b094      	sub	sp, #80	; 0x50
 8000c58:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	2234      	movs	r2, #52	; 0x34
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f002 f9cc 	bl	8003000 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c68:	f107 0308 	add.w	r3, r7, #8
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]

	/* Configure the main internal regulator output voltage */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000c78:	2300      	movs	r3, #0
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	4b2a      	ldr	r3, [pc, #168]	; (8000d28 <SystemClock_Config+0xd4>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	4a29      	ldr	r2, [pc, #164]	; (8000d28 <SystemClock_Config+0xd4>)
 8000c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c86:	6413      	str	r3, [r2, #64]	; 0x40
 8000c88:	4b27      	ldr	r3, [pc, #156]	; (8000d28 <SystemClock_Config+0xd4>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c94:	2300      	movs	r3, #0
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	4b24      	ldr	r3, [pc, #144]	; (8000d2c <SystemClock_Config+0xd8>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ca0:	4a22      	ldr	r2, [pc, #136]	; (8000d2c <SystemClock_Config+0xd8>)
 8000ca2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca6:	6013      	str	r3, [r2, #0]
 8000ca8:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <SystemClock_Config+0xd8>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	683b      	ldr	r3, [r7, #0]

	/* Initialize the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cbc:	2310      	movs	r3, #16
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000cc8:	2310      	movs	r3, #16
 8000cca:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000ccc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000cd0:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f001 f978 	bl	8001fd8 <HAL_RCC_OscConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <SystemClock_Config+0x9e>
		Error_Handler();
 8000cee:	f000 f915 	bl	8000f1c <Error_Handler>
	}

	/* Initializes the CPU, AHB and APB buses clocks */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf2:	230f      	movs	r3, #15
 8000cf4:	60bb      	str	r3, [r7, #8]
							  	  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d02:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000d08:	f107 0308 	add.w	r3, r7, #8
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 fe18 	bl	8001944 <HAL_RCC_ClockConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <SystemClock_Config+0xca>
		Error_Handler();
 8000d1a:	f000 f8ff 	bl	8000f1c <Error_Handler>
	}
}
 8000d1e:	bf00      	nop
 8000d20:	3750      	adds	r7, #80	; 0x50
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40007000 	.word	0x40007000

08000d30 <MX_SPI2_Init>:


void MX_SPI2_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000d34:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <MX_SPI2_Init+0x64>)
 8000d36:	4a18      	ldr	r2, [pc, #96]	; (8000d98 <MX_SPI2_Init+0x68>)
 8000d38:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d3a:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <MX_SPI2_Init+0x64>)
 8000d3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d40:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d42:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <MX_SPI2_Init+0x64>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <MX_SPI2_Init+0x64>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_SPI2_Init+0x64>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MX_SPI2_Init+0x64>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_SPI2_Init+0x64>)
 8000d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d60:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d62:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_SPI2_Init+0x64>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d68:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <MX_SPI2_Init+0x64>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_SPI2_Init+0x64>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d74:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <MX_SPI2_Init+0x64>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_SPI2_Init+0x64>)
 8000d7c:	220a      	movs	r2, #10
 8000d7e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000d80:	4804      	ldr	r0, [pc, #16]	; (8000d94 <MX_SPI2_Init+0x64>)
 8000d82:	f001 fbc7 	bl	8002514 <HAL_SPI_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_SPI2_Init+0x60>
		Error_Handler();
 8000d8c:	f000 f8c6 	bl	8000f1c <Error_Handler>
	}
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20004a3c 	.word	0x20004a3c
 8000d98:	40003800 	.word	0x40003800

08000d9c <MX_USART2_UART_Init>:


void MX_USART2_UART_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	/* USART2 parameter configuration */
	huart2.Instance = USART2;
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000da2:	4a12      	ldr	r2, [pc, #72]	; (8000dec <MX_USART2_UART_Init+0x50>)
 8000da4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000da8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dac:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000dc0:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000dd4:	f001 fe2e 	bl	8002a34 <HAL_UART_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000dde:	f000 f89d 	bl	8000f1c <Error_Handler>
	}
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20004a94 	.word	0x20004a94
 8000dec:	40004400 	.word	0x40004400

08000df0 <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08a      	sub	sp, #40	; 0x28
 8000df4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
 8000e04:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	4b40      	ldr	r3, [pc, #256]	; (8000f0c <MX_GPIO_Init+0x11c>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a3f      	ldr	r2, [pc, #252]	; (8000f0c <MX_GPIO_Init+0x11c>)
 8000e10:	f043 0304 	orr.w	r3, r3, #4
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b3d      	ldr	r3, [pc, #244]	; (8000f0c <MX_GPIO_Init+0x11c>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0304 	and.w	r3, r3, #4
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b39      	ldr	r3, [pc, #228]	; (8000f0c <MX_GPIO_Init+0x11c>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a38      	ldr	r2, [pc, #224]	; (8000f0c <MX_GPIO_Init+0x11c>)
 8000e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b36      	ldr	r3, [pc, #216]	; (8000f0c <MX_GPIO_Init+0x11c>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	4b32      	ldr	r3, [pc, #200]	; (8000f0c <MX_GPIO_Init+0x11c>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a31      	ldr	r2, [pc, #196]	; (8000f0c <MX_GPIO_Init+0x11c>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b2f      	ldr	r3, [pc, #188]	; (8000f0c <MX_GPIO_Init+0x11c>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	4b2b      	ldr	r3, [pc, #172]	; (8000f0c <MX_GPIO_Init+0x11c>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a2a      	ldr	r2, [pc, #168]	; (8000f0c <MX_GPIO_Init+0x11c>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b28      	ldr	r3, [pc, #160]	; (8000f0c <MX_GPIO_Init+0x11c>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]

	/* Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2101      	movs	r1, #1
 8000e7a:	4825      	ldr	r0, [pc, #148]	; (8000f10 <MX_GPIO_Init+0x120>)
 8000e7c:	f000 fd48 	bl	8001910 <HAL_GPIO_WritePin>

	/* Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2120      	movs	r1, #32
 8000e84:	4823      	ldr	r0, [pc, #140]	; (8000f14 <MX_GPIO_Init+0x124>)
 8000e86:	f000 fd43 	bl	8001910 <HAL_GPIO_WritePin>

	/* Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, SPI_DCRS_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2111      	movs	r1, #17
 8000e8e:	4822      	ldr	r0, [pc, #136]	; (8000f18 <MX_GPIO_Init+0x128>)
 8000e90:	f000 fd3e 	bl	8001910 <HAL_GPIO_WritePin>

	/* Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000e94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e98:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e9a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e9e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4819      	ldr	r0, [pc, #100]	; (8000f10 <MX_GPIO_Init+0x120>)
 8000eac:	f000 fb9c 	bl	80015e8 <HAL_GPIO_Init>

	/* Configure GPIO pin : SPI_RESET_Pin */
	GPIO_InitStruct.Pin = SPI_RESET_Pin;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI_RESET_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4812      	ldr	r0, [pc, #72]	; (8000f10 <MX_GPIO_Init+0x120>)
 8000ec8:	f000 fb8e 	bl	80015e8 <HAL_GPIO_Init>

	/* Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000ecc:	2320      	movs	r3, #32
 8000ece:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	480c      	ldr	r0, [pc, #48]	; (8000f14 <MX_GPIO_Init+0x124>)
 8000ee4:	f000 fb80 	bl	80015e8 <HAL_GPIO_Init>

	/* Configure GPIO pins : SPI_DCRS_Pin SPI_CS_Pin */
	GPIO_InitStruct.Pin = SPI_DCRS_Pin|SPI_CS_Pin;
 8000ee8:	2311      	movs	r3, #17
 8000eea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	4619      	mov	r1, r3
 8000efe:	4806      	ldr	r0, [pc, #24]	; (8000f18 <MX_GPIO_Init+0x128>)
 8000f00:	f000 fb72 	bl	80015e8 <HAL_GPIO_Init>
}
 8000f04:	bf00      	nop
 8000f06:	3728      	adds	r7, #40	; 0x28
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	40020800 	.word	0x40020800
 8000f14:	40020000 	.word	0x40020000
 8000f18:	40020400 	.word	0x40020400

08000f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * Auto-generated by CubeIDE.
  */
void Error_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f20:	b672      	cpsid	i
}
 8000f22:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <Error_Handler+0x8>

08000f26 <Led_Init>:
 * @date 4/3/2024
 */

#include "led.h"

void Led_Init(void) {
 8000f26:	b580      	push	{r7, lr}
 8000f28:	af00      	add	r7, sp, #0
	Led_Off(LED_ID_1);
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f000 f808 	bl	8000f40 <Led_Off>
	Led_Off(LED_ID_2);
 8000f30:	2001      	movs	r0, #1
 8000f32:	f000 f805 	bl	8000f40 <Led_Off>
	Led_Off(LED_ID_3);
 8000f36:	2002      	movs	r0, #2
 8000f38:	f000 f802 	bl	8000f40 <Led_Off>
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <Led_Off>:
		default:
			break;
	}
}

void Led_Off(led_id_t led_id) {
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
	switch (led_id) {
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d006      	beq.n	8000f5e <Led_Off+0x1e>
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	dc06      	bgt.n	8000f62 <Led_Off+0x22>
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d006      	beq.n	8000f66 <Led_Off+0x26>
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d006      	beq.n	8000f6a <Led_Off+0x2a>
			break;
		case LED_ID_3:
			// TODO turn led off
			break;
		default:
			break;
 8000f5c:	e001      	b.n	8000f62 <Led_Off+0x22>
			break;
 8000f5e:	bf00      	nop
 8000f60:	e004      	b.n	8000f6c <Led_Off+0x2c>
			break;
 8000f62:	bf00      	nop
 8000f64:	e002      	b.n	8000f6c <Led_Off+0x2c>
			break;
 8000f66:	bf00      	nop
 8000f68:	e000      	b.n	8000f6c <Led_Off+0x2c>
			break;
 8000f6a:	bf00      	nop
	}
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <main>:
#include "gfx.h"

extern SPI_HandleTypeDef hspi2;

int main(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af02      	add	r7, sp, #8
	/* Reset of all peripherals, initializes the flash interface and the systick */
	HAL_Init();
 8000f7e:	f000 f9b7 	bl	80012f0 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000f82:	f7ff fe67 	bl	8000c54 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f86:	f7ff ff33 	bl	8000df0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000f8a:	f7ff ff07 	bl	8000d9c <MX_USART2_UART_Init>
	MX_SPI2_Init();
 8000f8e:	f7ff fecf 	bl	8000d30 <MX_SPI2_Init>

	/* Turn off all LEDs */
	Led_Init();
 8000f92:	f7ff ffc8 	bl	8000f26 <Led_Init>

	/* Reset button controllers */
	Button_Init();
 8000f96:	f7ff fab7 	bl	8000508 <Button_Init>

	/* Initialize display */
	Display_Init(&hspi2);
 8000f9a:	482c      	ldr	r0, [pc, #176]	; (800104c <main+0xd4>)
 8000f9c:	f7ff fade 	bl	800055c <Display_Init>

	/* Initialize graphics unit */
	Gfx_Init();
 8000fa0:	f7ff fd08 	bl	80009b4 <Gfx_Init>
	extern uint8_t caltech_racing_logo_img[];

	/* Infinite main loop */
	while (1)
	{
		Gfx_SetBackground(COLOR_BLACK);
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f7ff fd0d 	bl	80009c4 <Gfx_SetBackground>
		Display_Image(&hspi2, 20, 120, 435, 87, caltech_racing_logo_img);
 8000faa:	4b29      	ldr	r3, [pc, #164]	; (8001050 <main+0xd8>)
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	2357      	movs	r3, #87	; 0x57
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	f240 13b3 	movw	r3, #435	; 0x1b3
 8000fb6:	2278      	movs	r2, #120	; 0x78
 8000fb8:	2114      	movs	r1, #20
 8000fba:	4824      	ldr	r0, [pc, #144]	; (800104c <main+0xd4>)
 8000fbc:	f7ff fca8 	bl	8000910 <Display_Image>
		HAL_Delay(2000);
 8000fc0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fc4:	f000 fa06 	bl	80013d4 <HAL_Delay>

		Gfx_SetBackground(COLOR_BLACK);
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f7ff fcfb 	bl	80009c4 <Gfx_SetBackground>
		for (uint8_t count = 0; count < 10; count++) {
 8000fce:	2300      	movs	r3, #0
 8000fd0:	71fb      	strb	r3, [r7, #7]
 8000fd2:	e037      	b.n	8001044 <main+0xcc>
			Gfx_DrawDigit( 10, 40, count,  20, COLOR_RED);
 8000fd4:	79fa      	ldrb	r2, [r7, #7]
 8000fd6:	2324      	movs	r3, #36	; 0x24
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	2314      	movs	r3, #20
 8000fdc:	2128      	movs	r1, #40	; 0x28
 8000fde:	200a      	movs	r0, #10
 8000fe0:	f7ff fd06 	bl	80009f0 <Gfx_DrawDigit>
			Gfx_DrawDigit( 40, 40, count,  35, COLOR_PINK);
 8000fe4:	79fa      	ldrb	r2, [r7, #7]
 8000fe6:	232d      	movs	r3, #45	; 0x2d
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2323      	movs	r3, #35	; 0x23
 8000fec:	2128      	movs	r1, #40	; 0x28
 8000fee:	2028      	movs	r0, #40	; 0x28
 8000ff0:	f7ff fcfe 	bl	80009f0 <Gfx_DrawDigit>
			Gfx_DrawDigit( 80, 40, count,  50, COLOR_YELLOW);
 8000ff4:	79fa      	ldrb	r2, [r7, #7]
 8000ff6:	2336      	movs	r3, #54	; 0x36
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2332      	movs	r3, #50	; 0x32
 8000ffc:	2128      	movs	r1, #40	; 0x28
 8000ffe:	2050      	movs	r0, #80	; 0x50
 8001000:	f7ff fcf6 	bl	80009f0 <Gfx_DrawDigit>
			Gfx_DrawDigit(140, 40, count,  80, COLOR_GREEN);
 8001004:	79fa      	ldrb	r2, [r7, #7]
 8001006:	2312      	movs	r3, #18
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	2350      	movs	r3, #80	; 0x50
 800100c:	2128      	movs	r1, #40	; 0x28
 800100e:	208c      	movs	r0, #140	; 0x8c
 8001010:	f7ff fcee 	bl	80009f0 <Gfx_DrawDigit>
			Gfx_DrawDigit(220, 40, count, 120, COLOR_CYAN);
 8001014:	79fa      	ldrb	r2, [r7, #7]
 8001016:	231a      	movs	r3, #26
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2378      	movs	r3, #120	; 0x78
 800101c:	2128      	movs	r1, #40	; 0x28
 800101e:	20dc      	movs	r0, #220	; 0xdc
 8001020:	f7ff fce6 	bl	80009f0 <Gfx_DrawDigit>
			Gfx_DrawDigit(320, 40, count, 200, COLOR_BLUE);
 8001024:	79fa      	ldrb	r2, [r7, #7]
 8001026:	2309      	movs	r3, #9
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	23c8      	movs	r3, #200	; 0xc8
 800102c:	2128      	movs	r1, #40	; 0x28
 800102e:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8001032:	f7ff fcdd 	bl	80009f0 <Gfx_DrawDigit>
			HAL_Delay(800);
 8001036:	f44f 7048 	mov.w	r0, #800	; 0x320
 800103a:	f000 f9cb 	bl	80013d4 <HAL_Delay>
		for (uint8_t count = 0; count < 10; count++) {
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	3301      	adds	r3, #1
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	2b09      	cmp	r3, #9
 8001048:	d9c4      	bls.n	8000fd4 <main+0x5c>
		Gfx_SetBackground(COLOR_BLACK);
 800104a:	e7ab      	b.n	8000fa4 <main+0x2c>
 800104c:	20004a3c 	.word	0x20004a3c
 8001050:	2000000c 	.word	0x2000000c

08001054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <HAL_MspInit+0x4c>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	4a0f      	ldr	r2, [pc, #60]	; (80010a0 <HAL_MspInit+0x4c>)
 8001064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001068:	6453      	str	r3, [r2, #68]	; 0x44
 800106a:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <HAL_MspInit+0x4c>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	603b      	str	r3, [r7, #0]
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <HAL_MspInit+0x4c>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	4a08      	ldr	r2, [pc, #32]	; (80010a0 <HAL_MspInit+0x4c>)
 8001080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001084:	6413      	str	r3, [r2, #64]	; 0x40
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_MspInit+0x4c>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001092:	2007      	movs	r0, #7
 8001094:	f000 fa74 	bl	8001580 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40023800 	.word	0x40023800

080010a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a30      	ldr	r2, [pc, #192]	; (8001184 <HAL_SPI_MspInit+0xe0>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d15a      	bne.n	800117c <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	4b2f      	ldr	r3, [pc, #188]	; (8001188 <HAL_SPI_MspInit+0xe4>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	4a2e      	ldr	r2, [pc, #184]	; (8001188 <HAL_SPI_MspInit+0xe4>)
 80010d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d4:	6413      	str	r3, [r2, #64]	; 0x40
 80010d6:	4b2c      	ldr	r3, [pc, #176]	; (8001188 <HAL_SPI_MspInit+0xe4>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b28      	ldr	r3, [pc, #160]	; (8001188 <HAL_SPI_MspInit+0xe4>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a27      	ldr	r2, [pc, #156]	; (8001188 <HAL_SPI_MspInit+0xe4>)
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b25      	ldr	r3, [pc, #148]	; (8001188 <HAL_SPI_MspInit+0xe4>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0304 	and.w	r3, r3, #4
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	4b21      	ldr	r3, [pc, #132]	; (8001188 <HAL_SPI_MspInit+0xe4>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a20      	ldr	r2, [pc, #128]	; (8001188 <HAL_SPI_MspInit+0xe4>)
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <HAL_SPI_MspInit+0xe4>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800111a:	2302      	movs	r3, #2
 800111c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001126:	2303      	movs	r3, #3
 8001128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800112a:	2307      	movs	r3, #7
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	4815      	ldr	r0, [pc, #84]	; (800118c <HAL_SPI_MspInit+0xe8>)
 8001136:	f000 fa57 	bl	80015e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800113a:	2304      	movs	r3, #4
 800113c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800114a:	2305      	movs	r3, #5
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4619      	mov	r1, r3
 8001154:	480d      	ldr	r0, [pc, #52]	; (800118c <HAL_SPI_MspInit+0xe8>)
 8001156:	f000 fa47 	bl	80015e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800115a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800115e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800116c:	2305      	movs	r3, #5
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4619      	mov	r1, r3
 8001176:	4806      	ldr	r0, [pc, #24]	; (8001190 <HAL_SPI_MspInit+0xec>)
 8001178:	f000 fa36 	bl	80015e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800117c:	bf00      	nop
 800117e:	3728      	adds	r7, #40	; 0x28
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40003800 	.word	0x40003800
 8001188:	40023800 	.word	0x40023800
 800118c:	40020800 	.word	0x40020800
 8001190:	40020400 	.word	0x40020400

08001194 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a19      	ldr	r2, [pc, #100]	; (8001218 <HAL_UART_MspInit+0x84>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d12b      	bne.n	800120e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	4b18      	ldr	r3, [pc, #96]	; (800121c <HAL_UART_MspInit+0x88>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	4a17      	ldr	r2, [pc, #92]	; (800121c <HAL_UART_MspInit+0x88>)
 80011c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c4:	6413      	str	r3, [r2, #64]	; 0x40
 80011c6:	4b15      	ldr	r3, [pc, #84]	; (800121c <HAL_UART_MspInit+0x88>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <HAL_UART_MspInit+0x88>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a10      	ldr	r2, [pc, #64]	; (800121c <HAL_UART_MspInit+0x88>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <HAL_UART_MspInit+0x88>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011ee:	230c      	movs	r3, #12
 80011f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fa:	2303      	movs	r3, #3
 80011fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011fe:	2307      	movs	r3, #7
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4619      	mov	r1, r3
 8001208:	4805      	ldr	r0, [pc, #20]	; (8001220 <HAL_UART_MspInit+0x8c>)
 800120a:	f000 f9ed 	bl	80015e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800120e:	bf00      	nop
 8001210:	3728      	adds	r7, #40	; 0x28
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40004400 	.word	0x40004400
 800121c:	40023800 	.word	0x40023800
 8001220:	40020000 	.word	0x40020000

08001224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <NMI_Handler+0x4>

0800122a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122e:	e7fe      	b.n	800122e <HardFault_Handler+0x4>

08001230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <MemManage_Handler+0x4>

08001236 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <BusFault_Handler+0x4>

0800123c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <UsageFault_Handler+0x4>

08001242 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001270:	f000 f890 	bl	8001394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}

08001278 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <SystemInit+0x20>)
 800127e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001282:	4a05      	ldr	r2, [pc, #20]	; (8001298 <SystemInit+0x20>)
 8001284:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001288:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800129c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012a2:	490e      	ldr	r1, [pc, #56]	; (80012dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012a4:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a8:	e002      	b.n	80012b0 <LoopCopyDataInit>

080012aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ae:	3304      	adds	r3, #4

080012b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b4:	d3f9      	bcc.n	80012aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b6:	4a0b      	ldr	r2, [pc, #44]	; (80012e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012b8:	4c0b      	ldr	r4, [pc, #44]	; (80012e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012bc:	e001      	b.n	80012c2 <LoopFillZerobss>

080012be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c0:	3204      	adds	r2, #4

080012c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c4:	d3fb      	bcc.n	80012be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012c6:	f7ff ffd7 	bl	8001278 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ca:	f001 fe75 	bl	8002fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ce:	f7ff fe53 	bl	8000f78 <main>
  bx  lr    
 80012d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012dc:	20004a04 	.word	0x20004a04
  ldr r2, =_sidata
 80012e0:	08003050 	.word	0x08003050
  ldr r2, =_sbss
 80012e4:	20004a04 	.word	0x20004a04
  ldr r4, =_ebss
 80012e8:	20004adc 	.word	0x20004adc

080012ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012ec:	e7fe      	b.n	80012ec <ADC_IRQHandler>
	...

080012f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <HAL_Init+0x40>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a0d      	ldr	r2, [pc, #52]	; (8001330 <HAL_Init+0x40>)
 80012fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001300:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <HAL_Init+0x40>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <HAL_Init+0x40>)
 8001306:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800130a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <HAL_Init+0x40>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a07      	ldr	r2, [pc, #28]	; (8001330 <HAL_Init+0x40>)
 8001312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001316:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001318:	2003      	movs	r0, #3
 800131a:	f000 f931 	bl	8001580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800131e:	2000      	movs	r0, #0
 8001320:	f000 f808 	bl	8001334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001324:	f7ff fe96 	bl	8001054 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40023c00 	.word	0x40023c00

08001334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_InitTick+0x54>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_InitTick+0x58>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	4619      	mov	r1, r3
 8001346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134a:	fbb3 f3f1 	udiv	r3, r3, r1
 800134e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001352:	4618      	mov	r0, r3
 8001354:	f000 f93b 	bl	80015ce <HAL_SYSTICK_Config>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e00e      	b.n	8001380 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b0f      	cmp	r3, #15
 8001366:	d80a      	bhi.n	800137e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001368:	2200      	movs	r2, #0
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	f000 f911 	bl	8001596 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001374:	4a06      	ldr	r2, [pc, #24]	; (8001390 <HAL_InitTick+0x5c>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	e000      	b.n	8001380 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
}
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	200049f8 	.word	0x200049f8
 800138c:	20004a00 	.word	0x20004a00
 8001390:	200049fc 	.word	0x200049fc

08001394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_IncTick+0x20>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_IncTick+0x24>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4413      	add	r3, r2
 80013a4:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <HAL_IncTick+0x24>)
 80013a6:	6013      	str	r3, [r2, #0]
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	20004a00 	.word	0x20004a00
 80013b8:	20004ad8 	.word	0x20004ad8

080013bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return uwTick;
 80013c0:	4b03      	ldr	r3, [pc, #12]	; (80013d0 <HAL_GetTick+0x14>)
 80013c2:	681b      	ldr	r3, [r3, #0]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20004ad8 	.word	0x20004ad8

080013d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013dc:	f7ff ffee 	bl	80013bc <HAL_GetTick>
 80013e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ec:	d005      	beq.n	80013fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <HAL_Delay+0x44>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	461a      	mov	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4413      	add	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013fa:	bf00      	nop
 80013fc:	f7ff ffde 	bl	80013bc <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	429a      	cmp	r2, r3
 800140a:	d8f7      	bhi.n	80013fc <HAL_Delay+0x28>
  {
  }
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20004a00 	.word	0x20004a00

0800141c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <__NVIC_SetPriorityGrouping+0x44>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001438:	4013      	ands	r3, r2
 800143a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001444:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800144c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800144e:	4a04      	ldr	r2, [pc, #16]	; (8001460 <__NVIC_SetPriorityGrouping+0x44>)
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	60d3      	str	r3, [r2, #12]
}
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <__NVIC_GetPriorityGrouping+0x18>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	0a1b      	lsrs	r3, r3, #8
 800146e:	f003 0307 	and.w	r3, r3, #7
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	6039      	str	r1, [r7, #0]
 800148a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001490:	2b00      	cmp	r3, #0
 8001492:	db0a      	blt.n	80014aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	b2da      	uxtb	r2, r3
 8001498:	490c      	ldr	r1, [pc, #48]	; (80014cc <__NVIC_SetPriority+0x4c>)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	0112      	lsls	r2, r2, #4
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	440b      	add	r3, r1
 80014a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a8:	e00a      	b.n	80014c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4908      	ldr	r1, [pc, #32]	; (80014d0 <__NVIC_SetPriority+0x50>)
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	3b04      	subs	r3, #4
 80014b8:	0112      	lsls	r2, r2, #4
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	440b      	add	r3, r1
 80014be:	761a      	strb	r2, [r3, #24]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000e100 	.word	0xe000e100
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b089      	sub	sp, #36	; 0x24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f1c3 0307 	rsb	r3, r3, #7
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	bf28      	it	cs
 80014f2:	2304      	movcs	r3, #4
 80014f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3304      	adds	r3, #4
 80014fa:	2b06      	cmp	r3, #6
 80014fc:	d902      	bls.n	8001504 <NVIC_EncodePriority+0x30>
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3b03      	subs	r3, #3
 8001502:	e000      	b.n	8001506 <NVIC_EncodePriority+0x32>
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	f04f 32ff 	mov.w	r2, #4294967295
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	401a      	ands	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800151c:	f04f 31ff 	mov.w	r1, #4294967295
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fa01 f303 	lsl.w	r3, r1, r3
 8001526:	43d9      	mvns	r1, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	4313      	orrs	r3, r2
         );
}
 800152e:	4618      	mov	r0, r3
 8001530:	3724      	adds	r7, #36	; 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800154c:	d301      	bcc.n	8001552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800154e:	2301      	movs	r3, #1
 8001550:	e00f      	b.n	8001572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001552:	4a0a      	ldr	r2, [pc, #40]	; (800157c <SysTick_Config+0x40>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3b01      	subs	r3, #1
 8001558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155a:	210f      	movs	r1, #15
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	f7ff ff8e 	bl	8001480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <SysTick_Config+0x40>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <SysTick_Config+0x40>)
 800156c:	2207      	movs	r2, #7
 800156e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	e000e010 	.word	0xe000e010

08001580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ff47 	bl	800141c <__NVIC_SetPriorityGrouping>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001596:	b580      	push	{r7, lr}
 8001598:	b086      	sub	sp, #24
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a8:	f7ff ff5c 	bl	8001464 <__NVIC_GetPriorityGrouping>
 80015ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	68b9      	ldr	r1, [r7, #8]
 80015b2:	6978      	ldr	r0, [r7, #20]
 80015b4:	f7ff ff8e 	bl	80014d4 <NVIC_EncodePriority>
 80015b8:	4602      	mov	r2, r0
 80015ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff5d 	bl	8001480 <__NVIC_SetPriority>
}
 80015c6:	bf00      	nop
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ffb0 	bl	800153c <SysTick_Config>
 80015dc:	4603      	mov	r3, r0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
 8001602:	e165      	b.n	80018d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001604:	2201      	movs	r2, #1
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	4013      	ands	r3, r2
 8001616:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	429a      	cmp	r2, r3
 800161e:	f040 8154 	bne.w	80018ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 0303 	and.w	r3, r3, #3
 800162a:	2b01      	cmp	r3, #1
 800162c:	d005      	beq.n	800163a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001636:	2b02      	cmp	r3, #2
 8001638:	d130      	bne.n	800169c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	2203      	movs	r2, #3
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4013      	ands	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001670:	2201      	movs	r2, #1
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	091b      	lsrs	r3, r3, #4
 8001686:	f003 0201 	and.w	r2, r3, #1
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	2b03      	cmp	r3, #3
 80016a6:	d017      	beq.n	80016d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	2203      	movs	r2, #3
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d123      	bne.n	800172c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	08da      	lsrs	r2, r3, #3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3208      	adds	r2, #8
 80016ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	f003 0307 	and.w	r3, r3, #7
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	220f      	movs	r2, #15
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	691a      	ldr	r2, [r3, #16]
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	08da      	lsrs	r2, r3, #3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3208      	adds	r2, #8
 8001726:	69b9      	ldr	r1, [r7, #24]
 8001728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	2203      	movs	r2, #3
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 0203 	and.w	r2, r3, #3
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 80ae 	beq.w	80018ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	4b5d      	ldr	r3, [pc, #372]	; (80018e8 <HAL_GPIO_Init+0x300>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	4a5c      	ldr	r2, [pc, #368]	; (80018e8 <HAL_GPIO_Init+0x300>)
 8001778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800177c:	6453      	str	r3, [r2, #68]	; 0x44
 800177e:	4b5a      	ldr	r3, [pc, #360]	; (80018e8 <HAL_GPIO_Init+0x300>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800178a:	4a58      	ldr	r2, [pc, #352]	; (80018ec <HAL_GPIO_Init+0x304>)
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	089b      	lsrs	r3, r3, #2
 8001790:	3302      	adds	r3, #2
 8001792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001796:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	220f      	movs	r2, #15
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4013      	ands	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a4f      	ldr	r2, [pc, #316]	; (80018f0 <HAL_GPIO_Init+0x308>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d025      	beq.n	8001802 <HAL_GPIO_Init+0x21a>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a4e      	ldr	r2, [pc, #312]	; (80018f4 <HAL_GPIO_Init+0x30c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d01f      	beq.n	80017fe <HAL_GPIO_Init+0x216>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a4d      	ldr	r2, [pc, #308]	; (80018f8 <HAL_GPIO_Init+0x310>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d019      	beq.n	80017fa <HAL_GPIO_Init+0x212>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a4c      	ldr	r2, [pc, #304]	; (80018fc <HAL_GPIO_Init+0x314>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d013      	beq.n	80017f6 <HAL_GPIO_Init+0x20e>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a4b      	ldr	r2, [pc, #300]	; (8001900 <HAL_GPIO_Init+0x318>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d00d      	beq.n	80017f2 <HAL_GPIO_Init+0x20a>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a4a      	ldr	r2, [pc, #296]	; (8001904 <HAL_GPIO_Init+0x31c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d007      	beq.n	80017ee <HAL_GPIO_Init+0x206>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a49      	ldr	r2, [pc, #292]	; (8001908 <HAL_GPIO_Init+0x320>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d101      	bne.n	80017ea <HAL_GPIO_Init+0x202>
 80017e6:	2306      	movs	r3, #6
 80017e8:	e00c      	b.n	8001804 <HAL_GPIO_Init+0x21c>
 80017ea:	2307      	movs	r3, #7
 80017ec:	e00a      	b.n	8001804 <HAL_GPIO_Init+0x21c>
 80017ee:	2305      	movs	r3, #5
 80017f0:	e008      	b.n	8001804 <HAL_GPIO_Init+0x21c>
 80017f2:	2304      	movs	r3, #4
 80017f4:	e006      	b.n	8001804 <HAL_GPIO_Init+0x21c>
 80017f6:	2303      	movs	r3, #3
 80017f8:	e004      	b.n	8001804 <HAL_GPIO_Init+0x21c>
 80017fa:	2302      	movs	r3, #2
 80017fc:	e002      	b.n	8001804 <HAL_GPIO_Init+0x21c>
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <HAL_GPIO_Init+0x21c>
 8001802:	2300      	movs	r3, #0
 8001804:	69fa      	ldr	r2, [r7, #28]
 8001806:	f002 0203 	and.w	r2, r2, #3
 800180a:	0092      	lsls	r2, r2, #2
 800180c:	4093      	lsls	r3, r2
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001814:	4935      	ldr	r1, [pc, #212]	; (80018ec <HAL_GPIO_Init+0x304>)
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	089b      	lsrs	r3, r3, #2
 800181a:	3302      	adds	r3, #2
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001822:	4b3a      	ldr	r3, [pc, #232]	; (800190c <HAL_GPIO_Init+0x324>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	43db      	mvns	r3, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4013      	ands	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001846:	4a31      	ldr	r2, [pc, #196]	; (800190c <HAL_GPIO_Init+0x324>)
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800184c:	4b2f      	ldr	r3, [pc, #188]	; (800190c <HAL_GPIO_Init+0x324>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	43db      	mvns	r3, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001870:	4a26      	ldr	r2, [pc, #152]	; (800190c <HAL_GPIO_Init+0x324>)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001876:	4b25      	ldr	r3, [pc, #148]	; (800190c <HAL_GPIO_Init+0x324>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	43db      	mvns	r3, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800189a:	4a1c      	ldr	r2, [pc, #112]	; (800190c <HAL_GPIO_Init+0x324>)
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018a0:	4b1a      	ldr	r3, [pc, #104]	; (800190c <HAL_GPIO_Init+0x324>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018c4:	4a11      	ldr	r2, [pc, #68]	; (800190c <HAL_GPIO_Init+0x324>)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3301      	adds	r3, #1
 80018ce:	61fb      	str	r3, [r7, #28]
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	2b0f      	cmp	r3, #15
 80018d4:	f67f ae96 	bls.w	8001604 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018d8:	bf00      	nop
 80018da:	bf00      	nop
 80018dc:	3724      	adds	r7, #36	; 0x24
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40013800 	.word	0x40013800
 80018f0:	40020000 	.word	0x40020000
 80018f4:	40020400 	.word	0x40020400
 80018f8:	40020800 	.word	0x40020800
 80018fc:	40020c00 	.word	0x40020c00
 8001900:	40021000 	.word	0x40021000
 8001904:	40021400 	.word	0x40021400
 8001908:	40021800 	.word	0x40021800
 800190c:	40013c00 	.word	0x40013c00

08001910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	807b      	strh	r3, [r7, #2]
 800191c:	4613      	mov	r3, r2
 800191e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001920:	787b      	ldrb	r3, [r7, #1]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001926:	887a      	ldrh	r2, [r7, #2]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800192c:	e003      	b.n	8001936 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800192e:	887b      	ldrh	r3, [r7, #2]
 8001930:	041a      	lsls	r2, r3, #16
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	619a      	str	r2, [r3, #24]
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0cc      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001958:	4b68      	ldr	r3, [pc, #416]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 030f 	and.w	r3, r3, #15
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d90c      	bls.n	8001980 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001966:	4b65      	ldr	r3, [pc, #404]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800196e:	4b63      	ldr	r3, [pc, #396]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d001      	beq.n	8001980 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e0b8      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d020      	beq.n	80019ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	d005      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001998:	4b59      	ldr	r3, [pc, #356]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	4a58      	ldr	r2, [pc, #352]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0308 	and.w	r3, r3, #8
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019b0:	4b53      	ldr	r3, [pc, #332]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	4a52      	ldr	r2, [pc, #328]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019bc:	4b50      	ldr	r3, [pc, #320]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	494d      	ldr	r1, [pc, #308]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d044      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e2:	4b47      	ldr	r3, [pc, #284]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d119      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e07f      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d003      	beq.n	8001a02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d107      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a02:	4b3f      	ldr	r3, [pc, #252]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d109      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e06f      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a12:	4b3b      	ldr	r3, [pc, #236]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e067      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a22:	4b37      	ldr	r3, [pc, #220]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f023 0203 	bic.w	r2, r3, #3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	4934      	ldr	r1, [pc, #208]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a34:	f7ff fcc2 	bl	80013bc <HAL_GetTick>
 8001a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3a:	e00a      	b.n	8001a52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3c:	f7ff fcbe 	bl	80013bc <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e04f      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a52:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 020c 	and.w	r2, r3, #12
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d1eb      	bne.n	8001a3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a64:	4b25      	ldr	r3, [pc, #148]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 030f 	and.w	r3, r3, #15
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d20c      	bcs.n	8001a8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a72:	4b22      	ldr	r3, [pc, #136]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7a:	4b20      	ldr	r3, [pc, #128]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e032      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d008      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a98:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	4916      	ldr	r1, [pc, #88]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d009      	beq.n	8001aca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ab6:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	490e      	ldr	r1, [pc, #56]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aca:	f000 f855 	bl	8001b78 <HAL_RCC_GetSysClockFreq>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	091b      	lsrs	r3, r3, #4
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	490a      	ldr	r1, [pc, #40]	; (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001adc:	5ccb      	ldrb	r3, [r1, r3]
 8001ade:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae2:	4a09      	ldr	r2, [pc, #36]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ae6:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fc22 	bl	8001334 <HAL_InitTick>

  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023c00 	.word	0x40023c00
 8001b00:	40023800 	.word	0x40023800
 8001b04:	08003028 	.word	0x08003028
 8001b08:	200049f8 	.word	0x200049f8
 8001b0c:	200049fc 	.word	0x200049fc

08001b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b14:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b16:	681b      	ldr	r3, [r3, #0]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	200049f8 	.word	0x200049f8

08001b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b2c:	f7ff fff0 	bl	8001b10 <HAL_RCC_GetHCLKFreq>
 8001b30:	4602      	mov	r2, r0
 8001b32:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	0a9b      	lsrs	r3, r3, #10
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	4903      	ldr	r1, [pc, #12]	; (8001b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b3e:	5ccb      	ldrb	r3, [r1, r3]
 8001b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	08003038 	.word	0x08003038

08001b50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b54:	f7ff ffdc 	bl	8001b10 <HAL_RCC_GetHCLKFreq>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	0b5b      	lsrs	r3, r3, #13
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	4903      	ldr	r1, [pc, #12]	; (8001b74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b66:	5ccb      	ldrb	r3, [r1, r3]
 8001b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40023800 	.word	0x40023800
 8001b74:	08003038 	.word	0x08003038

08001b78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b7c:	b0ae      	sub	sp, #184	; 0xb8
 8001b7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b9e:	4bcb      	ldr	r3, [pc, #812]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x354>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	2b0c      	cmp	r3, #12
 8001ba8:	f200 8206 	bhi.w	8001fb8 <HAL_RCC_GetSysClockFreq+0x440>
 8001bac:	a201      	add	r2, pc, #4	; (adr r2, 8001bb4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb2:	bf00      	nop
 8001bb4:	08001be9 	.word	0x08001be9
 8001bb8:	08001fb9 	.word	0x08001fb9
 8001bbc:	08001fb9 	.word	0x08001fb9
 8001bc0:	08001fb9 	.word	0x08001fb9
 8001bc4:	08001bf1 	.word	0x08001bf1
 8001bc8:	08001fb9 	.word	0x08001fb9
 8001bcc:	08001fb9 	.word	0x08001fb9
 8001bd0:	08001fb9 	.word	0x08001fb9
 8001bd4:	08001bf9 	.word	0x08001bf9
 8001bd8:	08001fb9 	.word	0x08001fb9
 8001bdc:	08001fb9 	.word	0x08001fb9
 8001be0:	08001fb9 	.word	0x08001fb9
 8001be4:	08001de9 	.word	0x08001de9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001be8:	4bb9      	ldr	r3, [pc, #740]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001bea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001bee:	e1e7      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bf0:	4bb8      	ldr	r3, [pc, #736]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001bf2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001bf6:	e1e3      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bf8:	4bb4      	ldr	r3, [pc, #720]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x354>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c04:	4bb1      	ldr	r3, [pc, #708]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x354>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d071      	beq.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c10:	4bae      	ldr	r3, [pc, #696]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x354>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	099b      	lsrs	r3, r3, #6
 8001c16:	2200      	movs	r2, #0
 8001c18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001c1c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001c20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001c32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001c36:	4622      	mov	r2, r4
 8001c38:	462b      	mov	r3, r5
 8001c3a:	f04f 0000 	mov.w	r0, #0
 8001c3e:	f04f 0100 	mov.w	r1, #0
 8001c42:	0159      	lsls	r1, r3, #5
 8001c44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c48:	0150      	lsls	r0, r2, #5
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4621      	mov	r1, r4
 8001c50:	1a51      	subs	r1, r2, r1
 8001c52:	6439      	str	r1, [r7, #64]	; 0x40
 8001c54:	4629      	mov	r1, r5
 8001c56:	eb63 0301 	sbc.w	r3, r3, r1
 8001c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001c68:	4649      	mov	r1, r9
 8001c6a:	018b      	lsls	r3, r1, #6
 8001c6c:	4641      	mov	r1, r8
 8001c6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c72:	4641      	mov	r1, r8
 8001c74:	018a      	lsls	r2, r1, #6
 8001c76:	4641      	mov	r1, r8
 8001c78:	1a51      	subs	r1, r2, r1
 8001c7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8001c7c:	4649      	mov	r1, r9
 8001c7e:	eb63 0301 	sbc.w	r3, r3, r1
 8001c82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	f04f 0300 	mov.w	r3, #0
 8001c8c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001c90:	4649      	mov	r1, r9
 8001c92:	00cb      	lsls	r3, r1, #3
 8001c94:	4641      	mov	r1, r8
 8001c96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c9a:	4641      	mov	r1, r8
 8001c9c:	00ca      	lsls	r2, r1, #3
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4622      	mov	r2, r4
 8001ca6:	189b      	adds	r3, r3, r2
 8001ca8:	633b      	str	r3, [r7, #48]	; 0x30
 8001caa:	462b      	mov	r3, r5
 8001cac:	460a      	mov	r2, r1
 8001cae:	eb42 0303 	adc.w	r3, r2, r3
 8001cb2:	637b      	str	r3, [r7, #52]	; 0x34
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	f04f 0300 	mov.w	r3, #0
 8001cbc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001cc0:	4629      	mov	r1, r5
 8001cc2:	024b      	lsls	r3, r1, #9
 8001cc4:	4621      	mov	r1, r4
 8001cc6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cca:	4621      	mov	r1, r4
 8001ccc:	024a      	lsls	r2, r1, #9
 8001cce:	4610      	mov	r0, r2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001cdc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001ce0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001ce4:	f7fe fa8e 	bl	8000204 <__aeabi_uldivmod>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4613      	mov	r3, r2
 8001cee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001cf2:	e067      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cf4:	4b75      	ldr	r3, [pc, #468]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x354>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	099b      	lsrs	r3, r3, #6
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d00:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001d04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d0e:	2300      	movs	r3, #0
 8001d10:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d12:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001d16:	4622      	mov	r2, r4
 8001d18:	462b      	mov	r3, r5
 8001d1a:	f04f 0000 	mov.w	r0, #0
 8001d1e:	f04f 0100 	mov.w	r1, #0
 8001d22:	0159      	lsls	r1, r3, #5
 8001d24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d28:	0150      	lsls	r0, r2, #5
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4621      	mov	r1, r4
 8001d30:	1a51      	subs	r1, r2, r1
 8001d32:	62b9      	str	r1, [r7, #40]	; 0x28
 8001d34:	4629      	mov	r1, r5
 8001d36:	eb63 0301 	sbc.w	r3, r3, r1
 8001d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	f04f 0300 	mov.w	r3, #0
 8001d44:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001d48:	4649      	mov	r1, r9
 8001d4a:	018b      	lsls	r3, r1, #6
 8001d4c:	4641      	mov	r1, r8
 8001d4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d52:	4641      	mov	r1, r8
 8001d54:	018a      	lsls	r2, r1, #6
 8001d56:	4641      	mov	r1, r8
 8001d58:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d5c:	4649      	mov	r1, r9
 8001d5e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	f04f 0300 	mov.w	r3, #0
 8001d6a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d6e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d76:	4692      	mov	sl, r2
 8001d78:	469b      	mov	fp, r3
 8001d7a:	4623      	mov	r3, r4
 8001d7c:	eb1a 0303 	adds.w	r3, sl, r3
 8001d80:	623b      	str	r3, [r7, #32]
 8001d82:	462b      	mov	r3, r5
 8001d84:	eb4b 0303 	adc.w	r3, fp, r3
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001d96:	4629      	mov	r1, r5
 8001d98:	028b      	lsls	r3, r1, #10
 8001d9a:	4621      	mov	r1, r4
 8001d9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001da0:	4621      	mov	r1, r4
 8001da2:	028a      	lsls	r2, r1, #10
 8001da4:	4610      	mov	r0, r2
 8001da6:	4619      	mov	r1, r3
 8001da8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001dac:	2200      	movs	r2, #0
 8001dae:	673b      	str	r3, [r7, #112]	; 0x70
 8001db0:	677a      	str	r2, [r7, #116]	; 0x74
 8001db2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001db6:	f7fe fa25 	bl	8000204 <__aeabi_uldivmod>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dc4:	4b41      	ldr	r3, [pc, #260]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x354>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	0c1b      	lsrs	r3, r3, #16
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	3301      	adds	r3, #1
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001dd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001dda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001de6:	e0eb      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001de8:	4b38      	ldr	r3, [pc, #224]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x354>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001df0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001df4:	4b35      	ldr	r3, [pc, #212]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x354>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d06b      	beq.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e00:	4b32      	ldr	r3, [pc, #200]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x354>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	099b      	lsrs	r3, r3, #6
 8001e06:	2200      	movs	r2, #0
 8001e08:	66bb      	str	r3, [r7, #104]	; 0x68
 8001e0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001e0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e12:	663b      	str	r3, [r7, #96]	; 0x60
 8001e14:	2300      	movs	r3, #0
 8001e16:	667b      	str	r3, [r7, #100]	; 0x64
 8001e18:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001e1c:	4622      	mov	r2, r4
 8001e1e:	462b      	mov	r3, r5
 8001e20:	f04f 0000 	mov.w	r0, #0
 8001e24:	f04f 0100 	mov.w	r1, #0
 8001e28:	0159      	lsls	r1, r3, #5
 8001e2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e2e:	0150      	lsls	r0, r2, #5
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4621      	mov	r1, r4
 8001e36:	1a51      	subs	r1, r2, r1
 8001e38:	61b9      	str	r1, [r7, #24]
 8001e3a:	4629      	mov	r1, r5
 8001e3c:	eb63 0301 	sbc.w	r3, r3, r1
 8001e40:	61fb      	str	r3, [r7, #28]
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	f04f 0300 	mov.w	r3, #0
 8001e4a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001e4e:	4659      	mov	r1, fp
 8001e50:	018b      	lsls	r3, r1, #6
 8001e52:	4651      	mov	r1, sl
 8001e54:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e58:	4651      	mov	r1, sl
 8001e5a:	018a      	lsls	r2, r1, #6
 8001e5c:	4651      	mov	r1, sl
 8001e5e:	ebb2 0801 	subs.w	r8, r2, r1
 8001e62:	4659      	mov	r1, fp
 8001e64:	eb63 0901 	sbc.w	r9, r3, r1
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e74:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e78:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e7c:	4690      	mov	r8, r2
 8001e7e:	4699      	mov	r9, r3
 8001e80:	4623      	mov	r3, r4
 8001e82:	eb18 0303 	adds.w	r3, r8, r3
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	462b      	mov	r3, r5
 8001e8a:	eb49 0303 	adc.w	r3, r9, r3
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	f04f 0200 	mov.w	r2, #0
 8001e94:	f04f 0300 	mov.w	r3, #0
 8001e98:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001e9c:	4629      	mov	r1, r5
 8001e9e:	024b      	lsls	r3, r1, #9
 8001ea0:	4621      	mov	r1, r4
 8001ea2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ea6:	4621      	mov	r1, r4
 8001ea8:	024a      	lsls	r2, r1, #9
 8001eaa:	4610      	mov	r0, r2
 8001eac:	4619      	mov	r1, r3
 8001eae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	65bb      	str	r3, [r7, #88]	; 0x58
 8001eb6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001eb8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ebc:	f7fe f9a2 	bl	8000204 <__aeabi_uldivmod>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001eca:	e065      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0x420>
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	00f42400 	.word	0x00f42400
 8001ed4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ed8:	4b3d      	ldr	r3, [pc, #244]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x458>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	099b      	lsrs	r3, r3, #6
 8001ede:	2200      	movs	r2, #0
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ee8:	653b      	str	r3, [r7, #80]	; 0x50
 8001eea:	2300      	movs	r3, #0
 8001eec:	657b      	str	r3, [r7, #84]	; 0x54
 8001eee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001ef2:	4642      	mov	r2, r8
 8001ef4:	464b      	mov	r3, r9
 8001ef6:	f04f 0000 	mov.w	r0, #0
 8001efa:	f04f 0100 	mov.w	r1, #0
 8001efe:	0159      	lsls	r1, r3, #5
 8001f00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f04:	0150      	lsls	r0, r2, #5
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4641      	mov	r1, r8
 8001f0c:	1a51      	subs	r1, r2, r1
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	4649      	mov	r1, r9
 8001f12:	eb63 0301 	sbc.w	r3, r3, r1
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	f04f 0300 	mov.w	r3, #0
 8001f20:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001f24:	4659      	mov	r1, fp
 8001f26:	018b      	lsls	r3, r1, #6
 8001f28:	4651      	mov	r1, sl
 8001f2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f2e:	4651      	mov	r1, sl
 8001f30:	018a      	lsls	r2, r1, #6
 8001f32:	4651      	mov	r1, sl
 8001f34:	1a54      	subs	r4, r2, r1
 8001f36:	4659      	mov	r1, fp
 8001f38:	eb63 0501 	sbc.w	r5, r3, r1
 8001f3c:	f04f 0200 	mov.w	r2, #0
 8001f40:	f04f 0300 	mov.w	r3, #0
 8001f44:	00eb      	lsls	r3, r5, #3
 8001f46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f4a:	00e2      	lsls	r2, r4, #3
 8001f4c:	4614      	mov	r4, r2
 8001f4e:	461d      	mov	r5, r3
 8001f50:	4643      	mov	r3, r8
 8001f52:	18e3      	adds	r3, r4, r3
 8001f54:	603b      	str	r3, [r7, #0]
 8001f56:	464b      	mov	r3, r9
 8001f58:	eb45 0303 	adc.w	r3, r5, r3
 8001f5c:	607b      	str	r3, [r7, #4]
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	f04f 0300 	mov.w	r3, #0
 8001f66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f6a:	4629      	mov	r1, r5
 8001f6c:	028b      	lsls	r3, r1, #10
 8001f6e:	4621      	mov	r1, r4
 8001f70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f74:	4621      	mov	r1, r4
 8001f76:	028a      	lsls	r2, r1, #10
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f80:	2200      	movs	r2, #0
 8001f82:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f84:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001f86:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f8a:	f7fe f93b 	bl	8000204 <__aeabi_uldivmod>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	4613      	mov	r3, r2
 8001f94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f98:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x458>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	0f1b      	lsrs	r3, r3, #28
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001fa6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001faa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001fb6:	e003      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001fba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001fbe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	37b8      	adds	r7, #184	; 0xb8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	00f42400 	.word	0x00f42400

08001fd8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e28d      	b.n	8002506 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 8083 	beq.w	80020fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ff8:	4b94      	ldr	r3, [pc, #592]	; (800224c <HAL_RCC_OscConfig+0x274>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 030c 	and.w	r3, r3, #12
 8002000:	2b04      	cmp	r3, #4
 8002002:	d019      	beq.n	8002038 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002004:	4b91      	ldr	r3, [pc, #580]	; (800224c <HAL_RCC_OscConfig+0x274>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800200c:	2b08      	cmp	r3, #8
 800200e:	d106      	bne.n	800201e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002010:	4b8e      	ldr	r3, [pc, #568]	; (800224c <HAL_RCC_OscConfig+0x274>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002018:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800201c:	d00c      	beq.n	8002038 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800201e:	4b8b      	ldr	r3, [pc, #556]	; (800224c <HAL_RCC_OscConfig+0x274>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002026:	2b0c      	cmp	r3, #12
 8002028:	d112      	bne.n	8002050 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800202a:	4b88      	ldr	r3, [pc, #544]	; (800224c <HAL_RCC_OscConfig+0x274>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002032:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002036:	d10b      	bne.n	8002050 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002038:	4b84      	ldr	r3, [pc, #528]	; (800224c <HAL_RCC_OscConfig+0x274>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d05b      	beq.n	80020fc <HAL_RCC_OscConfig+0x124>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d157      	bne.n	80020fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e25a      	b.n	8002506 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002058:	d106      	bne.n	8002068 <HAL_RCC_OscConfig+0x90>
 800205a:	4b7c      	ldr	r3, [pc, #496]	; (800224c <HAL_RCC_OscConfig+0x274>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a7b      	ldr	r2, [pc, #492]	; (800224c <HAL_RCC_OscConfig+0x274>)
 8002060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	e01d      	b.n	80020a4 <HAL_RCC_OscConfig+0xcc>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002070:	d10c      	bne.n	800208c <HAL_RCC_OscConfig+0xb4>
 8002072:	4b76      	ldr	r3, [pc, #472]	; (800224c <HAL_RCC_OscConfig+0x274>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a75      	ldr	r2, [pc, #468]	; (800224c <HAL_RCC_OscConfig+0x274>)
 8002078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	4b73      	ldr	r3, [pc, #460]	; (800224c <HAL_RCC_OscConfig+0x274>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a72      	ldr	r2, [pc, #456]	; (800224c <HAL_RCC_OscConfig+0x274>)
 8002084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	e00b      	b.n	80020a4 <HAL_RCC_OscConfig+0xcc>
 800208c:	4b6f      	ldr	r3, [pc, #444]	; (800224c <HAL_RCC_OscConfig+0x274>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a6e      	ldr	r2, [pc, #440]	; (800224c <HAL_RCC_OscConfig+0x274>)
 8002092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002096:	6013      	str	r3, [r2, #0]
 8002098:	4b6c      	ldr	r3, [pc, #432]	; (800224c <HAL_RCC_OscConfig+0x274>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a6b      	ldr	r2, [pc, #428]	; (800224c <HAL_RCC_OscConfig+0x274>)
 800209e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d013      	beq.n	80020d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ac:	f7ff f986 	bl	80013bc <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020b4:	f7ff f982 	bl	80013bc <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b64      	cmp	r3, #100	; 0x64
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e21f      	b.n	8002506 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c6:	4b61      	ldr	r3, [pc, #388]	; (800224c <HAL_RCC_OscConfig+0x274>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0f0      	beq.n	80020b4 <HAL_RCC_OscConfig+0xdc>
 80020d2:	e014      	b.n	80020fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d4:	f7ff f972 	bl	80013bc <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020dc:	f7ff f96e 	bl	80013bc <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b64      	cmp	r3, #100	; 0x64
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e20b      	b.n	8002506 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ee:	4b57      	ldr	r3, [pc, #348]	; (800224c <HAL_RCC_OscConfig+0x274>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x104>
 80020fa:	e000      	b.n	80020fe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d06f      	beq.n	80021ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800210a:	4b50      	ldr	r3, [pc, #320]	; (800224c <HAL_RCC_OscConfig+0x274>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 030c 	and.w	r3, r3, #12
 8002112:	2b00      	cmp	r3, #0
 8002114:	d017      	beq.n	8002146 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002116:	4b4d      	ldr	r3, [pc, #308]	; (800224c <HAL_RCC_OscConfig+0x274>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800211e:	2b08      	cmp	r3, #8
 8002120:	d105      	bne.n	800212e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002122:	4b4a      	ldr	r3, [pc, #296]	; (800224c <HAL_RCC_OscConfig+0x274>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00b      	beq.n	8002146 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800212e:	4b47      	ldr	r3, [pc, #284]	; (800224c <HAL_RCC_OscConfig+0x274>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002136:	2b0c      	cmp	r3, #12
 8002138:	d11c      	bne.n	8002174 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800213a:	4b44      	ldr	r3, [pc, #272]	; (800224c <HAL_RCC_OscConfig+0x274>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d116      	bne.n	8002174 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002146:	4b41      	ldr	r3, [pc, #260]	; (800224c <HAL_RCC_OscConfig+0x274>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d005      	beq.n	800215e <HAL_RCC_OscConfig+0x186>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d001      	beq.n	800215e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e1d3      	b.n	8002506 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215e:	4b3b      	ldr	r3, [pc, #236]	; (800224c <HAL_RCC_OscConfig+0x274>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	4937      	ldr	r1, [pc, #220]	; (800224c <HAL_RCC_OscConfig+0x274>)
 800216e:	4313      	orrs	r3, r2
 8002170:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002172:	e03a      	b.n	80021ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d020      	beq.n	80021be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800217c:	4b34      	ldr	r3, [pc, #208]	; (8002250 <HAL_RCC_OscConfig+0x278>)
 800217e:	2201      	movs	r2, #1
 8002180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002182:	f7ff f91b 	bl	80013bc <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800218a:	f7ff f917 	bl	80013bc <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e1b4      	b.n	8002506 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219c:	4b2b      	ldr	r3, [pc, #172]	; (800224c <HAL_RCC_OscConfig+0x274>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a8:	4b28      	ldr	r3, [pc, #160]	; (800224c <HAL_RCC_OscConfig+0x274>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	4925      	ldr	r1, [pc, #148]	; (800224c <HAL_RCC_OscConfig+0x274>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	600b      	str	r3, [r1, #0]
 80021bc:	e015      	b.n	80021ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021be:	4b24      	ldr	r3, [pc, #144]	; (8002250 <HAL_RCC_OscConfig+0x278>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c4:	f7ff f8fa 	bl	80013bc <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021cc:	f7ff f8f6 	bl	80013bc <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e193      	b.n	8002506 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021de:	4b1b      	ldr	r3, [pc, #108]	; (800224c <HAL_RCC_OscConfig+0x274>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d036      	beq.n	8002264 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d016      	beq.n	800222c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021fe:	4b15      	ldr	r3, [pc, #84]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 8002200:	2201      	movs	r2, #1
 8002202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002204:	f7ff f8da 	bl	80013bc <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800220c:	f7ff f8d6 	bl	80013bc <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e173      	b.n	8002506 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_RCC_OscConfig+0x274>)
 8002220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0f0      	beq.n	800220c <HAL_RCC_OscConfig+0x234>
 800222a:	e01b      	b.n	8002264 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800222c:	4b09      	ldr	r3, [pc, #36]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002232:	f7ff f8c3 	bl	80013bc <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002238:	e00e      	b.n	8002258 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800223a:	f7ff f8bf 	bl	80013bc <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d907      	bls.n	8002258 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e15c      	b.n	8002506 <HAL_RCC_OscConfig+0x52e>
 800224c:	40023800 	.word	0x40023800
 8002250:	42470000 	.word	0x42470000
 8002254:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002258:	4b8a      	ldr	r3, [pc, #552]	; (8002484 <HAL_RCC_OscConfig+0x4ac>)
 800225a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1ea      	bne.n	800223a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 8097 	beq.w	80023a0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002272:	2300      	movs	r3, #0
 8002274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002276:	4b83      	ldr	r3, [pc, #524]	; (8002484 <HAL_RCC_OscConfig+0x4ac>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10f      	bne.n	80022a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	4b7f      	ldr	r3, [pc, #508]	; (8002484 <HAL_RCC_OscConfig+0x4ac>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	4a7e      	ldr	r2, [pc, #504]	; (8002484 <HAL_RCC_OscConfig+0x4ac>)
 800228c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002290:	6413      	str	r3, [r2, #64]	; 0x40
 8002292:	4b7c      	ldr	r3, [pc, #496]	; (8002484 <HAL_RCC_OscConfig+0x4ac>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800229e:	2301      	movs	r3, #1
 80022a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a2:	4b79      	ldr	r3, [pc, #484]	; (8002488 <HAL_RCC_OscConfig+0x4b0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d118      	bne.n	80022e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ae:	4b76      	ldr	r3, [pc, #472]	; (8002488 <HAL_RCC_OscConfig+0x4b0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a75      	ldr	r2, [pc, #468]	; (8002488 <HAL_RCC_OscConfig+0x4b0>)
 80022b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ba:	f7ff f87f 	bl	80013bc <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c2:	f7ff f87b 	bl	80013bc <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e118      	b.n	8002506 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d4:	4b6c      	ldr	r3, [pc, #432]	; (8002488 <HAL_RCC_OscConfig+0x4b0>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0f0      	beq.n	80022c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d106      	bne.n	80022f6 <HAL_RCC_OscConfig+0x31e>
 80022e8:	4b66      	ldr	r3, [pc, #408]	; (8002484 <HAL_RCC_OscConfig+0x4ac>)
 80022ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ec:	4a65      	ldr	r2, [pc, #404]	; (8002484 <HAL_RCC_OscConfig+0x4ac>)
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	6713      	str	r3, [r2, #112]	; 0x70
 80022f4:	e01c      	b.n	8002330 <HAL_RCC_OscConfig+0x358>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	2b05      	cmp	r3, #5
 80022fc:	d10c      	bne.n	8002318 <HAL_RCC_OscConfig+0x340>
 80022fe:	4b61      	ldr	r3, [pc, #388]	; (8002484 <HAL_RCC_OscConfig+0x4ac>)
 8002300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002302:	4a60      	ldr	r2, [pc, #384]	; (8002484 <HAL_RCC_OscConfig+0x4ac>)
 8002304:	f043 0304 	orr.w	r3, r3, #4
 8002308:	6713      	str	r3, [r2, #112]	; 0x70
 800230a:	4b5e      	ldr	r3, [pc, #376]	; (8002484 <HAL_RCC_OscConfig+0x4ac>)
 800230c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230e:	4a5d      	ldr	r2, [pc, #372]	; (8002484 <HAL_RCC_OscConfig+0x4ac>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6713      	str	r3, [r2, #112]	; 0x70
 8002316:	e00b      	b.n	8002330 <HAL_RCC_OscConfig+0x358>
 8002318:	4b5a      	ldr	r3, [pc, #360]	; (8002484 <HAL_RCC_OscConfig+0x4ac>)
 800231a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231c:	4a59      	ldr	r2, [pc, #356]	; (8002484 <HAL_RCC_OscConfig+0x4ac>)
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	6713      	str	r3, [r2, #112]	; 0x70
 8002324:	4b57      	ldr	r3, [pc, #348]	; (8002484 <HAL_RCC_OscConfig+0x4ac>)
 8002326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002328:	4a56      	ldr	r2, [pc, #344]	; (8002484 <HAL_RCC_OscConfig+0x4ac>)
 800232a:	f023 0304 	bic.w	r3, r3, #4
 800232e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d015      	beq.n	8002364 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002338:	f7ff f840 	bl	80013bc <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233e:	e00a      	b.n	8002356 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002340:	f7ff f83c 	bl	80013bc <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f241 3288 	movw	r2, #5000	; 0x1388
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e0d7      	b.n	8002506 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002356:	4b4b      	ldr	r3, [pc, #300]	; (8002484 <HAL_RCC_OscConfig+0x4ac>)
 8002358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0ee      	beq.n	8002340 <HAL_RCC_OscConfig+0x368>
 8002362:	e014      	b.n	800238e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002364:	f7ff f82a 	bl	80013bc <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800236a:	e00a      	b.n	8002382 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800236c:	f7ff f826 	bl	80013bc <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f241 3288 	movw	r2, #5000	; 0x1388
 800237a:	4293      	cmp	r3, r2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e0c1      	b.n	8002506 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002382:	4b40      	ldr	r3, [pc, #256]	; (8002484 <HAL_RCC_OscConfig+0x4ac>)
 8002384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1ee      	bne.n	800236c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800238e:	7dfb      	ldrb	r3, [r7, #23]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d105      	bne.n	80023a0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002394:	4b3b      	ldr	r3, [pc, #236]	; (8002484 <HAL_RCC_OscConfig+0x4ac>)
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	4a3a      	ldr	r2, [pc, #232]	; (8002484 <HAL_RCC_OscConfig+0x4ac>)
 800239a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800239e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 80ad 	beq.w	8002504 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023aa:	4b36      	ldr	r3, [pc, #216]	; (8002484 <HAL_RCC_OscConfig+0x4ac>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	d060      	beq.n	8002478 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d145      	bne.n	800244a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023be:	4b33      	ldr	r3, [pc, #204]	; (800248c <HAL_RCC_OscConfig+0x4b4>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c4:	f7fe fffa 	bl	80013bc <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023cc:	f7fe fff6 	bl	80013bc <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e093      	b.n	8002506 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023de:	4b29      	ldr	r3, [pc, #164]	; (8002484 <HAL_RCC_OscConfig+0x4ac>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69da      	ldr	r2, [r3, #28]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	019b      	lsls	r3, r3, #6
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002400:	085b      	lsrs	r3, r3, #1
 8002402:	3b01      	subs	r3, #1
 8002404:	041b      	lsls	r3, r3, #16
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240c:	061b      	lsls	r3, r3, #24
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	071b      	lsls	r3, r3, #28
 8002416:	491b      	ldr	r1, [pc, #108]	; (8002484 <HAL_RCC_OscConfig+0x4ac>)
 8002418:	4313      	orrs	r3, r2
 800241a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800241c:	4b1b      	ldr	r3, [pc, #108]	; (800248c <HAL_RCC_OscConfig+0x4b4>)
 800241e:	2201      	movs	r2, #1
 8002420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002422:	f7fe ffcb 	bl	80013bc <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800242a:	f7fe ffc7 	bl	80013bc <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e064      	b.n	8002506 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243c:	4b11      	ldr	r3, [pc, #68]	; (8002484 <HAL_RCC_OscConfig+0x4ac>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0f0      	beq.n	800242a <HAL_RCC_OscConfig+0x452>
 8002448:	e05c      	b.n	8002504 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244a:	4b10      	ldr	r3, [pc, #64]	; (800248c <HAL_RCC_OscConfig+0x4b4>)
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7fe ffb4 	bl	80013bc <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002458:	f7fe ffb0 	bl	80013bc <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e04d      	b.n	8002506 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246a:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_RCC_OscConfig+0x4ac>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x480>
 8002476:	e045      	b.n	8002504 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d107      	bne.n	8002490 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e040      	b.n	8002506 <HAL_RCC_OscConfig+0x52e>
 8002484:	40023800 	.word	0x40023800
 8002488:	40007000 	.word	0x40007000
 800248c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002490:	4b1f      	ldr	r3, [pc, #124]	; (8002510 <HAL_RCC_OscConfig+0x538>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d030      	beq.n	8002500 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d129      	bne.n	8002500 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d122      	bne.n	8002500 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024c0:	4013      	ands	r3, r2
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d119      	bne.n	8002500 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d6:	085b      	lsrs	r3, r3, #1
 80024d8:	3b01      	subs	r3, #1
 80024da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024dc:	429a      	cmp	r2, r3
 80024de:	d10f      	bne.n	8002500 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d107      	bne.n	8002500 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d001      	beq.n	8002504 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e000      	b.n	8002506 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40023800 	.word	0x40023800

08002514 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e07b      	b.n	800261e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	2b00      	cmp	r3, #0
 800252c:	d108      	bne.n	8002540 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002536:	d009      	beq.n	800254c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	61da      	str	r2, [r3, #28]
 800253e:	e005      	b.n	800254c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d106      	bne.n	800256c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7fe fd9c 	bl	80010a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002582:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002594:	431a      	orrs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	431a      	orrs	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025bc:	431a      	orrs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d0:	ea42 0103 	orr.w	r1, r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	0c1b      	lsrs	r3, r3, #16
 80025ea:	f003 0104 	and.w	r1, r3, #4
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	f003 0210 	and.w	r2, r3, #16
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	69da      	ldr	r2, [r3, #28]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800260c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b088      	sub	sp, #32
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	603b      	str	r3, [r7, #0]
 8002632:	4613      	mov	r3, r2
 8002634:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_SPI_Transmit+0x22>
 8002644:	2302      	movs	r3, #2
 8002646:	e126      	b.n	8002896 <HAL_SPI_Transmit+0x270>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002650:	f7fe feb4 	bl	80013bc <HAL_GetTick>
 8002654:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002656:	88fb      	ldrh	r3, [r7, #6]
 8002658:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b01      	cmp	r3, #1
 8002664:	d002      	beq.n	800266c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002666:	2302      	movs	r3, #2
 8002668:	77fb      	strb	r3, [r7, #31]
    goto error;
 800266a:	e10b      	b.n	8002884 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d002      	beq.n	8002678 <HAL_SPI_Transmit+0x52>
 8002672:	88fb      	ldrh	r3, [r7, #6]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d102      	bne.n	800267e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800267c:	e102      	b.n	8002884 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2203      	movs	r2, #3
 8002682:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	88fa      	ldrh	r2, [r7, #6]
 8002696:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	88fa      	ldrh	r2, [r7, #6]
 800269c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026c4:	d10f      	bne.n	80026e6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f0:	2b40      	cmp	r3, #64	; 0x40
 80026f2:	d007      	beq.n	8002704 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002702:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800270c:	d14b      	bne.n	80027a6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d002      	beq.n	800271c <HAL_SPI_Transmit+0xf6>
 8002716:	8afb      	ldrh	r3, [r7, #22]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d13e      	bne.n	800279a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	881a      	ldrh	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272c:	1c9a      	adds	r2, r3, #2
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002736:	b29b      	uxth	r3, r3
 8002738:	3b01      	subs	r3, #1
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002740:	e02b      	b.n	800279a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b02      	cmp	r3, #2
 800274e:	d112      	bne.n	8002776 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002754:	881a      	ldrh	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	1c9a      	adds	r2, r3, #2
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800276a:	b29b      	uxth	r3, r3
 800276c:	3b01      	subs	r3, #1
 800276e:	b29a      	uxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	86da      	strh	r2, [r3, #54]	; 0x36
 8002774:	e011      	b.n	800279a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002776:	f7fe fe21 	bl	80013bc <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d803      	bhi.n	800278e <HAL_SPI_Transmit+0x168>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800278c:	d102      	bne.n	8002794 <HAL_SPI_Transmit+0x16e>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d102      	bne.n	800279a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002798:	e074      	b.n	8002884 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1ce      	bne.n	8002742 <HAL_SPI_Transmit+0x11c>
 80027a4:	e04c      	b.n	8002840 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <HAL_SPI_Transmit+0x18e>
 80027ae:	8afb      	ldrh	r3, [r7, #22]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d140      	bne.n	8002836 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	330c      	adds	r3, #12
 80027be:	7812      	ldrb	r2, [r2, #0]
 80027c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80027da:	e02c      	b.n	8002836 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d113      	bne.n	8002812 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	330c      	adds	r3, #12
 80027f4:	7812      	ldrb	r2, [r2, #0]
 80027f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002806:	b29b      	uxth	r3, r3
 8002808:	3b01      	subs	r3, #1
 800280a:	b29a      	uxth	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002810:	e011      	b.n	8002836 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002812:	f7fe fdd3 	bl	80013bc <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d803      	bhi.n	800282a <HAL_SPI_Transmit+0x204>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002828:	d102      	bne.n	8002830 <HAL_SPI_Transmit+0x20a>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d102      	bne.n	8002836 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002834:	e026      	b.n	8002884 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800283a:	b29b      	uxth	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1cd      	bne.n	80027dc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	6839      	ldr	r1, [r7, #0]
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 f8b3 	bl	80029b0 <SPI_EndRxTxTransaction>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2220      	movs	r2, #32
 8002854:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10a      	bne.n	8002874 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800285e:	2300      	movs	r3, #0
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002878:	2b00      	cmp	r3, #0
 800287a:	d002      	beq.n	8002882 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	77fb      	strb	r3, [r7, #31]
 8002880:	e000      	b.n	8002884 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002882:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002894:	7ffb      	ldrb	r3, [r7, #31]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3720      	adds	r7, #32
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
	...

080028a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b088      	sub	sp, #32
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	603b      	str	r3, [r7, #0]
 80028ac:	4613      	mov	r3, r2
 80028ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028b0:	f7fe fd84 	bl	80013bc <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	4413      	add	r3, r2
 80028be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028c0:	f7fe fd7c 	bl	80013bc <HAL_GetTick>
 80028c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028c6:	4b39      	ldr	r3, [pc, #228]	; (80029ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	015b      	lsls	r3, r3, #5
 80028cc:	0d1b      	lsrs	r3, r3, #20
 80028ce:	69fa      	ldr	r2, [r7, #28]
 80028d0:	fb02 f303 	mul.w	r3, r2, r3
 80028d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028d6:	e054      	b.n	8002982 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028de:	d050      	beq.n	8002982 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028e0:	f7fe fd6c 	bl	80013bc <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	69fa      	ldr	r2, [r7, #28]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d902      	bls.n	80028f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d13d      	bne.n	8002972 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002904:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800290e:	d111      	bne.n	8002934 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002918:	d004      	beq.n	8002924 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002922:	d107      	bne.n	8002934 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002932:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002938:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800293c:	d10f      	bne.n	800295e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800295c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e017      	b.n	80029a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002978:	2300      	movs	r3, #0
 800297a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	3b01      	subs	r3, #1
 8002980:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	4013      	ands	r3, r2
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	429a      	cmp	r2, r3
 8002990:	bf0c      	ite	eq
 8002992:	2301      	moveq	r3, #1
 8002994:	2300      	movne	r3, #0
 8002996:	b2db      	uxtb	r3, r3
 8002998:	461a      	mov	r2, r3
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	429a      	cmp	r2, r3
 800299e:	d19b      	bne.n	80028d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3720      	adds	r7, #32
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	200049f8 	.word	0x200049f8

080029b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b088      	sub	sp, #32
 80029b4:	af02      	add	r7, sp, #8
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80029bc:	4b1b      	ldr	r3, [pc, #108]	; (8002a2c <SPI_EndRxTxTransaction+0x7c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a1b      	ldr	r2, [pc, #108]	; (8002a30 <SPI_EndRxTxTransaction+0x80>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	0d5b      	lsrs	r3, r3, #21
 80029c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029cc:	fb02 f303 	mul.w	r3, r2, r3
 80029d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029da:	d112      	bne.n	8002a02 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2200      	movs	r2, #0
 80029e4:	2180      	movs	r1, #128	; 0x80
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f7ff ff5a 	bl	80028a0 <SPI_WaitFlagStateUntilTimeout>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d016      	beq.n	8002a20 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f6:	f043 0220 	orr.w	r2, r3, #32
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e00f      	b.n	8002a22 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00a      	beq.n	8002a1e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a18:	2b80      	cmp	r3, #128	; 0x80
 8002a1a:	d0f2      	beq.n	8002a02 <SPI_EndRxTxTransaction+0x52>
 8002a1c:	e000      	b.n	8002a20 <SPI_EndRxTxTransaction+0x70>
        break;
 8002a1e:	bf00      	nop
  }

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	200049f8 	.word	0x200049f8
 8002a30:	165e9f81 	.word	0x165e9f81

08002a34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e03f      	b.n	8002ac6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d106      	bne.n	8002a60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7fe fb9a 	bl	8001194 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2224      	movs	r2, #36	; 0x24
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f829 	bl	8002ad0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	691a      	ldr	r2, [r3, #16]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695a      	ldr	r2, [r3, #20]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68da      	ldr	r2, [r3, #12]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002aac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ad4:	b0c0      	sub	sp, #256	; 0x100
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aec:	68d9      	ldr	r1, [r3, #12]
 8002aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	ea40 0301 	orr.w	r3, r0, r1
 8002af8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b28:	f021 010c 	bic.w	r1, r1, #12
 8002b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b36:	430b      	orrs	r3, r1
 8002b38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b4a:	6999      	ldr	r1, [r3, #24]
 8002b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	ea40 0301 	orr.w	r3, r0, r1
 8002b56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	4b8f      	ldr	r3, [pc, #572]	; (8002d9c <UART_SetConfig+0x2cc>)
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d005      	beq.n	8002b70 <UART_SetConfig+0xa0>
 8002b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	4b8d      	ldr	r3, [pc, #564]	; (8002da0 <UART_SetConfig+0x2d0>)
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d104      	bne.n	8002b7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b70:	f7fe ffee 	bl	8001b50 <HAL_RCC_GetPCLK2Freq>
 8002b74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b78:	e003      	b.n	8002b82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b7a:	f7fe ffd5 	bl	8001b28 <HAL_RCC_GetPCLK1Freq>
 8002b7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b8c:	f040 810c 	bne.w	8002da8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b94:	2200      	movs	r2, #0
 8002b96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002ba2:	4622      	mov	r2, r4
 8002ba4:	462b      	mov	r3, r5
 8002ba6:	1891      	adds	r1, r2, r2
 8002ba8:	65b9      	str	r1, [r7, #88]	; 0x58
 8002baa:	415b      	adcs	r3, r3
 8002bac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002bb2:	4621      	mov	r1, r4
 8002bb4:	eb12 0801 	adds.w	r8, r2, r1
 8002bb8:	4629      	mov	r1, r5
 8002bba:	eb43 0901 	adc.w	r9, r3, r1
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bd2:	4690      	mov	r8, r2
 8002bd4:	4699      	mov	r9, r3
 8002bd6:	4623      	mov	r3, r4
 8002bd8:	eb18 0303 	adds.w	r3, r8, r3
 8002bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002be0:	462b      	mov	r3, r5
 8002be2:	eb49 0303 	adc.w	r3, r9, r3
 8002be6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002bf6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002bfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002bfe:	460b      	mov	r3, r1
 8002c00:	18db      	adds	r3, r3, r3
 8002c02:	653b      	str	r3, [r7, #80]	; 0x50
 8002c04:	4613      	mov	r3, r2
 8002c06:	eb42 0303 	adc.w	r3, r2, r3
 8002c0a:	657b      	str	r3, [r7, #84]	; 0x54
 8002c0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c14:	f7fd faf6 	bl	8000204 <__aeabi_uldivmod>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4b61      	ldr	r3, [pc, #388]	; (8002da4 <UART_SetConfig+0x2d4>)
 8002c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	011c      	lsls	r4, r3, #4
 8002c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c38:	4642      	mov	r2, r8
 8002c3a:	464b      	mov	r3, r9
 8002c3c:	1891      	adds	r1, r2, r2
 8002c3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c40:	415b      	adcs	r3, r3
 8002c42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c48:	4641      	mov	r1, r8
 8002c4a:	eb12 0a01 	adds.w	sl, r2, r1
 8002c4e:	4649      	mov	r1, r9
 8002c50:	eb43 0b01 	adc.w	fp, r3, r1
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c68:	4692      	mov	sl, r2
 8002c6a:	469b      	mov	fp, r3
 8002c6c:	4643      	mov	r3, r8
 8002c6e:	eb1a 0303 	adds.w	r3, sl, r3
 8002c72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c76:	464b      	mov	r3, r9
 8002c78:	eb4b 0303 	adc.w	r3, fp, r3
 8002c7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c94:	460b      	mov	r3, r1
 8002c96:	18db      	adds	r3, r3, r3
 8002c98:	643b      	str	r3, [r7, #64]	; 0x40
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	eb42 0303 	adc.w	r3, r2, r3
 8002ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ca2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ca6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002caa:	f7fd faab 	bl	8000204 <__aeabi_uldivmod>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	4b3b      	ldr	r3, [pc, #236]	; (8002da4 <UART_SetConfig+0x2d4>)
 8002cb6:	fba3 2301 	umull	r2, r3, r3, r1
 8002cba:	095b      	lsrs	r3, r3, #5
 8002cbc:	2264      	movs	r2, #100	; 0x64
 8002cbe:	fb02 f303 	mul.w	r3, r2, r3
 8002cc2:	1acb      	subs	r3, r1, r3
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002cca:	4b36      	ldr	r3, [pc, #216]	; (8002da4 <UART_SetConfig+0x2d4>)
 8002ccc:	fba3 2302 	umull	r2, r3, r3, r2
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cd8:	441c      	add	r4, r3
 8002cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ce4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002ce8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002cec:	4642      	mov	r2, r8
 8002cee:	464b      	mov	r3, r9
 8002cf0:	1891      	adds	r1, r2, r2
 8002cf2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002cf4:	415b      	adcs	r3, r3
 8002cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002cfc:	4641      	mov	r1, r8
 8002cfe:	1851      	adds	r1, r2, r1
 8002d00:	6339      	str	r1, [r7, #48]	; 0x30
 8002d02:	4649      	mov	r1, r9
 8002d04:	414b      	adcs	r3, r1
 8002d06:	637b      	str	r3, [r7, #52]	; 0x34
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d14:	4659      	mov	r1, fp
 8002d16:	00cb      	lsls	r3, r1, #3
 8002d18:	4651      	mov	r1, sl
 8002d1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d1e:	4651      	mov	r1, sl
 8002d20:	00ca      	lsls	r2, r1, #3
 8002d22:	4610      	mov	r0, r2
 8002d24:	4619      	mov	r1, r3
 8002d26:	4603      	mov	r3, r0
 8002d28:	4642      	mov	r2, r8
 8002d2a:	189b      	adds	r3, r3, r2
 8002d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d30:	464b      	mov	r3, r9
 8002d32:	460a      	mov	r2, r1
 8002d34:	eb42 0303 	adc.w	r3, r2, r3
 8002d38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d50:	460b      	mov	r3, r1
 8002d52:	18db      	adds	r3, r3, r3
 8002d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d56:	4613      	mov	r3, r2
 8002d58:	eb42 0303 	adc.w	r3, r2, r3
 8002d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d66:	f7fd fa4d 	bl	8000204 <__aeabi_uldivmod>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4b0d      	ldr	r3, [pc, #52]	; (8002da4 <UART_SetConfig+0x2d4>)
 8002d70:	fba3 1302 	umull	r1, r3, r3, r2
 8002d74:	095b      	lsrs	r3, r3, #5
 8002d76:	2164      	movs	r1, #100	; 0x64
 8002d78:	fb01 f303 	mul.w	r3, r1, r3
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	3332      	adds	r3, #50	; 0x32
 8002d82:	4a08      	ldr	r2, [pc, #32]	; (8002da4 <UART_SetConfig+0x2d4>)
 8002d84:	fba2 2303 	umull	r2, r3, r2, r3
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	f003 0207 	and.w	r2, r3, #7
 8002d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4422      	add	r2, r4
 8002d96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d98:	e105      	b.n	8002fa6 <UART_SetConfig+0x4d6>
 8002d9a:	bf00      	nop
 8002d9c:	40011000 	.word	0x40011000
 8002da0:	40011400 	.word	0x40011400
 8002da4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002da8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dac:	2200      	movs	r2, #0
 8002dae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002db2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002db6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002dba:	4642      	mov	r2, r8
 8002dbc:	464b      	mov	r3, r9
 8002dbe:	1891      	adds	r1, r2, r2
 8002dc0:	6239      	str	r1, [r7, #32]
 8002dc2:	415b      	adcs	r3, r3
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dca:	4641      	mov	r1, r8
 8002dcc:	1854      	adds	r4, r2, r1
 8002dce:	4649      	mov	r1, r9
 8002dd0:	eb43 0501 	adc.w	r5, r3, r1
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	00eb      	lsls	r3, r5, #3
 8002dde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002de2:	00e2      	lsls	r2, r4, #3
 8002de4:	4614      	mov	r4, r2
 8002de6:	461d      	mov	r5, r3
 8002de8:	4643      	mov	r3, r8
 8002dea:	18e3      	adds	r3, r4, r3
 8002dec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002df0:	464b      	mov	r3, r9
 8002df2:	eb45 0303 	adc.w	r3, r5, r3
 8002df6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e16:	4629      	mov	r1, r5
 8002e18:	008b      	lsls	r3, r1, #2
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e20:	4621      	mov	r1, r4
 8002e22:	008a      	lsls	r2, r1, #2
 8002e24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e28:	f7fd f9ec 	bl	8000204 <__aeabi_uldivmod>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4b60      	ldr	r3, [pc, #384]	; (8002fb4 <UART_SetConfig+0x4e4>)
 8002e32:	fba3 2302 	umull	r2, r3, r3, r2
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	011c      	lsls	r4, r3, #4
 8002e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e4c:	4642      	mov	r2, r8
 8002e4e:	464b      	mov	r3, r9
 8002e50:	1891      	adds	r1, r2, r2
 8002e52:	61b9      	str	r1, [r7, #24]
 8002e54:	415b      	adcs	r3, r3
 8002e56:	61fb      	str	r3, [r7, #28]
 8002e58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e5c:	4641      	mov	r1, r8
 8002e5e:	1851      	adds	r1, r2, r1
 8002e60:	6139      	str	r1, [r7, #16]
 8002e62:	4649      	mov	r1, r9
 8002e64:	414b      	adcs	r3, r1
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e74:	4659      	mov	r1, fp
 8002e76:	00cb      	lsls	r3, r1, #3
 8002e78:	4651      	mov	r1, sl
 8002e7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e7e:	4651      	mov	r1, sl
 8002e80:	00ca      	lsls	r2, r1, #3
 8002e82:	4610      	mov	r0, r2
 8002e84:	4619      	mov	r1, r3
 8002e86:	4603      	mov	r3, r0
 8002e88:	4642      	mov	r2, r8
 8002e8a:	189b      	adds	r3, r3, r2
 8002e8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e90:	464b      	mov	r3, r9
 8002e92:	460a      	mov	r2, r1
 8002e94:	eb42 0303 	adc.w	r3, r2, r3
 8002e98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ea6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002eb4:	4649      	mov	r1, r9
 8002eb6:	008b      	lsls	r3, r1, #2
 8002eb8:	4641      	mov	r1, r8
 8002eba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ebe:	4641      	mov	r1, r8
 8002ec0:	008a      	lsls	r2, r1, #2
 8002ec2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002ec6:	f7fd f99d 	bl	8000204 <__aeabi_uldivmod>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4b39      	ldr	r3, [pc, #228]	; (8002fb4 <UART_SetConfig+0x4e4>)
 8002ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ed4:	095b      	lsrs	r3, r3, #5
 8002ed6:	2164      	movs	r1, #100	; 0x64
 8002ed8:	fb01 f303 	mul.w	r3, r1, r3
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	3332      	adds	r3, #50	; 0x32
 8002ee2:	4a34      	ldr	r2, [pc, #208]	; (8002fb4 <UART_SetConfig+0x4e4>)
 8002ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee8:	095b      	lsrs	r3, r3, #5
 8002eea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eee:	441c      	add	r4, r3
 8002ef0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	673b      	str	r3, [r7, #112]	; 0x70
 8002ef8:	677a      	str	r2, [r7, #116]	; 0x74
 8002efa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002efe:	4642      	mov	r2, r8
 8002f00:	464b      	mov	r3, r9
 8002f02:	1891      	adds	r1, r2, r2
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	415b      	adcs	r3, r3
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f0e:	4641      	mov	r1, r8
 8002f10:	1851      	adds	r1, r2, r1
 8002f12:	6039      	str	r1, [r7, #0]
 8002f14:	4649      	mov	r1, r9
 8002f16:	414b      	adcs	r3, r1
 8002f18:	607b      	str	r3, [r7, #4]
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f26:	4659      	mov	r1, fp
 8002f28:	00cb      	lsls	r3, r1, #3
 8002f2a:	4651      	mov	r1, sl
 8002f2c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f30:	4651      	mov	r1, sl
 8002f32:	00ca      	lsls	r2, r1, #3
 8002f34:	4610      	mov	r0, r2
 8002f36:	4619      	mov	r1, r3
 8002f38:	4603      	mov	r3, r0
 8002f3a:	4642      	mov	r2, r8
 8002f3c:	189b      	adds	r3, r3, r2
 8002f3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f40:	464b      	mov	r3, r9
 8002f42:	460a      	mov	r2, r1
 8002f44:	eb42 0303 	adc.w	r3, r2, r3
 8002f48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	663b      	str	r3, [r7, #96]	; 0x60
 8002f54:	667a      	str	r2, [r7, #100]	; 0x64
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f62:	4649      	mov	r1, r9
 8002f64:	008b      	lsls	r3, r1, #2
 8002f66:	4641      	mov	r1, r8
 8002f68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f6c:	4641      	mov	r1, r8
 8002f6e:	008a      	lsls	r2, r1, #2
 8002f70:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f74:	f7fd f946 	bl	8000204 <__aeabi_uldivmod>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4b0d      	ldr	r3, [pc, #52]	; (8002fb4 <UART_SetConfig+0x4e4>)
 8002f7e:	fba3 1302 	umull	r1, r3, r3, r2
 8002f82:	095b      	lsrs	r3, r3, #5
 8002f84:	2164      	movs	r1, #100	; 0x64
 8002f86:	fb01 f303 	mul.w	r3, r1, r3
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	3332      	adds	r3, #50	; 0x32
 8002f90:	4a08      	ldr	r2, [pc, #32]	; (8002fb4 <UART_SetConfig+0x4e4>)
 8002f92:	fba2 2303 	umull	r2, r3, r2, r3
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	f003 020f 	and.w	r2, r3, #15
 8002f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4422      	add	r2, r4
 8002fa4:	609a      	str	r2, [r3, #8]
}
 8002fa6:	bf00      	nop
 8002fa8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002fac:	46bd      	mov	sp, r7
 8002fae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fb2:	bf00      	nop
 8002fb4:	51eb851f 	.word	0x51eb851f

08002fb8 <__libc_init_array>:
 8002fb8:	b570      	push	{r4, r5, r6, lr}
 8002fba:	4d0d      	ldr	r5, [pc, #52]	; (8002ff0 <__libc_init_array+0x38>)
 8002fbc:	4c0d      	ldr	r4, [pc, #52]	; (8002ff4 <__libc_init_array+0x3c>)
 8002fbe:	1b64      	subs	r4, r4, r5
 8002fc0:	10a4      	asrs	r4, r4, #2
 8002fc2:	2600      	movs	r6, #0
 8002fc4:	42a6      	cmp	r6, r4
 8002fc6:	d109      	bne.n	8002fdc <__libc_init_array+0x24>
 8002fc8:	4d0b      	ldr	r5, [pc, #44]	; (8002ff8 <__libc_init_array+0x40>)
 8002fca:	4c0c      	ldr	r4, [pc, #48]	; (8002ffc <__libc_init_array+0x44>)
 8002fcc:	f000 f820 	bl	8003010 <_init>
 8002fd0:	1b64      	subs	r4, r4, r5
 8002fd2:	10a4      	asrs	r4, r4, #2
 8002fd4:	2600      	movs	r6, #0
 8002fd6:	42a6      	cmp	r6, r4
 8002fd8:	d105      	bne.n	8002fe6 <__libc_init_array+0x2e>
 8002fda:	bd70      	pop	{r4, r5, r6, pc}
 8002fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fe0:	4798      	blx	r3
 8002fe2:	3601      	adds	r6, #1
 8002fe4:	e7ee      	b.n	8002fc4 <__libc_init_array+0xc>
 8002fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fea:	4798      	blx	r3
 8002fec:	3601      	adds	r6, #1
 8002fee:	e7f2      	b.n	8002fd6 <__libc_init_array+0x1e>
 8002ff0:	08003048 	.word	0x08003048
 8002ff4:	08003048 	.word	0x08003048
 8002ff8:	08003048 	.word	0x08003048
 8002ffc:	0800304c 	.word	0x0800304c

08003000 <memset>:
 8003000:	4402      	add	r2, r0
 8003002:	4603      	mov	r3, r0
 8003004:	4293      	cmp	r3, r2
 8003006:	d100      	bne.n	800300a <memset+0xa>
 8003008:	4770      	bx	lr
 800300a:	f803 1b01 	strb.w	r1, [r3], #1
 800300e:	e7f9      	b.n	8003004 <memset+0x4>

08003010 <_init>:
 8003010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003012:	bf00      	nop
 8003014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003016:	bc08      	pop	{r3}
 8003018:	469e      	mov	lr, r3
 800301a:	4770      	bx	lr

0800301c <_fini>:
 800301c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800301e:	bf00      	nop
 8003020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003022:	bc08      	pop	{r3}
 8003024:	469e      	mov	lr, r3
 8003026:	4770      	bx	lr
