
DisplayILI9488.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004084  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08004248  08004248  00014248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800426c  0800426c  00032c30  2**0
                  CONTENTS
  4 .ARM          00000008  0800426c  0800426c  0001426c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004274  08004274  00032c30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004274  08004274  00014274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004278  08004278  00014278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00012c30  20000000  0800427c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20012c30  08016eac  00032c30  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012dbc  08016eac  00032dbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00032c30  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001173f  00000000  00000000  00032c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002943  00000000  00000000  0004439f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  00046ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb0  00000000  00000000  00047ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000225a6  00000000  00000000  00048b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013fcd  00000000  00000000  0006b13e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf1a7  00000000  00000000  0007f10b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014e2b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004120  00000000  00000000  0014e304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20012c30 	.word	0x20012c30
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004230 	.word	0x08004230

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20012c34 	.word	0x20012c34
 8000200:	08004230 	.word	0x08004230

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <Button_Init>:
static button_t btn1;

/* List of button handles (order must match button_id_t enum) */
static button_t *button_list[BTN_CNT] = {&btn1};

void Button_Init(void) {
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
	btn1 = (button_t) {
 800050e:	4b05      	ldr	r3, [pc, #20]	; (8000524 <Button_Init+0x1c>)
 8000510:	4a05      	ldr	r2, [pc, #20]	; (8000528 <Button_Init+0x20>)
 8000512:	ca07      	ldmia	r2, {r0, r1, r2}
 8000514:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.id = BTN_ID_1,
		.counter = 0,
		.port = B1_GPIO_Port,
		.pin = B1_Pin
	};
}
 8000518:	bf00      	nop
 800051a:	3714      	adds	r7, #20
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	20012c4c 	.word	0x20012c4c
 8000528:	08004248 	.word	0x08004248

0800052c <Button_PressedHandler>:

/**
 * @brief Callback function when button pressed
 * @param id (button_id_t) - id of button pressed
 */
static void Button_PressedHandler(button_id_t id) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
	switch (id) {
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d103      	bne.n	8000544 <Button_PressedHandler+0x18>
		case BTN_ID_1:
			Led_Toggle(LED_ID_1);
 800053c:	2000      	movs	r0, #0
 800053e:	f000 fe63 	bl	8001208 <Led_Toggle>
			break;
 8000542:	e000      	b.n	8000546 <Button_PressedHandler+0x1a>
		default:
			break;
 8000544:	bf00      	nop
	}
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <Button_ReleasedHandler>:

/**
 * @brief Callback function when button released
 * @param id (button_id_t) - id of button released
 */
static void Button_ReleasedHandler(button_id_t id) {
 800054e:	b480      	push	{r7}
 8000550:	b083      	sub	sp, #12
 8000552:	af00      	add	r7, sp, #0
 8000554:	4603      	mov	r3, r0
 8000556:	71fb      	strb	r3, [r7, #7]
	switch (id) {
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	2b00      	cmp	r3, #0
		case BTN_ID_1:
			break;
		default:
			break;
 800055c:	bf00      	nop
	}
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
	...

0800056c <Button_Debounce>:

void Button_Debounce(void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < BTN_CNT; i++) {
 8000572:	2300      	movs	r3, #0
 8000574:	73fb      	strb	r3, [r7, #15]
 8000576:	e03c      	b.n	80005f2 <Button_Debounce+0x86>
		// get next button to debounce
		button_t *btn = button_list[i];
 8000578:	7bfb      	ldrb	r3, [r7, #15]
 800057a:	4a22      	ldr	r2, [pc, #136]	; (8000604 <Button_Debounce+0x98>)
 800057c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000580:	60bb      	str	r3, [r7, #8]

		// Read current state of button
		bool pressed = !HAL_GPIO_ReadPin(btn->port, btn->pin);
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	685a      	ldr	r2, [r3, #4]
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	689b      	ldr	r3, [r3, #8]
 800058a:	b29b      	uxth	r3, r3
 800058c:	4619      	mov	r1, r3
 800058e:	4610      	mov	r0, r2
 8000590:	f001 fe1a 	bl	80021c8 <HAL_GPIO_ReadPin>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	bf0c      	ite	eq
 800059a:	2301      	moveq	r3, #1
 800059c:	2300      	movne	r3, #0
 800059e:	71fb      	strb	r3, [r7, #7]

		if (!pressed) {
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	f083 0301 	eor.w	r3, r3, #1
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d00c      	beq.n	80005c6 <Button_Debounce+0x5a>
			// if button released then call callback function if it exists
			if (btn->counter == DEBOUNCE_TIME + 1) {
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	785b      	ldrb	r3, [r3, #1]
 80005b0:	2b15      	cmp	r3, #21
 80005b2:	d104      	bne.n	80005be <Button_Debounce+0x52>
				Button_PressedHandler(btn->id);
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff ffb7 	bl	800052c <Button_PressedHandler>
			}

			// button not pressed so reset counter
			btn->counter = 0;
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	2200      	movs	r2, #0
 80005c2:	705a      	strb	r2, [r3, #1]
 80005c4:	e012      	b.n	80005ec <Button_Debounce+0x80>
		} else {
			// do not allow counter to overflow
			if (btn->counter <= DEBOUNCE_TIME) {
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	785b      	ldrb	r3, [r3, #1]
 80005ca:	2b14      	cmp	r3, #20
 80005cc:	d80e      	bhi.n	80005ec <Button_Debounce+0x80>
				btn->counter++;
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	785b      	ldrb	r3, [r3, #1]
 80005d2:	3301      	adds	r3, #1
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	705a      	strb	r2, [r3, #1]
				// if counter reaches debounce time then register press
				if (btn->counter == DEBOUNCE_TIME) {
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	785b      	ldrb	r3, [r3, #1]
 80005de:	2b14      	cmp	r3, #20
 80005e0:	d104      	bne.n	80005ec <Button_Debounce+0x80>
					Button_ReleasedHandler(btn->id);
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff ffb1 	bl	800054e <Button_ReleasedHandler>
	for (uint8_t i = 0; i < BTN_CNT; i++) {
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	3301      	adds	r3, #1
 80005f0:	73fb      	strb	r3, [r7, #15]
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d0bf      	beq.n	8000578 <Button_Debounce+0xc>
				}
			}
		}
	}
}
 80005f8:	bf00      	nop
 80005fa:	bf00      	nop
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000000 	.word	0x20000000

08000608 <Display_Init>:

/* External reference to display SPI handle */
extern SPI_HandleTypeDef hspi2;

void Display_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	/* Hardware reset display */
	Display_HWReset();
 800060c:	f000 f824 	bl	8000658 <Display_HWReset>

	/* Software reset */
	Display_TransmitCmd(DISPLAY_SWRESET);
 8000610:	2001      	movs	r0, #1
 8000612:	f000 f837 	bl	8000684 <Display_TransmitCmd>
	HAL_Delay(250);
 8000616:	20fa      	movs	r0, #250	; 0xfa
 8000618:	f001 fb0c 	bl	8001c34 <HAL_Delay>

	/* Exit sleep mode */
	Display_TransmitCmd(DISPLAY_SLEEPOUT);
 800061c:	2011      	movs	r0, #17
 800061e:	f000 f831 	bl	8000684 <Display_TransmitCmd>
	HAL_Delay(100);
 8000622:	2064      	movs	r0, #100	; 0x64
 8000624:	f001 fb06 	bl	8001c34 <HAL_Delay>

	/* 4-line serial interface mode control */
	Display_TransmitCmdParam(DISPLAY_INTMCTRL, 0x00);
 8000628:	2100      	movs	r1, #0
 800062a:	20b0      	movs	r0, #176	; 0xb0
 800062c:	f000 f86e 	bl	800070c <Display_TransmitCmdParam>

	/* 3-bit RGB interface pixel format */
	Display_TransmitCmdParam(DISPLAY_INTPXLFMT, 0x01);
 8000630:	2101      	movs	r1, #1
 8000632:	203a      	movs	r0, #58	; 0x3a
 8000634:	f000 f86a 	bl	800070c <Display_TransmitCmdParam>

	/* Memory access control sets scanning direction of frame memory */
	// was 0x08
	Display_TransmitCmdParam(DISPLAY_MEMACTRL, 0x08);
 8000638:	2108      	movs	r1, #8
 800063a:	2036      	movs	r0, #54	; 0x36
 800063c:	f000 f866 	bl	800070c <Display_TransmitCmdParam>

	/* TODO modify positive, negative, and digital gamma settings */

	/* Exit sleep mode */
	Display_TransmitCmd(DISPLAY_SLEEPOUT);
 8000640:	2011      	movs	r0, #17
 8000642:	f000 f81f 	bl	8000684 <Display_TransmitCmd>
	HAL_Delay(250);
 8000646:	20fa      	movs	r0, #250	; 0xfa
 8000648:	f001 faf4 	bl	8001c34 <HAL_Delay>

	/* Turn display on */
	Display_TransmitCmd(DISPLAY_DISPON);
 800064c:	2029      	movs	r0, #41	; 0x29
 800064e:	f000 f819 	bl	8000684 <Display_TransmitCmd>
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <Display_HWReset>:

void Display_HWReset(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	/* Hold RESET pin LOW with delay */
	HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	2101      	movs	r1, #1
 8000660:	4807      	ldr	r0, [pc, #28]	; (8000680 <Display_HWReset+0x28>)
 8000662:	f001 fdc9 	bl	80021f8 <HAL_GPIO_WritePin>
	HAL_Delay(DISPLAY_RESET_TIME_MS);
 8000666:	200a      	movs	r0, #10
 8000668:	f001 fae4 	bl	8001c34 <HAL_Delay>

	/* Set RESET pin HIGH and wait for system reset to complete */
	HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	2101      	movs	r1, #1
 8000670:	4803      	ldr	r0, [pc, #12]	; (8000680 <Display_HWReset+0x28>)
 8000672:	f001 fdc1 	bl	80021f8 <HAL_GPIO_WritePin>
	HAL_Delay(DISPLAY_RESET_TIME_MS);
 8000676:	200a      	movs	r0, #10
 8000678:	f001 fadc 	bl	8001c34 <HAL_Delay>
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40020800 	.word	0x40020800

08000684 <Display_TransmitCmd>:

void Display_TransmitCmd(uint8_t cmd)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
	/* DC/RS LOW since writing command */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2101      	movs	r1, #1
 8000692:	480b      	ldr	r0, [pc, #44]	; (80006c0 <Display_TransmitCmd+0x3c>)
 8000694:	f001 fdb0 	bl	80021f8 <HAL_GPIO_WritePin>

	/* Set CS LOW */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	2110      	movs	r1, #16
 800069c:	4808      	ldr	r0, [pc, #32]	; (80006c0 <Display_TransmitCmd+0x3c>)
 800069e:	f001 fdab 	bl	80021f8 <HAL_GPIO_WritePin>

	/* Write SPI data */
	HAL_SPI_Transmit(&hspi2, &cmd, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80006a2:	1df9      	adds	r1, r7, #7
 80006a4:	2364      	movs	r3, #100	; 0x64
 80006a6:	2201      	movs	r2, #1
 80006a8:	4806      	ldr	r0, [pc, #24]	; (80006c4 <Display_TransmitCmd+0x40>)
 80006aa:	f002 fc4a 	bl	8002f42 <HAL_SPI_Transmit>

	/* Set CS HIGH */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	2110      	movs	r1, #16
 80006b2:	4803      	ldr	r0, [pc, #12]	; (80006c0 <Display_TransmitCmd+0x3c>)
 80006b4:	f001 fda0 	bl	80021f8 <HAL_GPIO_WritePin>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40020400 	.word	0x40020400
 80006c4:	20012c68 	.word	0x20012c68

080006c8 <Display_TransmitParam>:

void Display_TransmitParam(uint8_t param)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
	/* DC/RS HIGH since writing data */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	2101      	movs	r1, #1
 80006d6:	480b      	ldr	r0, [pc, #44]	; (8000704 <Display_TransmitParam+0x3c>)
 80006d8:	f001 fd8e 	bl	80021f8 <HAL_GPIO_WritePin>

	/* Set CS LOW */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	2110      	movs	r1, #16
 80006e0:	4808      	ldr	r0, [pc, #32]	; (8000704 <Display_TransmitParam+0x3c>)
 80006e2:	f001 fd89 	bl	80021f8 <HAL_GPIO_WritePin>

	/* Write SPI data */
	HAL_SPI_Transmit(&hspi2, &param, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80006e6:	1df9      	adds	r1, r7, #7
 80006e8:	2364      	movs	r3, #100	; 0x64
 80006ea:	2201      	movs	r2, #1
 80006ec:	4806      	ldr	r0, [pc, #24]	; (8000708 <Display_TransmitParam+0x40>)
 80006ee:	f002 fc28 	bl	8002f42 <HAL_SPI_Transmit>

	/* Set CS HIGH */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	2110      	movs	r1, #16
 80006f6:	4803      	ldr	r0, [pc, #12]	; (8000704 <Display_TransmitParam+0x3c>)
 80006f8:	f001 fd7e 	bl	80021f8 <HAL_GPIO_WritePin>
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40020400 	.word	0x40020400
 8000708:	20012c68 	.word	0x20012c68

0800070c <Display_TransmitCmdParam>:

void Display_TransmitCmdParam(uint8_t cmd, uint8_t param)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	460a      	mov	r2, r1
 8000716:	71fb      	strb	r3, [r7, #7]
 8000718:	4613      	mov	r3, r2
 800071a:	71bb      	strb	r3, [r7, #6]
	/* Send command */
	Display_TransmitCmd(cmd);
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ffb0 	bl	8000684 <Display_TransmitCmd>

	/* Send parameter */
	Display_TransmitParam(param);
 8000724:	79bb      	ldrb	r3, [r7, #6]
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ffce 	bl	80006c8 <Display_TransmitParam>
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <Display_SetWindow>:

void Display_SetWindow(uint16_t xs, uint16_t ys, uint16_t xe, uint16_t ye)
{
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	4604      	mov	r4, r0
 800073c:	4608      	mov	r0, r1
 800073e:	4611      	mov	r1, r2
 8000740:	461a      	mov	r2, r3
 8000742:	4623      	mov	r3, r4
 8000744:	80fb      	strh	r3, [r7, #6]
 8000746:	4603      	mov	r3, r0
 8000748:	80bb      	strh	r3, [r7, #4]
 800074a:	460b      	mov	r3, r1
 800074c:	807b      	strh	r3, [r7, #2]
 800074e:	4613      	mov	r3, r2
 8000750:	803b      	strh	r3, [r7, #0]
	/* Check coordinate are not out of range */
	if ((xs > xe) || (xe > DISPLAY_MAX_X) || (ys > ye) || (ye > DISPLAY_MAX_Y)) {
 8000752:	88fa      	ldrh	r2, [r7, #6]
 8000754:	887b      	ldrh	r3, [r7, #2]
 8000756:	429a      	cmp	r2, r3
 8000758:	f200 808b 	bhi.w	8000872 <Display_SetWindow+0x13e>
 800075c:	887b      	ldrh	r3, [r7, #2]
 800075e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000762:	f080 8086 	bcs.w	8000872 <Display_SetWindow+0x13e>
 8000766:	88ba      	ldrh	r2, [r7, #4]
 8000768:	883b      	ldrh	r3, [r7, #0]
 800076a:	429a      	cmp	r2, r3
 800076c:	f200 8081 	bhi.w	8000872 <Display_SetWindow+0x13e>
 8000770:	883b      	ldrh	r3, [r7, #0]
 8000772:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000776:	d27c      	bcs.n	8000872 <Display_SetWindow+0x13e>
		/* Error so do nothing */
		return;
	}

	/* Set column range */
	Display_TransmitCmd(DISPLAY_COLADDRSET);
 8000778:	202a      	movs	r0, #42	; 0x2a
 800077a:	f7ff ff83 	bl	8000684 <Display_TransmitCmd>

	/* Set DC/RS LOW since transmitting date */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_SET);
 800077e:	2201      	movs	r2, #1
 8000780:	2101      	movs	r1, #1
 8000782:	483e      	ldr	r0, [pc, #248]	; (800087c <Display_SetWindow+0x148>)
 8000784:	f001 fd38 	bl	80021f8 <HAL_GPIO_WritePin>

	/* Hold CS LOW until all parameters have been sent */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	2110      	movs	r1, #16
 800078c:	483b      	ldr	r0, [pc, #236]	; (800087c <Display_SetWindow+0x148>)
 800078e:	f001 fd33 	bl	80021f8 <HAL_GPIO_WritePin>

	/* Write column start and end data */
	uint8_t byte = ys >> 8;	// SC[15:8]
 8000792:	88bb      	ldrh	r3, [r7, #4]
 8000794:	0a1b      	lsrs	r3, r3, #8
 8000796:	b29b      	uxth	r3, r3
 8000798:	b2db      	uxtb	r3, r3
 800079a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 800079c:	f107 010f 	add.w	r1, r7, #15
 80007a0:	2364      	movs	r3, #100	; 0x64
 80007a2:	2201      	movs	r2, #1
 80007a4:	4836      	ldr	r0, [pc, #216]	; (8000880 <Display_SetWindow+0x14c>)
 80007a6:	f002 fbcc 	bl	8002f42 <HAL_SPI_Transmit>
	byte = ys & 0xFF;		// SC[7:0]
 80007aa:	88bb      	ldrh	r3, [r7, #4]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80007b0:	f107 010f 	add.w	r1, r7, #15
 80007b4:	2364      	movs	r3, #100	; 0x64
 80007b6:	2201      	movs	r2, #1
 80007b8:	4831      	ldr	r0, [pc, #196]	; (8000880 <Display_SetWindow+0x14c>)
 80007ba:	f002 fbc2 	bl	8002f42 <HAL_SPI_Transmit>
	byte = ye >> 8;			// EC[15:8]
 80007be:	883b      	ldrh	r3, [r7, #0]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80007c8:	f107 010f 	add.w	r1, r7, #15
 80007cc:	2364      	movs	r3, #100	; 0x64
 80007ce:	2201      	movs	r2, #1
 80007d0:	482b      	ldr	r0, [pc, #172]	; (8000880 <Display_SetWindow+0x14c>)
 80007d2:	f002 fbb6 	bl	8002f42 <HAL_SPI_Transmit>
	byte = ye & 0xFF;		// EC[7:0]
 80007d6:	883b      	ldrh	r3, [r7, #0]
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80007dc:	f107 010f 	add.w	r1, r7, #15
 80007e0:	2364      	movs	r3, #100	; 0x64
 80007e2:	2201      	movs	r2, #1
 80007e4:	4826      	ldr	r0, [pc, #152]	; (8000880 <Display_SetWindow+0x14c>)
 80007e6:	f002 fbac 	bl	8002f42 <HAL_SPI_Transmit>

	/* Last parameter sent so end transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80007ea:	2201      	movs	r2, #1
 80007ec:	2110      	movs	r1, #16
 80007ee:	4823      	ldr	r0, [pc, #140]	; (800087c <Display_SetWindow+0x148>)
 80007f0:	f001 fd02 	bl	80021f8 <HAL_GPIO_WritePin>

	/* Set page range */
	Display_TransmitCmd(DISPLAY_PGADDRSET);
 80007f4:	202b      	movs	r0, #43	; 0x2b
 80007f6:	f7ff ff45 	bl	8000684 <Display_TransmitCmd>

	/* Set DC/RS LOW since transmitting date */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2101      	movs	r1, #1
 80007fe:	481f      	ldr	r0, [pc, #124]	; (800087c <Display_SetWindow+0x148>)
 8000800:	f001 fcfa 	bl	80021f8 <HAL_GPIO_WritePin>

	/* Begin multi-parameter transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2110      	movs	r1, #16
 8000808:	481c      	ldr	r0, [pc, #112]	; (800087c <Display_SetWindow+0x148>)
 800080a:	f001 fcf5 	bl	80021f8 <HAL_GPIO_WritePin>

	/* Write page start and end data */
	byte = xs >> 8;		// SP[15:8]
 800080e:	88fb      	ldrh	r3, [r7, #6]
 8000810:	0a1b      	lsrs	r3, r3, #8
 8000812:	b29b      	uxth	r3, r3
 8000814:	b2db      	uxtb	r3, r3
 8000816:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 8000818:	f107 010f 	add.w	r1, r7, #15
 800081c:	2364      	movs	r3, #100	; 0x64
 800081e:	2201      	movs	r2, #1
 8000820:	4817      	ldr	r0, [pc, #92]	; (8000880 <Display_SetWindow+0x14c>)
 8000822:	f002 fb8e 	bl	8002f42 <HAL_SPI_Transmit>
	byte = xs & 0xFF;	// SP[7:0]
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 800082c:	f107 010f 	add.w	r1, r7, #15
 8000830:	2364      	movs	r3, #100	; 0x64
 8000832:	2201      	movs	r2, #1
 8000834:	4812      	ldr	r0, [pc, #72]	; (8000880 <Display_SetWindow+0x14c>)
 8000836:	f002 fb84 	bl	8002f42 <HAL_SPI_Transmit>
	byte = xe >> 8;		// EP[15:8]
 800083a:	887b      	ldrh	r3, [r7, #2]
 800083c:	0a1b      	lsrs	r3, r3, #8
 800083e:	b29b      	uxth	r3, r3
 8000840:	b2db      	uxtb	r3, r3
 8000842:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 8000844:	f107 010f 	add.w	r1, r7, #15
 8000848:	2364      	movs	r3, #100	; 0x64
 800084a:	2201      	movs	r2, #1
 800084c:	480c      	ldr	r0, [pc, #48]	; (8000880 <Display_SetWindow+0x14c>)
 800084e:	f002 fb78 	bl	8002f42 <HAL_SPI_Transmit>
	byte = xe & 0xFF;	// EP[7:0]
 8000852:	887b      	ldrh	r3, [r7, #2]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 8000858:	f107 010f 	add.w	r1, r7, #15
 800085c:	2364      	movs	r3, #100	; 0x64
 800085e:	2201      	movs	r2, #1
 8000860:	4807      	ldr	r0, [pc, #28]	; (8000880 <Display_SetWindow+0x14c>)
 8000862:	f002 fb6e 	bl	8002f42 <HAL_SPI_Transmit>

	/* Last parameter sent so end transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000866:	2201      	movs	r2, #1
 8000868:	2110      	movs	r1, #16
 800086a:	4804      	ldr	r0, [pc, #16]	; (800087c <Display_SetWindow+0x148>)
 800086c:	f001 fcc4 	bl	80021f8 <HAL_GPIO_WritePin>
 8000870:	e000      	b.n	8000874 <Display_SetWindow+0x140>
		return;
 8000872:	bf00      	nop
}
 8000874:	3714      	adds	r7, #20
 8000876:	46bd      	mov	sp, r7
 8000878:	bd90      	pop	{r4, r7, pc}
 800087a:	bf00      	nop
 800087c:	40020400 	.word	0x40020400
 8000880:	20012c68 	.word	0x20012c68

08000884 <Display_SendColor>:


void Display_SendColor(uint32_t npixels, uint8_t color) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	460b      	mov	r3, r1
 800088e:	70fb      	strb	r3, [r7, #3]
	/* Set up writing to frame buffer */
	Display_TransmitCmd(DISPLAY_MEMWR);
 8000890:	202c      	movs	r0, #44	; 0x2c
 8000892:	f7ff fef7 	bl	8000684 <Display_TransmitCmd>

	/* Set up sending data to display */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_SET);
 8000896:	2201      	movs	r2, #1
 8000898:	2101      	movs	r1, #1
 800089a:	4815      	ldr	r0, [pc, #84]	; (80008f0 <Display_SendColor+0x6c>)
 800089c:	f001 fcac 	bl	80021f8 <HAL_GPIO_WritePin>

	/* Set CS LOW to begin transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2110      	movs	r1, #16
 80008a4:	4812      	ldr	r0, [pc, #72]	; (80008f0 <Display_SendColor+0x6c>)
 80008a6:	f001 fca7 	bl	80021f8 <HAL_GPIO_WritePin>

	/* If odd number of pixels pad a data byte to fill byte */
	if (npixels % 2 != 0) {
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d002      	beq.n	80008ba <Display_SendColor+0x36>
		npixels++;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3301      	adds	r3, #1
 80008b8:	607b      	str	r3, [r7, #4]
	}

	/* 2 pixel data stored per byte, so divide npixels by 2 */
	for (uint32_t i = 0; i < npixels / 2; i++) {
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	e008      	b.n	80008d2 <Display_SendColor+0x4e>
		HAL_SPI_Transmit(&hspi2, &color, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80008c0:	1cf9      	adds	r1, r7, #3
 80008c2:	2364      	movs	r3, #100	; 0x64
 80008c4:	2201      	movs	r2, #1
 80008c6:	480b      	ldr	r0, [pc, #44]	; (80008f4 <Display_SendColor+0x70>)
 80008c8:	f002 fb3b 	bl	8002f42 <HAL_SPI_Transmit>
	for (uint32_t i = 0; i < npixels / 2; i++) {
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	3301      	adds	r3, #1
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d3f1      	bcc.n	80008c0 <Display_SendColor+0x3c>
	}

	/* Set CS HIGH to end transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	2110      	movs	r1, #16
 80008e0:	4803      	ldr	r0, [pc, #12]	; (80008f0 <Display_SendColor+0x6c>)
 80008e2:	f001 fc89 	bl	80021f8 <HAL_GPIO_WritePin>
}
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40020400 	.word	0x40020400
 80008f4:	20012c68 	.word	0x20012c68

080008f8 <Display_SendData>:

void Display_SendData(uint32_t data_len, uint8_t *data) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]

	/* Set up writing to frame buffer */
	Display_TransmitCmd(DISPLAY_MEMWR);
 8000902:	202c      	movs	r0, #44	; 0x2c
 8000904:	f7ff febe 	bl	8000684 <Display_TransmitCmd>

	/* Set up sending data to display */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_SET);
 8000908:	2201      	movs	r2, #1
 800090a:	2101      	movs	r1, #1
 800090c:	4811      	ldr	r0, [pc, #68]	; (8000954 <Display_SendData+0x5c>)
 800090e:	f001 fc73 	bl	80021f8 <HAL_GPIO_WritePin>

	/* Set CS LOW to begin transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2110      	movs	r1, #16
 8000916:	480f      	ldr	r0, [pc, #60]	; (8000954 <Display_SendData+0x5c>)
 8000918:	f001 fc6e 	bl	80021f8 <HAL_GPIO_WritePin>

	for (uint32_t i = 0; i < data_len; i++) {
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	e00a      	b.n	8000938 <Display_SendData+0x40>
		HAL_SPI_Transmit(&hspi2, &(data[i]), sizeof(uint8_t), SPI_TIMEOUT_MS);
 8000922:	683a      	ldr	r2, [r7, #0]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	18d1      	adds	r1, r2, r3
 8000928:	2364      	movs	r3, #100	; 0x64
 800092a:	2201      	movs	r2, #1
 800092c:	480a      	ldr	r0, [pc, #40]	; (8000958 <Display_SendData+0x60>)
 800092e:	f002 fb08 	bl	8002f42 <HAL_SPI_Transmit>
	for (uint32_t i = 0; i < data_len; i++) {
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	3301      	adds	r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fa      	ldr	r2, [r7, #12]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	429a      	cmp	r2, r3
 800093e:	d3f0      	bcc.n	8000922 <Display_SendData+0x2a>
	}

	/* Set CS HIGH to end transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000940:	2201      	movs	r2, #1
 8000942:	2110      	movs	r1, #16
 8000944:	4803      	ldr	r0, [pc, #12]	; (8000954 <Display_SendData+0x5c>)
 8000946:	f001 fc57 	bl	80021f8 <HAL_GPIO_WritePin>
}
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40020400 	.word	0x40020400
 8000958:	20012c68 	.word	0x20012c68

0800095c <Encoder_Init>:
} encoder_t;

static encoder_t enc1;
static encoder_t *encoder_list[ENC_CNT] = {&enc1};

void Encoder_Init(void) {
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
	/* Get gray code */
	GPIO_PinState pinA = 0;//HAL_GPIO_ReadPin(enc->port, enc->pin);
 8000962:	2300      	movs	r3, #0
 8000964:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState pinB = 0;//HAL_GPIO_ReadPin(enc->port, enc->pin);
 8000966:	2300      	movs	r3, #0
 8000968:	73bb      	strb	r3, [r7, #14]

	/* Convert gray code to binary */
	int8_t binary = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	737b      	strb	r3, [r7, #13]
	binary |= (pinA << 1);
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	b25a      	sxtb	r2, r3
 8000974:	7b7b      	ldrb	r3, [r7, #13]
 8000976:	4313      	orrs	r3, r2
 8000978:	737b      	strb	r3, [r7, #13]
	binary |= (pinB << 0);
 800097a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800097e:	7b7b      	ldrb	r3, [r7, #13]
 8000980:	4313      	orrs	r3, r2
 8000982:	737b      	strb	r3, [r7, #13]

	enc1 = (encoder_t) {
 8000984:	7b7a      	ldrb	r2, [r7, #13]
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <Encoder_Init+0x4c>)
 8000988:	2100      	movs	r1, #0
 800098a:	7019      	strb	r1, [r3, #0]
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <Encoder_Init+0x4c>)
 800098e:	705a      	strb	r2, [r3, #1]
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <Encoder_Init+0x4c>)
 8000992:	2200      	movs	r2, #0
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <Encoder_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
		.id = ENC_ID_1,
		.last_code = binary,
		.port = 0,
		.pin = 0,
	};
}
 800099c:	bf00      	nop
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	20012c58 	.word	0x20012c58

080009ac <Encoder_CWHandler>:

/**
 * @brief Callback function when encoder turned clockwise
 * @param id (encoder_id_t) - id of encoder rotated
 */
static void Encoder_CWHandler(encoder_id_t id) {
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
	switch (id) {
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	2b00      	cmp	r3, #0
		case ENC_ID_1:
			break;
		default:
			break;
 80009ba:	bf00      	nop
	}
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <Encoder_CCWHandler>:

/**
 * @brief Callback function when encoder turned counter-clockwise
 * @param id (encoder_id_t) - id of encoder rotated
 */
static void Encoder_CCWHandler(encoder_id_t id) {
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
	switch (id) {
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2b00      	cmp	r3, #0
		case ENC_ID_1:
			break;
		default:
			break;
 80009d6:	bf00      	nop
	}
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <Encoder_Debounce>:

void Encoder_Debounce(void) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
	/* Iterate through all encoders */
	for (uint8_t i = 0; i < ENC_CNT; i++) {
 80009ea:	2300      	movs	r3, #0
 80009ec:	73fb      	strb	r3, [r7, #15]
 80009ee:	e037      	b.n	8000a60 <Encoder_Debounce+0x7c>
		encoder_t *enc = encoder_list[i];
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	4a1f      	ldr	r2, [pc, #124]	; (8000a70 <Encoder_Debounce+0x8c>)
 80009f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f8:	60bb      	str	r3, [r7, #8]

		/* Get gray code */
		GPIO_PinState pinA = 0;//HAL_GPIO_ReadPin(enc->port, enc->pin);
 80009fa:	2300      	movs	r3, #0
 80009fc:	71fb      	strb	r3, [r7, #7]
		GPIO_PinState pinB = 0;//HAL_GPIO_ReadPin(enc->port, enc->pin);
 80009fe:	2300      	movs	r3, #0
 8000a00:	71bb      	strb	r3, [r7, #6]

		/* Convert gray code to binary */
		int8_t binary = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	717b      	strb	r3, [r7, #5]
		binary |= (pinA << 1);
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	b25a      	sxtb	r2, r3
 8000a0c:	797b      	ldrb	r3, [r7, #5]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	717b      	strb	r3, [r7, #5]
		binary |= (pinB << 0);
 8000a12:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8000a16:	797b      	ldrb	r3, [r7, #5]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	717b      	strb	r3, [r7, #5]

		/* Check if encoder state has changed */
		if (binary != enc->last_code) {
 8000a1c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000a20:	68ba      	ldr	r2, [r7, #8]
 8000a22:	7852      	ldrb	r2, [r2, #1]
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d015      	beq.n	8000a54 <Encoder_Debounce+0x70>
			uint8_t diff = enc->last_code - binary;
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	785a      	ldrb	r2, [r3, #1]
 8000a2c:	797b      	ldrb	r3, [r7, #5]
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	713b      	strb	r3, [r7, #4]
			if (diff == -1 || diff == 3) {
 8000a32:	793b      	ldrb	r3, [r7, #4]
 8000a34:	2b03      	cmp	r3, #3
 8000a36:	d105      	bne.n	8000a44 <Encoder_Debounce+0x60>
				Encoder_CWHandler(enc->id);
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ffb5 	bl	80009ac <Encoder_CWHandler>
 8000a42:	e007      	b.n	8000a54 <Encoder_Debounce+0x70>
			} else if (diff == 1 || diff == -3) {
 8000a44:	793b      	ldrb	r3, [r7, #4]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d104      	bne.n	8000a54 <Encoder_Debounce+0x70>
				Encoder_CCWHandler(enc->id);
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff ffba 	bl	80009c8 <Encoder_CCWHandler>
			}
		}

		/* Update state */
		enc->last_code = binary;
 8000a54:	797a      	ldrb	r2, [r7, #5]
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < ENC_CNT; i++) {
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	73fb      	strb	r3, [r7, #15]
 8000a60:	7bfb      	ldrb	r3, [r7, #15]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d0c4      	beq.n	80009f0 <Encoder_Debounce+0xc>
	}
}
 8000a66:	bf00      	nop
 8000a68:	bf00      	nop
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000004 	.word	0x20000004

08000a74 <Gfx_Init>:
	0b1110000, // 7
	0b1111111, // 8
	0b1110011  // 9
};

void Gfx_Init(void) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	Gfx_SetBackground(COLOR_BLACK);
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f000 f803 	bl	8000a84 <Gfx_SetBackground>
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <Gfx_SetBackground>:

void Gfx_SetBackground(uint8_t color) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af02      	add	r7, sp, #8
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
	background_color = color;
 8000a8e:	4a08      	ldr	r2, [pc, #32]	; (8000ab0 <Gfx_SetBackground+0x2c>)
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	7013      	strb	r3, [r2, #0]
	Gfx_DrawRect(0, 0, DISPLAY_SIZE_X, DISPLAY_SIZE_Y, color);
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000a9c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f000 f806 	bl	8000ab4 <Gfx_DrawRect>
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20012c64 	.word	0x20012c64

08000ab4 <Gfx_DrawRect>:

void Gfx_DrawRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t color) {
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4604      	mov	r4, r0
 8000abc:	4608      	mov	r0, r1
 8000abe:	4611      	mov	r1, r2
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4623      	mov	r3, r4
 8000ac4:	80fb      	strh	r3, [r7, #6]
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	80bb      	strh	r3, [r7, #4]
 8000aca:	460b      	mov	r3, r1
 8000acc:	807b      	strh	r3, [r7, #2]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	803b      	strh	r3, [r7, #0]
	/* Set window of rectangle */
	Display_SetWindow(x, y, x + w - 1, y + h - 1);
 8000ad2:	88fa      	ldrh	r2, [r7, #6]
 8000ad4:	887b      	ldrh	r3, [r7, #2]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	3b01      	subs	r3, #1
 8000adc:	b29c      	uxth	r4, r3
 8000ade:	88ba      	ldrh	r2, [r7, #4]
 8000ae0:	883b      	ldrh	r3, [r7, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	88b9      	ldrh	r1, [r7, #4]
 8000aec:	88f8      	ldrh	r0, [r7, #6]
 8000aee:	4622      	mov	r2, r4
 8000af0:	f7ff fe20 	bl	8000734 <Display_SetWindow>

	/* Send pixel data */
	Display_SendColor(w * h, color);
 8000af4:	887b      	ldrh	r3, [r7, #2]
 8000af6:	883a      	ldrh	r2, [r7, #0]
 8000af8:	fb02 f303 	mul.w	r3, r2, r3
 8000afc:	461a      	mov	r2, r3
 8000afe:	7e3b      	ldrb	r3, [r7, #24]
 8000b00:	4619      	mov	r1, r3
 8000b02:	4610      	mov	r0, r2
 8000b04:	f7ff febe 	bl	8000884 <Display_SendColor>
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd90      	pop	{r4, r7, pc}

08000b10 <Gfx_DrawDigit>:

void Gfx_DrawDigit(uint16_t x, uint16_t y, uint8_t digit, uint8_t font_height, uint8_t color) {
 8000b10:	b590      	push	{r4, r7, lr}
 8000b12:	b087      	sub	sp, #28
 8000b14:	af02      	add	r7, sp, #8
 8000b16:	4604      	mov	r4, r0
 8000b18:	4608      	mov	r0, r1
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4623      	mov	r3, r4
 8000b20:	80fb      	strh	r3, [r7, #6]
 8000b22:	4603      	mov	r3, r0
 8000b24:	80bb      	strh	r3, [r7, #4]
 8000b26:	460b      	mov	r3, r1
 8000b28:	70fb      	strb	r3, [r7, #3]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	70bb      	strb	r3, [r7, #2]

	/* Digits 0-9 will map directly to display that digit, -1 will delete the digit */
	if (digit != (uint8_t)(-1) && (digit < 0 || digit > 9)) {
 8000b2e:	78fb      	ldrb	r3, [r7, #3]
 8000b30:	2bff      	cmp	r3, #255	; 0xff
 8000b32:	d003      	beq.n	8000b3c <Gfx_DrawDigit+0x2c>
 8000b34:	78fb      	ldrb	r3, [r7, #3]
 8000b36:	2b09      	cmp	r3, #9
 8000b38:	f200 8102 	bhi.w	8000d40 <Gfx_DrawDigit+0x230>
		// Do nothing if digit is not a valid value
		return;
	}

	/* thickness of each segment */
	uint8_t thickness = font_height / 10;
 8000b3c:	78bb      	ldrb	r3, [r7, #2]
 8000b3e:	4a82      	ldr	r2, [pc, #520]	; (8000d48 <Gfx_DrawDigit+0x238>)
 8000b40:	fba2 2303 	umull	r2, r3, r2, r3
 8000b44:	08db      	lsrs	r3, r3, #3
 8000b46:	73fb      	strb	r3, [r7, #15]

	/* length of each segment */
	uint8_t seg_len = (font_height - (thickness * 2)) / 2;
 8000b48:	78ba      	ldrb	r2, [r7, #2]
 8000b4a:	7bfb      	ldrb	r3, [r7, #15]
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	0fda      	lsrs	r2, r3, #31
 8000b52:	4413      	add	r3, r2
 8000b54:	105b      	asrs	r3, r3, #1
 8000b56:	73bb      	strb	r3, [r7, #14]

	/* for small fonts make the segments slightly thicker */
	if (font_height < 40) {
 8000b58:	78bb      	ldrb	r3, [r7, #2]
 8000b5a:	2b27      	cmp	r3, #39	; 0x27
 8000b5c:	d802      	bhi.n	8000b64 <Gfx_DrawDigit+0x54>
		thickness += 2;
 8000b5e:	7bfb      	ldrb	r3, [r7, #15]
 8000b60:	3302      	adds	r3, #2
 8000b62:	73fb      	strb	r3, [r7, #15]
	}

	/* Get abcdefg pattern for digit (or zero if digit == -1)*/
	uint8_t pattern = (digit == (uint8_t)(-1)) ? 0 : digit_patterns[digit];
 8000b64:	78fb      	ldrb	r3, [r7, #3]
 8000b66:	2bff      	cmp	r3, #255	; 0xff
 8000b68:	d003      	beq.n	8000b72 <Gfx_DrawDigit+0x62>
 8000b6a:	78fb      	ldrb	r3, [r7, #3]
 8000b6c:	4a77      	ldr	r2, [pc, #476]	; (8000d4c <Gfx_DrawDigit+0x23c>)
 8000b6e:	5cd3      	ldrb	r3, [r2, r3]
 8000b70:	e000      	b.n	8000b74 <Gfx_DrawDigit+0x64>
 8000b72:	2300      	movs	r3, #0
 8000b74:	737b      	strb	r3, [r7, #13]
	/* Active segments are set to color */
	/* Inactive segments are set to background color */
	uint8_t new_color;

	// a
	new_color = ((pattern & SEG_A_MASK) ? color : background_color);
 8000b76:	7b7b      	ldrb	r3, [r7, #13]
 8000b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d002      	beq.n	8000b86 <Gfx_DrawDigit+0x76>
 8000b80:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b84:	e001      	b.n	8000b8a <Gfx_DrawDigit+0x7a>
 8000b86:	4b72      	ldr	r3, [pc, #456]	; (8000d50 <Gfx_DrawDigit+0x240>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	733b      	strb	r3, [r7, #12]
	Gfx_DrawRect(x+thickness, y, seg_len, thickness, new_color);
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
 8000b8e:	b29a      	uxth	r2, r3
 8000b90:	88fb      	ldrh	r3, [r7, #6]
 8000b92:	4413      	add	r3, r2
 8000b94:	b298      	uxth	r0, r3
 8000b96:	7bbb      	ldrb	r3, [r7, #14]
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	b29c      	uxth	r4, r3
 8000b9e:	88b9      	ldrh	r1, [r7, #4]
 8000ba0:	7b3b      	ldrb	r3, [r7, #12]
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	4623      	mov	r3, r4
 8000ba6:	f7ff ff85 	bl	8000ab4 <Gfx_DrawRect>

	// b
	new_color = ((pattern & SEG_B_MASK) ? color : background_color);
 8000baa:	7b7b      	ldrb	r3, [r7, #13]
 8000bac:	f003 0320 	and.w	r3, r3, #32
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d002      	beq.n	8000bba <Gfx_DrawDigit+0xaa>
 8000bb4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bb8:	e001      	b.n	8000bbe <Gfx_DrawDigit+0xae>
 8000bba:	4b65      	ldr	r3, [pc, #404]	; (8000d50 <Gfx_DrawDigit+0x240>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	733b      	strb	r3, [r7, #12]
	Gfx_DrawRect(x+seg_len+thickness, y+thickness, thickness, seg_len, new_color);
 8000bc0:	7bbb      	ldrb	r3, [r7, #14]
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	4413      	add	r3, r2
 8000bd0:	b298      	uxth	r0, r3
 8000bd2:	7bfb      	ldrb	r3, [r7, #15]
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	88bb      	ldrh	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	b299      	uxth	r1, r3
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	7bbb      	ldrb	r3, [r7, #14]
 8000be2:	b29c      	uxth	r4, r3
 8000be4:	7b3b      	ldrb	r3, [r7, #12]
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	4623      	mov	r3, r4
 8000bea:	f7ff ff63 	bl	8000ab4 <Gfx_DrawRect>

	// c
	new_color = ((pattern & SEG_C_MASK) ? color : background_color);
 8000bee:	7b7b      	ldrb	r3, [r7, #13]
 8000bf0:	f003 0310 	and.w	r3, r3, #16
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d002      	beq.n	8000bfe <Gfx_DrawDigit+0xee>
 8000bf8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bfc:	e001      	b.n	8000c02 <Gfx_DrawDigit+0xf2>
 8000bfe:	4b54      	ldr	r3, [pc, #336]	; (8000d50 <Gfx_DrawDigit+0x240>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	733b      	strb	r3, [r7, #12]
	Gfx_DrawRect(x+seg_len+thickness, y+(2*thickness)+seg_len, thickness, seg_len, new_color);
 8000c04:	7bbb      	ldrb	r3, [r7, #14]
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	88fb      	ldrh	r3, [r7, #6]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	4413      	add	r3, r2
 8000c14:	b298      	uxth	r0, r3
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	88bb      	ldrh	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	7bbb      	ldrb	r3, [r7, #14]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	4413      	add	r3, r2
 8000c2a:	b299      	uxth	r1, r3
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	7bbb      	ldrb	r3, [r7, #14]
 8000c32:	b29c      	uxth	r4, r3
 8000c34:	7b3b      	ldrb	r3, [r7, #12]
 8000c36:	9300      	str	r3, [sp, #0]
 8000c38:	4623      	mov	r3, r4
 8000c3a:	f7ff ff3b 	bl	8000ab4 <Gfx_DrawRect>

	// d
	new_color = ((pattern & SEG_D_MASK) ? color : background_color);
 8000c3e:	7b7b      	ldrb	r3, [r7, #13]
 8000c40:	f003 0308 	and.w	r3, r3, #8
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d002      	beq.n	8000c4e <Gfx_DrawDigit+0x13e>
 8000c48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c4c:	e001      	b.n	8000c52 <Gfx_DrawDigit+0x142>
 8000c4e:	4b40      	ldr	r3, [pc, #256]	; (8000d50 <Gfx_DrawDigit+0x240>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	733b      	strb	r3, [r7, #12]
	Gfx_DrawRect(x+thickness, y+(2*thickness)+(2*seg_len), seg_len, thickness, new_color);
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	88fb      	ldrh	r3, [r7, #6]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	b298      	uxth	r0, r3
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	7bbb      	ldrb	r3, [r7, #14]
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	4413      	add	r3, r2
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	88bb      	ldrh	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	b299      	uxth	r1, r3
 8000c74:	7bbb      	ldrb	r3, [r7, #14]
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
 8000c7a:	b29c      	uxth	r4, r3
 8000c7c:	7b3b      	ldrb	r3, [r7, #12]
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	4623      	mov	r3, r4
 8000c82:	f7ff ff17 	bl	8000ab4 <Gfx_DrawRect>

	// e
	new_color = ((pattern & SEG_E_MASK) ? color : background_color);
 8000c86:	7b7b      	ldrb	r3, [r7, #13]
 8000c88:	f003 0304 	and.w	r3, r3, #4
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d002      	beq.n	8000c96 <Gfx_DrawDigit+0x186>
 8000c90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c94:	e001      	b.n	8000c9a <Gfx_DrawDigit+0x18a>
 8000c96:	4b2e      	ldr	r3, [pc, #184]	; (8000d50 <Gfx_DrawDigit+0x240>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	733b      	strb	r3, [r7, #12]
	Gfx_DrawRect(x, y+(2*thickness)+seg_len, thickness, seg_len, new_color);
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	88bb      	ldrh	r3, [r7, #4]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	7bbb      	ldrb	r3, [r7, #14]
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	4413      	add	r3, r2
 8000cb0:	b299      	uxth	r1, r3
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	7bbb      	ldrb	r3, [r7, #14]
 8000cb8:	b29c      	uxth	r4, r3
 8000cba:	88f8      	ldrh	r0, [r7, #6]
 8000cbc:	7b3b      	ldrb	r3, [r7, #12]
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	4623      	mov	r3, r4
 8000cc2:	f7ff fef7 	bl	8000ab4 <Gfx_DrawRect>

	// f
	new_color = ((pattern & SEG_F_MASK) ? color : background_color);
 8000cc6:	7b7b      	ldrb	r3, [r7, #13]
 8000cc8:	f003 0302 	and.w	r3, r3, #2
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d002      	beq.n	8000cd6 <Gfx_DrawDigit+0x1c6>
 8000cd0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cd4:	e001      	b.n	8000cda <Gfx_DrawDigit+0x1ca>
 8000cd6:	4b1e      	ldr	r3, [pc, #120]	; (8000d50 <Gfx_DrawDigit+0x240>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	733b      	strb	r3, [r7, #12]
	Gfx_DrawRect(x, y+thickness, thickness, seg_len, new_color);
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	88bb      	ldrh	r3, [r7, #4]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	b299      	uxth	r1, r3
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	7bbb      	ldrb	r3, [r7, #14]
 8000cec:	b29c      	uxth	r4, r3
 8000cee:	88f8      	ldrh	r0, [r7, #6]
 8000cf0:	7b3b      	ldrb	r3, [r7, #12]
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	4623      	mov	r3, r4
 8000cf6:	f7ff fedd 	bl	8000ab4 <Gfx_DrawRect>

	// g
	new_color = ((pattern & SEG_G_MASK) ? color : background_color);
 8000cfa:	7b7b      	ldrb	r3, [r7, #13]
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d002      	beq.n	8000d0a <Gfx_DrawDigit+0x1fa>
 8000d04:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d08:	e001      	b.n	8000d0e <Gfx_DrawDigit+0x1fe>
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <Gfx_DrawDigit+0x240>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	733b      	strb	r3, [r7, #12]
	Gfx_DrawRect(x+thickness, y+thickness+seg_len, seg_len, thickness, new_color);
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	88fb      	ldrh	r3, [r7, #6]
 8000d16:	4413      	add	r3, r2
 8000d18:	b298      	uxth	r0, r3
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	88bb      	ldrh	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	7bbb      	ldrb	r3, [r7, #14]
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	4413      	add	r3, r2
 8000d2a:	b299      	uxth	r1, r3
 8000d2c:	7bbb      	ldrb	r3, [r7, #14]
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	b29c      	uxth	r4, r3
 8000d34:	7b3b      	ldrb	r3, [r7, #12]
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	4623      	mov	r3, r4
 8000d3a:	f7ff febb 	bl	8000ab4 <Gfx_DrawRect>
 8000d3e:	e000      	b.n	8000d42 <Gfx_DrawDigit+0x232>
		return;
 8000d40:	bf00      	nop
}
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd90      	pop	{r4, r7, pc}
 8000d48:	cccccccd 	.word	0xcccccccd
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	20012c64 	.word	0x20012c64

08000d54 <Gfx_DrawImage>:
void Gfx_DrawNumber(uint16_t x, uint16_t y, uint8_t number, uint8_t font_height, uint8_t color) {
	Gfx_DrawDigit(x, y, number % 10, font_height, color);
	Gfx_DrawDigit(x + (font_height * 3 / 2), y, number / 10, font_height, color);
}

void Gfx_DrawImage(image_t *img) {
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	/* Set window to display image */
	Display_SetWindow(img->x, img->y, img->x + img->w -1, img->y + img->h - 1);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	8818      	ldrh	r0, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	8859      	ldrh	r1, [r3, #2]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	881a      	ldrh	r2, [r3, #0]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	889b      	ldrh	r3, [r3, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	3b01      	subs	r3, #1
 8000d72:	b29c      	uxth	r4, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	885a      	ldrh	r2, [r3, #2]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	88db      	ldrh	r3, [r3, #6]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	3b01      	subs	r3, #1
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	4622      	mov	r2, r4
 8000d86:	f7ff fcd5 	bl	8000734 <Display_SetWindow>

	/* Send image data */
	Display_SendData(img->data_len, img->data);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68da      	ldr	r2, [r3, #12]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	4619      	mov	r1, r3
 8000d94:	4610      	mov	r0, r2
 8000d96:	f7ff fdaf 	bl	80008f8 <Display_SendData>
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd90      	pop	{r4, r7, pc}
	...

08000da4 <SystemClock_Config>:
UART_HandleTypeDef huart2;	// uart interface for debugging
TIM_HandleTypeDef htim3;	// timer interface for button debouncing
TIM_HandleTypeDef htim2;	// timer interface for lap timing

void SystemClock_Config(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b094      	sub	sp, #80	; 0x50
 8000da8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	2234      	movs	r2, #52	; 0x34
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f003 fa34 	bl	8004220 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db8:	f107 0308 	add.w	r3, r7, #8
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]

	/* Configure the main internal regulator output voltage */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000dc8:	2300      	movs	r3, #0
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <SystemClock_Config+0xd4>)
 8000dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd0:	4a29      	ldr	r2, [pc, #164]	; (8000e78 <SystemClock_Config+0xd4>)
 8000dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd8:	4b27      	ldr	r3, [pc, #156]	; (8000e78 <SystemClock_Config+0xd4>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000de4:	2300      	movs	r3, #0
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	4b24      	ldr	r3, [pc, #144]	; (8000e7c <SystemClock_Config+0xd8>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000df0:	4a22      	ldr	r2, [pc, #136]	; (8000e7c <SystemClock_Config+0xd8>)
 8000df2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df6:	6013      	str	r3, [r2, #0]
 8000df8:	4b20      	ldr	r3, [pc, #128]	; (8000e7c <SystemClock_Config+0xd8>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e00:	603b      	str	r3, [r7, #0]
 8000e02:	683b      	ldr	r3, [r7, #0]

	/* Initialize the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e04:	2302      	movs	r3, #2
 8000e06:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e0c:	2310      	movs	r3, #16
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e10:	2302      	movs	r3, #2
 8000e12:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e14:	2300      	movs	r3, #0
 8000e16:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000e18:	2310      	movs	r3, #16
 8000e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000e1c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e20:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e22:	2304      	movs	r3, #4
 8000e24:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e26:	2302      	movs	r3, #2
 8000e28:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e2e:	f107 031c 	add.w	r3, r7, #28
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 fd5e 	bl	80028f4 <HAL_RCC_OscConfig>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <SystemClock_Config+0x9e>
		Error_Handler();
 8000e3e:	f000 f9b1 	bl	80011a4 <Error_Handler>
	}

	/* Initializes the CPU, AHB and APB buses clocks */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e42:	230f      	movs	r3, #15
 8000e44:	60bb      	str	r3, [r7, #8]
							  	  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e46:	2302      	movs	r3, #2
 8000e48:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e52:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000e58:	f107 0308 	add.w	r3, r7, #8
 8000e5c:	2102      	movs	r1, #2
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f001 f9fe 	bl	8002260 <HAL_RCC_ClockConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <SystemClock_Config+0xca>
		Error_Handler();
 8000e6a:	f000 f99b 	bl	80011a4 <Error_Handler>
	}
}
 8000e6e:	bf00      	nop
 8000e70:	3750      	adds	r7, #80	; 0x50
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40007000 	.word	0x40007000

08000e80 <MX_SPI2_Init>:


void MX_SPI2_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000e84:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000e86:	4a18      	ldr	r2, [pc, #96]	; (8000ee8 <MX_SPI2_Init+0x68>)
 8000e88:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e8a:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000e8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e90:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000eac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb0:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ec4:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000ecc:	220a      	movs	r2, #10
 8000ece:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000ed0:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000ed2:	f001 ffad 	bl	8002e30 <HAL_SPI_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_SPI2_Init+0x60>
		Error_Handler();
 8000edc:	f000 f962 	bl	80011a4 <Error_Handler>
	}
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20012c68 	.word	0x20012c68
 8000ee8:	40003800 	.word	0x40003800

08000eec <MX_USART2_UART_Init>:


void MX_USART2_UART_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	/* USART2 parameter configuration */
	huart2.Instance = USART2;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000ef2:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <MX_USART2_UART_Init+0x50>)
 8000ef4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000ef8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000efc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f12:	220c      	movs	r2, #12
 8000f14:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f24:	f002 fe96 	bl	8003c54 <HAL_UART_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000f2e:	f000 f939 	bl	80011a4 <Error_Handler>
	}
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20012cc0 	.word	0x20012cc0
 8000f3c:	40004400 	.word	0x40004400

08000f40 <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	4b40      	ldr	r3, [pc, #256]	; (800105c <MX_GPIO_Init+0x11c>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a3f      	ldr	r2, [pc, #252]	; (800105c <MX_GPIO_Init+0x11c>)
 8000f60:	f043 0304 	orr.w	r3, r3, #4
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b3d      	ldr	r3, [pc, #244]	; (800105c <MX_GPIO_Init+0x11c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0304 	and.w	r3, r3, #4
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b39      	ldr	r3, [pc, #228]	; (800105c <MX_GPIO_Init+0x11c>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a38      	ldr	r2, [pc, #224]	; (800105c <MX_GPIO_Init+0x11c>)
 8000f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b36      	ldr	r3, [pc, #216]	; (800105c <MX_GPIO_Init+0x11c>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	4b32      	ldr	r3, [pc, #200]	; (800105c <MX_GPIO_Init+0x11c>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a31      	ldr	r2, [pc, #196]	; (800105c <MX_GPIO_Init+0x11c>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b2f      	ldr	r3, [pc, #188]	; (800105c <MX_GPIO_Init+0x11c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	4b2b      	ldr	r3, [pc, #172]	; (800105c <MX_GPIO_Init+0x11c>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a2a      	ldr	r2, [pc, #168]	; (800105c <MX_GPIO_Init+0x11c>)
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b28      	ldr	r3, [pc, #160]	; (800105c <MX_GPIO_Init+0x11c>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]

	/* Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2101      	movs	r1, #1
 8000fca:	4825      	ldr	r0, [pc, #148]	; (8001060 <MX_GPIO_Init+0x120>)
 8000fcc:	f001 f914 	bl	80021f8 <HAL_GPIO_WritePin>

	/* Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2120      	movs	r1, #32
 8000fd4:	4823      	ldr	r0, [pc, #140]	; (8001064 <MX_GPIO_Init+0x124>)
 8000fd6:	f001 f90f 	bl	80021f8 <HAL_GPIO_WritePin>

	/* Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, SPI_DCRS_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2111      	movs	r1, #17
 8000fde:	4822      	ldr	r0, [pc, #136]	; (8001068 <MX_GPIO_Init+0x128>)
 8000fe0:	f001 f90a 	bl	80021f8 <HAL_GPIO_WritePin>

	/* Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000fe4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4819      	ldr	r0, [pc, #100]	; (8001060 <MX_GPIO_Init+0x120>)
 8000ffc:	f000 ff50 	bl	8001ea0 <HAL_GPIO_Init>

	/* Configure GPIO pin : SPI_RESET_Pin */
	GPIO_InitStruct.Pin = SPI_RESET_Pin;
 8001000:	2301      	movs	r3, #1
 8001002:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001004:	2301      	movs	r3, #1
 8001006:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI_RESET_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4619      	mov	r1, r3
 8001016:	4812      	ldr	r0, [pc, #72]	; (8001060 <MX_GPIO_Init+0x120>)
 8001018:	f000 ff42 	bl	8001ea0 <HAL_GPIO_Init>

	/* Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800101c:	2320      	movs	r3, #32
 800101e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	480c      	ldr	r0, [pc, #48]	; (8001064 <MX_GPIO_Init+0x124>)
 8001034:	f000 ff34 	bl	8001ea0 <HAL_GPIO_Init>

	/* Configure GPIO pins : SPI_DCRS_Pin SPI_CS_Pin */
	GPIO_InitStruct.Pin = SPI_DCRS_Pin|SPI_CS_Pin;
 8001038:	2311      	movs	r3, #17
 800103a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4619      	mov	r1, r3
 800104e:	4806      	ldr	r0, [pc, #24]	; (8001068 <MX_GPIO_Init+0x128>)
 8001050:	f000 ff26 	bl	8001ea0 <HAL_GPIO_Init>
}
 8001054:	bf00      	nop
 8001056:	3728      	adds	r7, #40	; 0x28
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40023800 	.word	0x40023800
 8001060:	40020800 	.word	0x40020800
 8001064:	40020000 	.word	0x40020000
 8001068:	40020400 	.word	0x40020400

0800106c <MX_TIM2_Init>:


void MX_TIM2_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001080:	463b      	mov	r3, r7
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]

  /* Initialize timer to generate interrupts every 1 second */
  htim2.Instance = TIM2;
 8001088:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <MX_TIM2_Init+0x98>)
 800108a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800108e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8001090:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <MX_TIM2_Init+0x98>)
 8001092:	f242 720f 	movw	r2, #9999	; 0x270f
 8001096:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001098:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <MX_TIM2_Init+0x98>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8399;
 800109e:	4b19      	ldr	r3, [pc, #100]	; (8001104 <MX_TIM2_Init+0x98>)
 80010a0:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80010a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <MX_TIM2_Init+0x98>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <MX_TIM2_Init+0x98>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010b2:	4814      	ldr	r0, [pc, #80]	; (8001104 <MX_TIM2_Init+0x98>)
 80010b4:	f002 f94c 	bl	8003350 <HAL_TIM_Base_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80010be:	f000 f871 	bl	80011a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010c8:	f107 0308 	add.w	r3, r7, #8
 80010cc:	4619      	mov	r1, r3
 80010ce:	480d      	ldr	r0, [pc, #52]	; (8001104 <MX_TIM2_Init+0x98>)
 80010d0:	f002 fb06 	bl	80036e0 <HAL_TIM_ConfigClockSource>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80010da:	f000 f863 	bl	80011a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010de:	2300      	movs	r3, #0
 80010e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010e6:	463b      	mov	r3, r7
 80010e8:	4619      	mov	r1, r3
 80010ea:	4806      	ldr	r0, [pc, #24]	; (8001104 <MX_TIM2_Init+0x98>)
 80010ec:	f002 fd22 	bl	8003b34 <HAL_TIMEx_MasterConfigSynchronization>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80010f6:	f000 f855 	bl	80011a4 <Error_Handler>
  }
}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20012d4c 	.word	0x20012d4c

08001108 <MX_TIM3_Init>:

void MX_TIM3_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111c:	463b      	mov	r3, r7
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]

  /* Initialize timer to generate interrupt every 1 milliseconds */
  htim3.Instance = TIM3;
 8001124:	4b1d      	ldr	r3, [pc, #116]	; (800119c <MX_TIM3_Init+0x94>)
 8001126:	4a1e      	ldr	r2, [pc, #120]	; (80011a0 <MX_TIM3_Init+0x98>)
 8001128:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 800112a:	4b1c      	ldr	r3, [pc, #112]	; (800119c <MX_TIM3_Init+0x94>)
 800112c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001130:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001132:	4b1a      	ldr	r3, [pc, #104]	; (800119c <MX_TIM3_Init+0x94>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 83;
 8001138:	4b18      	ldr	r3, [pc, #96]	; (800119c <MX_TIM3_Init+0x94>)
 800113a:	2253      	movs	r2, #83	; 0x53
 800113c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <MX_TIM3_Init+0x94>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001144:	4b15      	ldr	r3, [pc, #84]	; (800119c <MX_TIM3_Init+0x94>)
 8001146:	2200      	movs	r2, #0
 8001148:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800114a:	4814      	ldr	r0, [pc, #80]	; (800119c <MX_TIM3_Init+0x94>)
 800114c:	f002 f900 	bl	8003350 <HAL_TIM_Base_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001156:	f000 f825 	bl	80011a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800115a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800115e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001160:	f107 0308 	add.w	r3, r7, #8
 8001164:	4619      	mov	r1, r3
 8001166:	480d      	ldr	r0, [pc, #52]	; (800119c <MX_TIM3_Init+0x94>)
 8001168:	f002 faba 	bl	80036e0 <HAL_TIM_ConfigClockSource>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001172:	f000 f817 	bl	80011a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001176:	2300      	movs	r3, #0
 8001178:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800117e:	463b      	mov	r3, r7
 8001180:	4619      	mov	r1, r3
 8001182:	4806      	ldr	r0, [pc, #24]	; (800119c <MX_TIM3_Init+0x94>)
 8001184:	f002 fcd6 	bl	8003b34 <HAL_TIMEx_MasterConfigSynchronization>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800118e:	f000 f809 	bl	80011a4 <Error_Handler>
  }
}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20012d04 	.word	0x20012d04
 80011a0:	40000400 	.word	0x40000400

080011a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * Auto-generated by CubeIDE.
  */
void Error_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a8:	b672      	cpsid	i
}
 80011aa:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ac:	e7fe      	b.n	80011ac <Error_Handler+0x8>

080011ae <Led_Init>:
 */

#include "led.h"
#include "main.h"

void Led_Init(void) {
 80011ae:	b580      	push	{r7, lr}
 80011b0:	af00      	add	r7, sp, #0
	Led_Off(LED_ID_1);
 80011b2:	2000      	movs	r0, #0
 80011b4:	f000 f808 	bl	80011c8 <Led_Off>
	Led_Off(LED_ID_2);
 80011b8:	2001      	movs	r0, #1
 80011ba:	f000 f805 	bl	80011c8 <Led_Off>
	Led_Off(LED_ID_3);
 80011be:	2002      	movs	r0, #2
 80011c0:	f000 f802 	bl	80011c8 <Led_Off>
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <Led_Off>:
		default:
			break;
	}
}

void Led_Off(led_id_t led_id) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
	switch (led_id) {
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d00c      	beq.n	80011f2 <Led_Off+0x2a>
 80011d8:	2b02      	cmp	r3, #2
 80011da:	dc0c      	bgt.n	80011f6 <Led_Off+0x2e>
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d002      	beq.n	80011e6 <Led_Off+0x1e>
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d00a      	beq.n	80011fa <Led_Off+0x32>
			break;
		case LED_ID_3:
			// TODO turn led off
			break;
		default:
			break;
 80011e4:	e007      	b.n	80011f6 <Led_Off+0x2e>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2120      	movs	r1, #32
 80011ea:	4806      	ldr	r0, [pc, #24]	; (8001204 <Led_Off+0x3c>)
 80011ec:	f001 f804 	bl	80021f8 <HAL_GPIO_WritePin>
			break;
 80011f0:	e004      	b.n	80011fc <Led_Off+0x34>
			break;
 80011f2:	bf00      	nop
 80011f4:	e002      	b.n	80011fc <Led_Off+0x34>
			break;
 80011f6:	bf00      	nop
 80011f8:	e000      	b.n	80011fc <Led_Off+0x34>
			break;
 80011fa:	bf00      	nop
	}
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40020000 	.word	0x40020000

08001208 <Led_Toggle>:

void Led_Toggle(led_id_t led_id) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
	switch (led_id) {
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	2b02      	cmp	r3, #2
 8001216:	d00b      	beq.n	8001230 <Led_Toggle+0x28>
 8001218:	2b02      	cmp	r3, #2
 800121a:	dc0b      	bgt.n	8001234 <Led_Toggle+0x2c>
 800121c:	2b00      	cmp	r3, #0
 800121e:	d002      	beq.n	8001226 <Led_Toggle+0x1e>
 8001220:	2b01      	cmp	r3, #1
 8001222:	d009      	beq.n	8001238 <Led_Toggle+0x30>
			break;
		case LED_ID_3:
			// TODO toggle LED
			break;
		default:
			break;
 8001224:	e006      	b.n	8001234 <Led_Toggle+0x2c>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001226:	2120      	movs	r1, #32
 8001228:	4806      	ldr	r0, [pc, #24]	; (8001244 <Led_Toggle+0x3c>)
 800122a:	f000 fffe 	bl	800222a <HAL_GPIO_TogglePin>
			break;
 800122e:	e004      	b.n	800123a <Led_Toggle+0x32>
			break;
 8001230:	bf00      	nop
 8001232:	e002      	b.n	800123a <Led_Toggle+0x32>
			break;
 8001234:	bf00      	nop
 8001236:	e000      	b.n	800123a <Led_Toggle+0x32>
			break;
 8001238:	bf00      	nop
	}
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40020000 	.word	0x40020000

08001248 <main>:
#include "pot.h"
#include "timer.h"
#include "ui.h"

int main(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, initializes the flash interface and the systick */
	HAL_Init();
 800124c:	f000 fc80 	bl	8001b50 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8001250:	f7ff fda8 	bl	8000da4 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001254:	f7ff fe74 	bl	8000f40 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001258:	f7ff fe48 	bl	8000eec <MX_USART2_UART_Init>
	MX_SPI2_Init();
 800125c:	f7ff fe10 	bl	8000e80 <MX_SPI2_Init>
	MX_TIM2_Init();
 8001260:	f7ff ff04 	bl	800106c <MX_TIM2_Init>
	MX_TIM3_Init();
 8001264:	f7ff ff50 	bl	8001108 <MX_TIM3_Init>

	/* Turn off all LEDs */
	Led_Init();
 8001268:	f7ff ffa1 	bl	80011ae <Led_Init>

	/* Reset button controllers */
	Button_Init();
 800126c:	f7ff f94c 	bl	8000508 <Button_Init>

	/* Initialize rotary encoder controllers */
	Encoder_Init();
 8001270:	f7ff fb74 	bl	800095c <Encoder_Init>

	/* Initialize potentiometer controllers */
	Pot_Init();
 8001274:	f000 f80a 	bl	800128c <Pot_Init>

	/* Initialize display */
	Display_Init();
 8001278:	f7ff f9c6 	bl	8000608 <Display_Init>

	/* Initialize graphics unit */
	Gfx_Init();
 800127c:	f7ff fbfa 	bl	8000a74 <Gfx_Init>

	/* Initialize UI */
	UI_Init();
 8001280:	f000 fa00 	bl	8001684 <UI_Init>

	/* Start interrupts from timer */
	Timer_EnableInterrupts();
 8001284:	f000 f99e 	bl	80015c4 <Timer_EnableInterrupts>

	/* Infinite main loop */
	while (1)
 8001288:	e7fe      	b.n	8001288 <main+0x40>
	...

0800128c <Pot_Init>:
static pot_t pot1, pot2;
static pot_t *pot_list[] = {&pot1, &pot2};

static pot_id_t current_pot = 0;

void Pot_Init(void) {
 800128c:	b480      	push	{r7}
 800128e:	b087      	sub	sp, #28
 8001290:	af00      	add	r7, sp, #0
	pot1 = (pot_t) {
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <Pot_Init+0x38>)
 8001294:	461a      	mov	r2, r3
 8001296:	2300      	movs	r3, #0
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	6053      	str	r3, [r2, #4]
 800129c:	6093      	str	r3, [r2, #8]
		.last_reading = 0,
		.port = 0,
		.pin = 0
	};

	pot2 = (pot_t) {
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <Pot_Init+0x3c>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	701a      	strb	r2, [r3, #0]
 80012a4:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <Pot_Init+0x3c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	805a      	strh	r2, [r3, #2]
 80012aa:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <Pot_Init+0x3c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <Pot_Init+0x3c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
		.last_reading = 0,
		.port = 0,
		.pin = 0
	};

}
 80012b6:	bf00      	nop
 80012b8:	371c      	adds	r7, #28
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20012d94 	.word	0x20012d94
 80012c8:	20012da0 	.word	0x20012da0

080012cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <HAL_MspInit+0x4c>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	4a0f      	ldr	r2, [pc, #60]	; (8001318 <HAL_MspInit+0x4c>)
 80012dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e0:	6453      	str	r3, [r2, #68]	; 0x44
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <HAL_MspInit+0x4c>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	603b      	str	r3, [r7, #0]
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <HAL_MspInit+0x4c>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	4a08      	ldr	r2, [pc, #32]	; (8001318 <HAL_MspInit+0x4c>)
 80012f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fc:	6413      	str	r3, [r2, #64]	; 0x40
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_MspInit+0x4c>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800130a:	2007      	movs	r0, #7
 800130c:	f000 fd86 	bl	8001e1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40023800 	.word	0x40023800

0800131c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a30      	ldr	r2, [pc, #192]	; (80013fc <HAL_SPI_MspInit+0xe0>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d15a      	bne.n	80013f4 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <HAL_SPI_MspInit+0xe4>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	4a2e      	ldr	r2, [pc, #184]	; (8001400 <HAL_SPI_MspInit+0xe4>)
 8001348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800134c:	6413      	str	r3, [r2, #64]	; 0x40
 800134e:	4b2c      	ldr	r3, [pc, #176]	; (8001400 <HAL_SPI_MspInit+0xe4>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b28      	ldr	r3, [pc, #160]	; (8001400 <HAL_SPI_MspInit+0xe4>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a27      	ldr	r2, [pc, #156]	; (8001400 <HAL_SPI_MspInit+0xe4>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b25      	ldr	r3, [pc, #148]	; (8001400 <HAL_SPI_MspInit+0xe4>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	4b21      	ldr	r3, [pc, #132]	; (8001400 <HAL_SPI_MspInit+0xe4>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a20      	ldr	r2, [pc, #128]	; (8001400 <HAL_SPI_MspInit+0xe4>)
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <HAL_SPI_MspInit+0xe4>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001392:	2302      	movs	r3, #2
 8001394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139e:	2303      	movs	r3, #3
 80013a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80013a2:	2307      	movs	r3, #7
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	4815      	ldr	r0, [pc, #84]	; (8001404 <HAL_SPI_MspInit+0xe8>)
 80013ae:	f000 fd77 	bl	8001ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013b2:	2304      	movs	r3, #4
 80013b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b6:	2302      	movs	r3, #2
 80013b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013be:	2303      	movs	r3, #3
 80013c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013c2:	2305      	movs	r3, #5
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4619      	mov	r1, r3
 80013cc:	480d      	ldr	r0, [pc, #52]	; (8001404 <HAL_SPI_MspInit+0xe8>)
 80013ce:	f000 fd67 	bl	8001ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e0:	2303      	movs	r3, #3
 80013e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013e4:	2305      	movs	r3, #5
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	4619      	mov	r1, r3
 80013ee:	4806      	ldr	r0, [pc, #24]	; (8001408 <HAL_SPI_MspInit+0xec>)
 80013f0:	f000 fd56 	bl	8001ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80013f4:	bf00      	nop
 80013f6:	3728      	adds	r7, #40	; 0x28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40003800 	.word	0x40003800
 8001400:	40023800 	.word	0x40023800
 8001404:	40020800 	.word	0x40020800
 8001408:	40020400 	.word	0x40020400

0800140c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800141c:	d116      	bne.n	800144c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	4b1a      	ldr	r3, [pc, #104]	; (800148c <HAL_TIM_Base_MspInit+0x80>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	4a19      	ldr	r2, [pc, #100]	; (800148c <HAL_TIM_Base_MspInit+0x80>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6413      	str	r3, [r2, #64]	; 0x40
 800142e:	4b17      	ldr	r3, [pc, #92]	; (800148c <HAL_TIM_Base_MspInit+0x80>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2100      	movs	r1, #0
 800143e:	201c      	movs	r0, #28
 8001440:	f000 fcf7 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001444:	201c      	movs	r0, #28
 8001446:	f000 fd10 	bl	8001e6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800144a:	e01a      	b.n	8001482 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a0f      	ldr	r2, [pc, #60]	; (8001490 <HAL_TIM_Base_MspInit+0x84>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d115      	bne.n	8001482 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <HAL_TIM_Base_MspInit+0x80>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	4a0b      	ldr	r2, [pc, #44]	; (800148c <HAL_TIM_Base_MspInit+0x80>)
 8001460:	f043 0302 	orr.w	r3, r3, #2
 8001464:	6413      	str	r3, [r2, #64]	; 0x40
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <HAL_TIM_Base_MspInit+0x80>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	201d      	movs	r0, #29
 8001478:	f000 fcdb 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800147c:	201d      	movs	r0, #29
 800147e:	f000 fcf4 	bl	8001e6a <HAL_NVIC_EnableIRQ>
}
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800
 8001490:	40000400 	.word	0x40000400

08001494 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	; 0x28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a19      	ldr	r2, [pc, #100]	; (8001518 <HAL_UART_MspInit+0x84>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d12b      	bne.n	800150e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b18      	ldr	r3, [pc, #96]	; (800151c <HAL_UART_MspInit+0x88>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a17      	ldr	r2, [pc, #92]	; (800151c <HAL_UART_MspInit+0x88>)
 80014c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <HAL_UART_MspInit+0x88>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <HAL_UART_MspInit+0x88>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a10      	ldr	r2, [pc, #64]	; (800151c <HAL_UART_MspInit+0x88>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <HAL_UART_MspInit+0x88>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014ee:	230c      	movs	r3, #12
 80014f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fa:	2303      	movs	r3, #3
 80014fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014fe:	2307      	movs	r3, #7
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4619      	mov	r1, r3
 8001508:	4805      	ldr	r0, [pc, #20]	; (8001520 <HAL_UART_MspInit+0x8c>)
 800150a:	f000 fcc9 	bl	8001ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800150e:	bf00      	nop
 8001510:	3728      	adds	r7, #40	; 0x28
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40004400 	.word	0x40004400
 800151c:	40023800 	.word	0x40023800
 8001520:	40020000 	.word	0x40020000

08001524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <NMI_Handler+0x4>

0800152a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <HardFault_Handler+0x4>

08001530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <MemManage_Handler+0x4>

08001536 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <BusFault_Handler+0x4>

0800153c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <UsageFault_Handler+0x4>

08001542 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001570:	f000 fb40 	bl	8001bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}

08001578 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <TIM2_IRQHandler+0x10>)
 800157e:	f001 ffa7 	bl	80034d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20012d4c 	.word	0x20012d4c

0800158c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001590:	4802      	ldr	r0, [pc, #8]	; (800159c <TIM3_IRQHandler+0x10>)
 8001592:	f001 ff9d 	bl	80034d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20012d04 	.word	0x20012d04

080015a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <SystemInit+0x20>)
 80015a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015aa:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <SystemInit+0x20>)
 80015ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <Timer_EnableInterrupts>:

/* Stop watch variables (seconds) */
static uint32_t time_elapsed = 0;
static uint16_t current_ms = 0;

void Timer_EnableInterrupts(void) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80015c8:	4803      	ldr	r0, [pc, #12]	; (80015d8 <Timer_EnableInterrupts+0x14>)
 80015ca:	f001 ff11 	bl	80033f0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 80015ce:	4803      	ldr	r0, [pc, #12]	; (80015dc <Timer_EnableInterrupts+0x18>)
 80015d0:	f001 ff0e 	bl	80033f0 <HAL_TIM_Base_Start_IT>
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20012d4c 	.word	0x20012d4c
 80015dc:	20012d04 	.word	0x20012d04

080015e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a21      	ldr	r2, [pc, #132]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d10a      	bne.n	8001606 <HAL_TIM_PeriodElapsedCallback+0x26>
		// Should be called every 1ms
		Button_Debounce();
 80015f0:	f7fe ffbc 	bl	800056c <Button_Debounce>
		Encoder_Debounce();
 80015f4:	f7ff f9f6 	bl	80009e4 <Encoder_Debounce>

		// Read ADC every 50 ms
		if (current_ms % 50 == 0) {

		}
		current_ms++;
 80015f8:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	3301      	adds	r3, #1
 80015fe:	b29a      	uxth	r2, r3
 8001600:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001602:	801a      	strh	r2, [r3, #0]

		// Add one more second to time elapsed
		time_elapsed++;
		current_ms = 0;
	}
}
 8001604:	e030      	b.n	8001668 <HAL_TIM_PeriodElapsedCallback+0x88>
	} else if (htim == &htim2) {
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a1b      	ldr	r2, [pc, #108]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d12c      	bne.n	8001668 <HAL_TIM_PeriodElapsedCallback+0x88>
		UI_Update_Laptime(time_elapsed);
 800160e:	4b1b      	ldr	r3, [pc, #108]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f000 f842 	bl	800169c <UI_Update_Laptime>
		UI_Update_BatteryPct(78);
 8001618:	204e      	movs	r0, #78	; 0x4e
 800161a:	f000 f8bf 	bl	800179c <UI_Update_BatteryPct>
		UI_Update_RPM(2173);
 800161e:	f640 007d 	movw	r0, #2173	; 0x87d
 8001622:	f000 f91d 	bl	8001860 <UI_Update_RPM>
		UI_Update_Speedometer(69);
 8001626:	2045      	movs	r0, #69	; 0x45
 8001628:	f000 fa14 	bl	8001a54 <UI_Update_Speedometer>
		if (time_elapsed % 10 == 0) {
 800162c:	4b13      	ldr	r3, [pc, #76]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800162e:	6819      	ldr	r1, [r3, #0]
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001632:	fba3 2301 	umull	r2, r3, r3, r1
 8001636:	08da      	lsrs	r2, r3, #3
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	1aca      	subs	r2, r1, r3
 8001642:	2a00      	cmp	r2, #0
 8001644:	d108      	bne.n	8001658 <HAL_TIM_PeriodElapsedCallback+0x78>
			UI_Update_WheelTemps(74,71,72,67);
 8001646:	2343      	movs	r3, #67	; 0x43
 8001648:	2248      	movs	r2, #72	; 0x48
 800164a:	2147      	movs	r1, #71	; 0x47
 800164c:	204a      	movs	r0, #74	; 0x4a
 800164e:	f000 f96b 	bl	8001928 <UI_Update_WheelTemps>
			UI_Update_CoolingTemp(23);
 8001652:	2017      	movs	r0, #23
 8001654:	f000 fa28 	bl	8001aa8 <UI_Update_CoolingTemp>
		time_elapsed++;
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3301      	adds	r3, #1
 800165e:	4a07      	ldr	r2, [pc, #28]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001660:	6013      	str	r3, [r2, #0]
		current_ms = 0;
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001664:	2200      	movs	r2, #0
 8001666:	801a      	strh	r2, [r3, #0]
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20012d04 	.word	0x20012d04
 8001674:	20012db0 	.word	0x20012db0
 8001678:	20012d4c 	.word	0x20012d4c
 800167c:	20012dac 	.word	0x20012dac
 8001680:	cccccccd 	.word	0xcccccccd

08001684 <UI_Init>:
	.h = 320,
	.data = drive_mode_background_img,
	.data_len = DRIVE_MODE_BACKGROUND_IMG_LEN
};

void UI_Init(void) {
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
	Gfx_SetBackground(COLOR_BLACK);
 8001688:	2000      	movs	r0, #0
 800168a:	f7ff f9fb 	bl	8000a84 <Gfx_SetBackground>
	Gfx_DrawImage(&background_img);
 800168e:	4802      	ldr	r0, [pc, #8]	; (8001698 <UI_Init+0x14>)
 8001690:	f7ff fb60 	bl	8000d54 <Gfx_DrawImage>
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20012c18 	.word	0x20012c18

0800169c <UI_Update_Laptime>:

void UI_Reset_Laptime(uint32_t time_elapsed) {
	lap_time_start = time_elapsed;
}

void UI_Update_Laptime(uint32_t time_elapsed) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af02      	add	r7, sp, #8
 80016a2:	6078      	str	r0, [r7, #4]
	uint8_t minutes = (time_elapsed - lap_time_start) / 60;
 80016a4:	4b3a      	ldr	r3, [pc, #232]	; (8001790 <UI_Update_Laptime+0xf4>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	4a39      	ldr	r2, [pc, #228]	; (8001794 <UI_Update_Laptime+0xf8>)
 80016ae:	fba2 2303 	umull	r2, r3, r2, r3
 80016b2:	095b      	lsrs	r3, r3, #5
 80016b4:	73fb      	strb	r3, [r7, #15]
	uint8_t seconds = (time_elapsed - lap_time_start) % 60;
 80016b6:	4b36      	ldr	r3, [pc, #216]	; (8001790 <UI_Update_Laptime+0xf4>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	1ad1      	subs	r1, r2, r3
 80016be:	4b35      	ldr	r3, [pc, #212]	; (8001794 <UI_Update_Laptime+0xf8>)
 80016c0:	fba3 2301 	umull	r2, r3, r3, r1
 80016c4:	095a      	lsrs	r2, r3, #5
 80016c6:	4613      	mov	r3, r2
 80016c8:	011b      	lsls	r3, r3, #4
 80016ca:	1a9b      	subs	r3, r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	1aca      	subs	r2, r1, r3
 80016d0:	4613      	mov	r3, r2
 80016d2:	73bb      	strb	r3, [r7, #14]

	Gfx_DrawDigit(325, 260, minutes / 10, 40, COLOR_PINK);
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	4a30      	ldr	r2, [pc, #192]	; (8001798 <UI_Update_Laptime+0xfc>)
 80016d8:	fba2 2303 	umull	r2, r3, r2, r3
 80016dc:	08db      	lsrs	r3, r3, #3
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	232d      	movs	r3, #45	; 0x2d
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	2328      	movs	r3, #40	; 0x28
 80016e6:	f44f 7182 	mov.w	r1, #260	; 0x104
 80016ea:	f240 1045 	movw	r0, #325	; 0x145
 80016ee:	f7ff fa0f 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawDigit(355, 260, minutes % 10, 40, COLOR_PINK);
 80016f2:	7bfa      	ldrb	r2, [r7, #15]
 80016f4:	4b28      	ldr	r3, [pc, #160]	; (8001798 <UI_Update_Laptime+0xfc>)
 80016f6:	fba3 1302 	umull	r1, r3, r3, r2
 80016fa:	08d9      	lsrs	r1, r3, #3
 80016fc:	460b      	mov	r3, r1
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	b2da      	uxtb	r2, r3
 8001708:	232d      	movs	r3, #45	; 0x2d
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	2328      	movs	r3, #40	; 0x28
 800170e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001712:	f240 1063 	movw	r0, #355	; 0x163
 8001716:	f7ff f9fb 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawDigit(405, 260, seconds / 10, 40, COLOR_PINK);
 800171a:	7bbb      	ldrb	r3, [r7, #14]
 800171c:	4a1e      	ldr	r2, [pc, #120]	; (8001798 <UI_Update_Laptime+0xfc>)
 800171e:	fba2 2303 	umull	r2, r3, r2, r3
 8001722:	08db      	lsrs	r3, r3, #3
 8001724:	b2da      	uxtb	r2, r3
 8001726:	232d      	movs	r3, #45	; 0x2d
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	2328      	movs	r3, #40	; 0x28
 800172c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001730:	f240 1095 	movw	r0, #405	; 0x195
 8001734:	f7ff f9ec 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawDigit(435, 260, seconds % 10, 40, COLOR_PINK);
 8001738:	7bba      	ldrb	r2, [r7, #14]
 800173a:	4b17      	ldr	r3, [pc, #92]	; (8001798 <UI_Update_Laptime+0xfc>)
 800173c:	fba3 1302 	umull	r1, r3, r3, r2
 8001740:	08d9      	lsrs	r1, r3, #3
 8001742:	460b      	mov	r3, r1
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	440b      	add	r3, r1
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	b2da      	uxtb	r2, r3
 800174e:	232d      	movs	r3, #45	; 0x2d
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2328      	movs	r3, #40	; 0x28
 8001754:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001758:	f240 10b3 	movw	r0, #435	; 0x1b3
 800175c:	f7ff f9d8 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawRect(390, 270, 5, 5, COLOR_PINK);
 8001760:	232d      	movs	r3, #45	; 0x2d
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	2305      	movs	r3, #5
 8001766:	2205      	movs	r2, #5
 8001768:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800176c:	f44f 70c3 	mov.w	r0, #390	; 0x186
 8001770:	f7ff f9a0 	bl	8000ab4 <Gfx_DrawRect>
	Gfx_DrawRect(390, 290, 5, 5, COLOR_PINK);
 8001774:	232d      	movs	r3, #45	; 0x2d
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	2305      	movs	r3, #5
 800177a:	2205      	movs	r2, #5
 800177c:	f44f 7191 	mov.w	r1, #290	; 0x122
 8001780:	f44f 70c3 	mov.w	r0, #390	; 0x186
 8001784:	f7ff f996 	bl	8000ab4 <Gfx_DrawRect>
}
 8001788:	bf00      	nop
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20012db4 	.word	0x20012db4
 8001794:	88888889 	.word	0x88888889
 8001798:	cccccccd 	.word	0xcccccccd

0800179c <UI_Update_BatteryPct>:

void UI_Update_BatteryPct(uint8_t battery_pct) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af02      	add	r7, sp, #8
 80017a2:	4603      	mov	r3, r0
 80017a4:	71fb      	strb	r3, [r7, #7]
	uint8_t color;
	if (battery_pct > BATTERY_THRESHOLD_PCT_YELLOW) {
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	2b3c      	cmp	r3, #60	; 0x3c
 80017aa:	d902      	bls.n	80017b2 <UI_Update_BatteryPct+0x16>
		color = COLOR_GREEN;
 80017ac:	2312      	movs	r3, #18
 80017ae:	73fb      	strb	r3, [r7, #15]
 80017b0:	e007      	b.n	80017c2 <UI_Update_BatteryPct+0x26>
	} else if (battery_pct > BATTERY_THRESHOLD_PCT_RED) {
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	2b1e      	cmp	r3, #30
 80017b6:	d902      	bls.n	80017be <UI_Update_BatteryPct+0x22>
		color = COLOR_YELLOW;
 80017b8:	2336      	movs	r3, #54	; 0x36
 80017ba:	73fb      	strb	r3, [r7, #15]
 80017bc:	e001      	b.n	80017c2 <UI_Update_BatteryPct+0x26>
	} else {
		color = COLOR_RED;
 80017be:	2324      	movs	r3, #36	; 0x24
 80017c0:	73fb      	strb	r3, [r7, #15]
	}

	uint8_t width = battery_pct * BATTERY_ICON_WIDTH / 100;
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	224c      	movs	r2, #76	; 0x4c
 80017c6:	fb02 f303 	mul.w	r3, r2, r3
 80017ca:	4a23      	ldr	r2, [pc, #140]	; (8001858 <UI_Update_BatteryPct+0xbc>)
 80017cc:	fb82 1203 	smull	r1, r2, r2, r3
 80017d0:	1152      	asrs	r2, r2, #5
 80017d2:	17db      	asrs	r3, r3, #31
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	73bb      	strb	r3, [r7, #14]
	Gfx_DrawRect(295, 15, width, BATTERY_ICON_HEIGHT, color);
 80017d8:	7bbb      	ldrb	r3, [r7, #14]
 80017da:	b29a      	uxth	r2, r3
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	2323      	movs	r3, #35	; 0x23
 80017e2:	210f      	movs	r1, #15
 80017e4:	f240 1027 	movw	r0, #295	; 0x127
 80017e8:	f7ff f964 	bl	8000ab4 <Gfx_DrawRect>
	Gfx_DrawRect(295+width, 15, BATTERY_ICON_WIDTH - width, BATTERY_ICON_HEIGHT, COLOR_BLACK);
 80017ec:	7bbb      	ldrb	r3, [r7, #14]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	f203 1327 	addw	r3, r3, #295	; 0x127
 80017f4:	b298      	uxth	r0, r3
 80017f6:	7bbb      	ldrb	r3, [r7, #14]
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	f1c3 034c 	rsb	r3, r3, #76	; 0x4c
 80017fe:	b29a      	uxth	r2, r3
 8001800:	2300      	movs	r3, #0
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	2323      	movs	r3, #35	; 0x23
 8001806:	210f      	movs	r1, #15
 8001808:	f7ff f954 	bl	8000ab4 <Gfx_DrawRect>

	/* Battery */
	Gfx_DrawDigit(390, 20, battery_pct / 10, 25, COLOR_GREEN);
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	4a13      	ldr	r2, [pc, #76]	; (800185c <UI_Update_BatteryPct+0xc0>)
 8001810:	fba2 2303 	umull	r2, r3, r2, r3
 8001814:	08db      	lsrs	r3, r3, #3
 8001816:	b2da      	uxtb	r2, r3
 8001818:	2312      	movs	r3, #18
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	2319      	movs	r3, #25
 800181e:	2114      	movs	r1, #20
 8001820:	f44f 70c3 	mov.w	r0, #390	; 0x186
 8001824:	f7ff f974 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawDigit(410, 20, battery_pct % 10, 25, COLOR_GREEN);
 8001828:	79fa      	ldrb	r2, [r7, #7]
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <UI_Update_BatteryPct+0xc0>)
 800182c:	fba3 1302 	umull	r1, r3, r3, r2
 8001830:	08d9      	lsrs	r1, r3, #3
 8001832:	460b      	mov	r3, r1
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	440b      	add	r3, r1
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	b2da      	uxtb	r2, r3
 800183e:	2312      	movs	r3, #18
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	2319      	movs	r3, #25
 8001844:	2114      	movs	r1, #20
 8001846:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 800184a:	f7ff f961 	bl	8000b10 <Gfx_DrawDigit>
}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	51eb851f 	.word	0x51eb851f
 800185c:	cccccccd 	.word	0xcccccccd

08001860 <UI_Update_RPM>:

void UI_Update_RPM(uint16_t rpm) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af02      	add	r7, sp, #8
 8001866:	4603      	mov	r3, r0
 8001868:	80fb      	strh	r3, [r7, #6]
	Gfx_DrawDigit(195, 260, rpm / 1000, 40, COLOR_GREEN);
 800186a:	88fb      	ldrh	r3, [r7, #6]
 800186c:	4a2b      	ldr	r2, [pc, #172]	; (800191c <UI_Update_RPM+0xbc>)
 800186e:	fba2 2303 	umull	r2, r3, r2, r3
 8001872:	099b      	lsrs	r3, r3, #6
 8001874:	b29b      	uxth	r3, r3
 8001876:	b2da      	uxtb	r2, r3
 8001878:	2312      	movs	r3, #18
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	2328      	movs	r3, #40	; 0x28
 800187e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001882:	20c3      	movs	r0, #195	; 0xc3
 8001884:	f7ff f944 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawDigit(220, 260, (rpm / 100) % 10, 40, COLOR_GREEN);
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	4a25      	ldr	r2, [pc, #148]	; (8001920 <UI_Update_RPM+0xc0>)
 800188c:	fba2 2303 	umull	r2, r3, r2, r3
 8001890:	095b      	lsrs	r3, r3, #5
 8001892:	b29a      	uxth	r2, r3
 8001894:	4b23      	ldr	r3, [pc, #140]	; (8001924 <UI_Update_RPM+0xc4>)
 8001896:	fba3 1302 	umull	r1, r3, r3, r2
 800189a:	08d9      	lsrs	r1, r3, #3
 800189c:	460b      	mov	r3, r1
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	2312      	movs	r3, #18
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2328      	movs	r3, #40	; 0x28
 80018b0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80018b4:	20dc      	movs	r0, #220	; 0xdc
 80018b6:	f7ff f92b 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawDigit(245, 260, (rpm % 100) / 10, 40, COLOR_GREEN);
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	4a18      	ldr	r2, [pc, #96]	; (8001920 <UI_Update_RPM+0xc0>)
 80018be:	fba2 1203 	umull	r1, r2, r2, r3
 80018c2:	0952      	lsrs	r2, r2, #5
 80018c4:	2164      	movs	r1, #100	; 0x64
 80018c6:	fb01 f202 	mul.w	r2, r1, r2
 80018ca:	1a9b      	subs	r3, r3, r2
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	4a15      	ldr	r2, [pc, #84]	; (8001924 <UI_Update_RPM+0xc4>)
 80018d0:	fba2 2303 	umull	r2, r3, r2, r3
 80018d4:	08db      	lsrs	r3, r3, #3
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	2312      	movs	r3, #18
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	2328      	movs	r3, #40	; 0x28
 80018e0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80018e4:	20f5      	movs	r0, #245	; 0xf5
 80018e6:	f7ff f913 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawDigit(270, 260, rpm % 10, 40, COLOR_GREEN);
 80018ea:	88fa      	ldrh	r2, [r7, #6]
 80018ec:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <UI_Update_RPM+0xc4>)
 80018ee:	fba3 1302 	umull	r1, r3, r3, r2
 80018f2:	08d9      	lsrs	r1, r3, #3
 80018f4:	460b      	mov	r3, r1
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	b29b      	uxth	r3, r3
 8001900:	b2da      	uxtb	r2, r3
 8001902:	2312      	movs	r3, #18
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	2328      	movs	r3, #40	; 0x28
 8001908:	f44f 7182 	mov.w	r1, #260	; 0x104
 800190c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8001910:	f7ff f8fe 	bl	8000b10 <Gfx_DrawDigit>
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	10624dd3 	.word	0x10624dd3
 8001920:	51eb851f 	.word	0x51eb851f
 8001924:	cccccccd 	.word	0xcccccccd

08001928 <UI_Update_WheelTemps>:

void UI_Update_WheelTemps(uint8_t front_left, uint8_t front_right,
		  	  	  	  	  uint8_t back_left, uint8_t back_right) {
 8001928:	b590      	push	{r4, r7, lr}
 800192a:	b085      	sub	sp, #20
 800192c:	af02      	add	r7, sp, #8
 800192e:	4604      	mov	r4, r0
 8001930:	4608      	mov	r0, r1
 8001932:	4611      	mov	r1, r2
 8001934:	461a      	mov	r2, r3
 8001936:	4623      	mov	r3, r4
 8001938:	71fb      	strb	r3, [r7, #7]
 800193a:	4603      	mov	r3, r0
 800193c:	71bb      	strb	r3, [r7, #6]
 800193e:	460b      	mov	r3, r1
 8001940:	717b      	strb	r3, [r7, #5]
 8001942:	4613      	mov	r3, r2
 8001944:	713b      	strb	r3, [r7, #4]
	Gfx_DrawDigit( 10, 230, front_left / 10, 25, COLOR_CYAN);
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	4a41      	ldr	r2, [pc, #260]	; (8001a50 <UI_Update_WheelTemps+0x128>)
 800194a:	fba2 2303 	umull	r2, r3, r2, r3
 800194e:	08db      	lsrs	r3, r3, #3
 8001950:	b2da      	uxtb	r2, r3
 8001952:	231a      	movs	r3, #26
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	2319      	movs	r3, #25
 8001958:	21e6      	movs	r1, #230	; 0xe6
 800195a:	200a      	movs	r0, #10
 800195c:	f7ff f8d8 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawDigit( 30, 230, front_left % 10, 25, COLOR_CYAN);
 8001960:	79fa      	ldrb	r2, [r7, #7]
 8001962:	4b3b      	ldr	r3, [pc, #236]	; (8001a50 <UI_Update_WheelTemps+0x128>)
 8001964:	fba3 1302 	umull	r1, r3, r3, r2
 8001968:	08d9      	lsrs	r1, r3, #3
 800196a:	460b      	mov	r3, r1
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	b2da      	uxtb	r2, r3
 8001976:	231a      	movs	r3, #26
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	2319      	movs	r3, #25
 800197c:	21e6      	movs	r1, #230	; 0xe6
 800197e:	201e      	movs	r0, #30
 8001980:	f7ff f8c6 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawDigit( 90, 230, front_right / 10, 25, COLOR_CYAN);
 8001984:	79bb      	ldrb	r3, [r7, #6]
 8001986:	4a32      	ldr	r2, [pc, #200]	; (8001a50 <UI_Update_WheelTemps+0x128>)
 8001988:	fba2 2303 	umull	r2, r3, r2, r3
 800198c:	08db      	lsrs	r3, r3, #3
 800198e:	b2da      	uxtb	r2, r3
 8001990:	231a      	movs	r3, #26
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2319      	movs	r3, #25
 8001996:	21e6      	movs	r1, #230	; 0xe6
 8001998:	205a      	movs	r0, #90	; 0x5a
 800199a:	f7ff f8b9 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawDigit(110, 230, front_right % 10, 25, COLOR_CYAN);
 800199e:	79ba      	ldrb	r2, [r7, #6]
 80019a0:	4b2b      	ldr	r3, [pc, #172]	; (8001a50 <UI_Update_WheelTemps+0x128>)
 80019a2:	fba3 1302 	umull	r1, r3, r3, r2
 80019a6:	08d9      	lsrs	r1, r3, #3
 80019a8:	460b      	mov	r3, r1
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	231a      	movs	r3, #26
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	2319      	movs	r3, #25
 80019ba:	21e6      	movs	r1, #230	; 0xe6
 80019bc:	206e      	movs	r0, #110	; 0x6e
 80019be:	f7ff f8a7 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawDigit( 10, 280, back_left / 10, 25, COLOR_CYAN);
 80019c2:	797b      	ldrb	r3, [r7, #5]
 80019c4:	4a22      	ldr	r2, [pc, #136]	; (8001a50 <UI_Update_WheelTemps+0x128>)
 80019c6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ca:	08db      	lsrs	r3, r3, #3
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	231a      	movs	r3, #26
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	2319      	movs	r3, #25
 80019d4:	f44f 718c 	mov.w	r1, #280	; 0x118
 80019d8:	200a      	movs	r0, #10
 80019da:	f7ff f899 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawDigit( 30, 280, back_left % 10, 25, COLOR_CYAN);
 80019de:	797a      	ldrb	r2, [r7, #5]
 80019e0:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <UI_Update_WheelTemps+0x128>)
 80019e2:	fba3 1302 	umull	r1, r3, r3, r2
 80019e6:	08d9      	lsrs	r1, r3, #3
 80019e8:	460b      	mov	r3, r1
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	440b      	add	r3, r1
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	231a      	movs	r3, #26
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	2319      	movs	r3, #25
 80019fa:	f44f 718c 	mov.w	r1, #280	; 0x118
 80019fe:	201e      	movs	r0, #30
 8001a00:	f7ff f886 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawDigit( 90, 280, back_right / 10, 25, COLOR_CYAN);
 8001a04:	793b      	ldrb	r3, [r7, #4]
 8001a06:	4a12      	ldr	r2, [pc, #72]	; (8001a50 <UI_Update_WheelTemps+0x128>)
 8001a08:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0c:	08db      	lsrs	r3, r3, #3
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	231a      	movs	r3, #26
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	2319      	movs	r3, #25
 8001a16:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001a1a:	205a      	movs	r0, #90	; 0x5a
 8001a1c:	f7ff f878 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawDigit(110, 280, back_right % 10, 25, COLOR_CYAN);
 8001a20:	793a      	ldrb	r2, [r7, #4]
 8001a22:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <UI_Update_WheelTemps+0x128>)
 8001a24:	fba3 1302 	umull	r1, r3, r3, r2
 8001a28:	08d9      	lsrs	r1, r3, #3
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	231a      	movs	r3, #26
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	2319      	movs	r3, #25
 8001a3c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001a40:	206e      	movs	r0, #110	; 0x6e
 8001a42:	f7ff f865 	bl	8000b10 <Gfx_DrawDigit>
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd90      	pop	{r4, r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	cccccccd 	.word	0xcccccccd

08001a54 <UI_Update_Speedometer>:

void UI_Update_Speedometer(uint8_t speed) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af02      	add	r7, sp, #8
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
	Gfx_DrawDigit(150, 70, speed / 10, 120, COLOR_YELLOW);
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	4a10      	ldr	r2, [pc, #64]	; (8001aa4 <UI_Update_Speedometer+0x50>)
 8001a62:	fba2 2303 	umull	r2, r3, r2, r3
 8001a66:	08db      	lsrs	r3, r3, #3
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	2336      	movs	r3, #54	; 0x36
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2378      	movs	r3, #120	; 0x78
 8001a70:	2146      	movs	r1, #70	; 0x46
 8001a72:	2096      	movs	r0, #150	; 0x96
 8001a74:	f7ff f84c 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawDigit(240, 70, speed % 10, 120, COLOR_YELLOW);
 8001a78:	79fa      	ldrb	r2, [r7, #7]
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <UI_Update_Speedometer+0x50>)
 8001a7c:	fba3 1302 	umull	r1, r3, r3, r2
 8001a80:	08d9      	lsrs	r1, r3, #3
 8001a82:	460b      	mov	r3, r1
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	440b      	add	r3, r1
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	2336      	movs	r3, #54	; 0x36
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	2378      	movs	r3, #120	; 0x78
 8001a94:	2146      	movs	r1, #70	; 0x46
 8001a96:	20f0      	movs	r0, #240	; 0xf0
 8001a98:	f7ff f83a 	bl	8000b10 <Gfx_DrawDigit>
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	cccccccd 	.word	0xcccccccd

08001aa8 <UI_Update_CoolingTemp>:

void UI_Update_CoolingTemp(uint8_t temp) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af02      	add	r7, sp, #8
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
	Gfx_DrawDigit(60, 20, temp / 10, 25, COLOR_CYAN);
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	4a10      	ldr	r2, [pc, #64]	; (8001af8 <UI_Update_CoolingTemp+0x50>)
 8001ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aba:	08db      	lsrs	r3, r3, #3
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	231a      	movs	r3, #26
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	2319      	movs	r3, #25
 8001ac4:	2114      	movs	r1, #20
 8001ac6:	203c      	movs	r0, #60	; 0x3c
 8001ac8:	f7ff f822 	bl	8000b10 <Gfx_DrawDigit>
	Gfx_DrawDigit(80, 20, temp % 10, 25, COLOR_CYAN);
 8001acc:	79fa      	ldrb	r2, [r7, #7]
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <UI_Update_CoolingTemp+0x50>)
 8001ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8001ad4:	08d9      	lsrs	r1, r3, #3
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	440b      	add	r3, r1
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	231a      	movs	r3, #26
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2319      	movs	r3, #25
 8001ae8:	2114      	movs	r1, #20
 8001aea:	2050      	movs	r0, #80	; 0x50
 8001aec:	f7ff f810 	bl	8000b10 <Gfx_DrawDigit>
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	cccccccd 	.word	0xcccccccd

08001afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001afc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b00:	480d      	ldr	r0, [pc, #52]	; (8001b38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b02:	490e      	ldr	r1, [pc, #56]	; (8001b3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b04:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b08:	e002      	b.n	8001b10 <LoopCopyDataInit>

08001b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b0e:	3304      	adds	r3, #4

08001b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b14:	d3f9      	bcc.n	8001b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b16:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b18:	4c0b      	ldr	r4, [pc, #44]	; (8001b48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b1c:	e001      	b.n	8001b22 <LoopFillZerobss>

08001b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b20:	3204      	adds	r2, #4

08001b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b24:	d3fb      	bcc.n	8001b1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b26:	f7ff fd3b 	bl	80015a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b2a:	f002 fb55 	bl	80041d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b2e:	f7ff fb8b 	bl	8001248 <main>
  bx  lr    
 8001b32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b3c:	20012c30 	.word	0x20012c30
  ldr r2, =_sidata
 8001b40:	0800427c 	.word	0x0800427c
  ldr r2, =_sbss
 8001b44:	20012c30 	.word	0x20012c30
  ldr r4, =_ebss
 8001b48:	20012dbc 	.word	0x20012dbc

08001b4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b4c:	e7fe      	b.n	8001b4c <ADC_IRQHandler>
	...

08001b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b54:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <HAL_Init+0x40>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0d      	ldr	r2, [pc, #52]	; (8001b90 <HAL_Init+0x40>)
 8001b5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_Init+0x40>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <HAL_Init+0x40>)
 8001b66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <HAL_Init+0x40>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a07      	ldr	r2, [pc, #28]	; (8001b90 <HAL_Init+0x40>)
 8001b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b78:	2003      	movs	r0, #3
 8001b7a:	f000 f94f 	bl	8001e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f000 f808 	bl	8001b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b84:	f7ff fba2 	bl	80012cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40023c00 	.word	0x40023c00

08001b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b9c:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <HAL_InitTick+0x54>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_InitTick+0x58>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 f967 	bl	8001e86 <HAL_SYSTICK_Config>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00e      	b.n	8001be0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b0f      	cmp	r3, #15
 8001bc6:	d80a      	bhi.n	8001bde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	f000 f92f 	bl	8001e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bd4:	4a06      	ldr	r2, [pc, #24]	; (8001bf0 <HAL_InitTick+0x5c>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e000      	b.n	8001be0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20012c14 	.word	0x20012c14
 8001bec:	20012c2c 	.word	0x20012c2c
 8001bf0:	20012c28 	.word	0x20012c28

08001bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <HAL_IncTick+0x20>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_IncTick+0x24>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4413      	add	r3, r2
 8001c04:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <HAL_IncTick+0x24>)
 8001c06:	6013      	str	r3, [r2, #0]
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20012c2c 	.word	0x20012c2c
 8001c18:	20012db8 	.word	0x20012db8

08001c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c20:	4b03      	ldr	r3, [pc, #12]	; (8001c30 <HAL_GetTick+0x14>)
 8001c22:	681b      	ldr	r3, [r3, #0]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20012db8 	.word	0x20012db8

08001c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c3c:	f7ff ffee 	bl	8001c1c <HAL_GetTick>
 8001c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4c:	d005      	beq.n	8001c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <HAL_Delay+0x44>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	461a      	mov	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4413      	add	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c5a:	bf00      	nop
 8001c5c:	f7ff ffde 	bl	8001c1c <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d8f7      	bhi.n	8001c5c <HAL_Delay+0x28>
  {
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20012c2c 	.word	0x20012c2c

08001c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cae:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	60d3      	str	r3, [r2, #12]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc8:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <__NVIC_GetPriorityGrouping+0x18>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	0a1b      	lsrs	r3, r3, #8
 8001cce:	f003 0307 	and.w	r3, r3, #7
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	db0b      	blt.n	8001d0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	f003 021f 	and.w	r2, r3, #31
 8001cf8:	4907      	ldr	r1, [pc, #28]	; (8001d18 <__NVIC_EnableIRQ+0x38>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	095b      	lsrs	r3, r3, #5
 8001d00:	2001      	movs	r0, #1
 8001d02:	fa00 f202 	lsl.w	r2, r0, r2
 8001d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000e100 	.word	0xe000e100

08001d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	6039      	str	r1, [r7, #0]
 8001d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	db0a      	blt.n	8001d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	490c      	ldr	r1, [pc, #48]	; (8001d68 <__NVIC_SetPriority+0x4c>)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	0112      	lsls	r2, r2, #4
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	440b      	add	r3, r1
 8001d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d44:	e00a      	b.n	8001d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4908      	ldr	r1, [pc, #32]	; (8001d6c <__NVIC_SetPriority+0x50>)
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	3b04      	subs	r3, #4
 8001d54:	0112      	lsls	r2, r2, #4
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	440b      	add	r3, r1
 8001d5a:	761a      	strb	r2, [r3, #24]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000e100 	.word	0xe000e100
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b089      	sub	sp, #36	; 0x24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f1c3 0307 	rsb	r3, r3, #7
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	bf28      	it	cs
 8001d8e:	2304      	movcs	r3, #4
 8001d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3304      	adds	r3, #4
 8001d96:	2b06      	cmp	r3, #6
 8001d98:	d902      	bls.n	8001da0 <NVIC_EncodePriority+0x30>
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3b03      	subs	r3, #3
 8001d9e:	e000      	b.n	8001da2 <NVIC_EncodePriority+0x32>
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	f04f 32ff 	mov.w	r2, #4294967295
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43da      	mvns	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	401a      	ands	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc2:	43d9      	mvns	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	4313      	orrs	r3, r2
         );
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3724      	adds	r7, #36	; 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de8:	d301      	bcc.n	8001dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00f      	b.n	8001e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dee:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <SysTick_Config+0x40>)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df6:	210f      	movs	r1, #15
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	f7ff ff8e 	bl	8001d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e00:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <SysTick_Config+0x40>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e06:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <SysTick_Config+0x40>)
 8001e08:	2207      	movs	r2, #7
 8001e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	e000e010 	.word	0xe000e010

08001e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ff29 	bl	8001c7c <__NVIC_SetPriorityGrouping>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
 8001e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e44:	f7ff ff3e 	bl	8001cc4 <__NVIC_GetPriorityGrouping>
 8001e48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	6978      	ldr	r0, [r7, #20]
 8001e50:	f7ff ff8e 	bl	8001d70 <NVIC_EncodePriority>
 8001e54:	4602      	mov	r2, r0
 8001e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff5d 	bl	8001d1c <__NVIC_SetPriority>
}
 8001e62:	bf00      	nop
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	4603      	mov	r3, r0
 8001e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff31 	bl	8001ce0 <__NVIC_EnableIRQ>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ffa2 	bl	8001dd8 <SysTick_Config>
 8001e94:	4603      	mov	r3, r0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	; 0x24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
 8001eba:	e165      	b.n	8002188 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	f040 8154 	bne.w	8002182 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d005      	beq.n	8001ef2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d130      	bne.n	8001f54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	2203      	movs	r2, #3
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f28:	2201      	movs	r2, #1
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	f003 0201 	and.w	r2, r3, #1
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d017      	beq.n	8001f90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d123      	bne.n	8001fe4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	08da      	lsrs	r2, r3, #3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3208      	adds	r2, #8
 8001fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	220f      	movs	r2, #15
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	08da      	lsrs	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3208      	adds	r2, #8
 8001fde:	69b9      	ldr	r1, [r7, #24]
 8001fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	2203      	movs	r2, #3
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0203 	and.w	r2, r3, #3
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80ae 	beq.w	8002182 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	4b5d      	ldr	r3, [pc, #372]	; (80021a0 <HAL_GPIO_Init+0x300>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	4a5c      	ldr	r2, [pc, #368]	; (80021a0 <HAL_GPIO_Init+0x300>)
 8002030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002034:	6453      	str	r3, [r2, #68]	; 0x44
 8002036:	4b5a      	ldr	r3, [pc, #360]	; (80021a0 <HAL_GPIO_Init+0x300>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002042:	4a58      	ldr	r2, [pc, #352]	; (80021a4 <HAL_GPIO_Init+0x304>)
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	089b      	lsrs	r3, r3, #2
 8002048:	3302      	adds	r3, #2
 800204a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	220f      	movs	r2, #15
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a4f      	ldr	r2, [pc, #316]	; (80021a8 <HAL_GPIO_Init+0x308>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d025      	beq.n	80020ba <HAL_GPIO_Init+0x21a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a4e      	ldr	r2, [pc, #312]	; (80021ac <HAL_GPIO_Init+0x30c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d01f      	beq.n	80020b6 <HAL_GPIO_Init+0x216>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a4d      	ldr	r2, [pc, #308]	; (80021b0 <HAL_GPIO_Init+0x310>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d019      	beq.n	80020b2 <HAL_GPIO_Init+0x212>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a4c      	ldr	r2, [pc, #304]	; (80021b4 <HAL_GPIO_Init+0x314>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d013      	beq.n	80020ae <HAL_GPIO_Init+0x20e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a4b      	ldr	r2, [pc, #300]	; (80021b8 <HAL_GPIO_Init+0x318>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d00d      	beq.n	80020aa <HAL_GPIO_Init+0x20a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4a      	ldr	r2, [pc, #296]	; (80021bc <HAL_GPIO_Init+0x31c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d007      	beq.n	80020a6 <HAL_GPIO_Init+0x206>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a49      	ldr	r2, [pc, #292]	; (80021c0 <HAL_GPIO_Init+0x320>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d101      	bne.n	80020a2 <HAL_GPIO_Init+0x202>
 800209e:	2306      	movs	r3, #6
 80020a0:	e00c      	b.n	80020bc <HAL_GPIO_Init+0x21c>
 80020a2:	2307      	movs	r3, #7
 80020a4:	e00a      	b.n	80020bc <HAL_GPIO_Init+0x21c>
 80020a6:	2305      	movs	r3, #5
 80020a8:	e008      	b.n	80020bc <HAL_GPIO_Init+0x21c>
 80020aa:	2304      	movs	r3, #4
 80020ac:	e006      	b.n	80020bc <HAL_GPIO_Init+0x21c>
 80020ae:	2303      	movs	r3, #3
 80020b0:	e004      	b.n	80020bc <HAL_GPIO_Init+0x21c>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e002      	b.n	80020bc <HAL_GPIO_Init+0x21c>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <HAL_GPIO_Init+0x21c>
 80020ba:	2300      	movs	r3, #0
 80020bc:	69fa      	ldr	r2, [r7, #28]
 80020be:	f002 0203 	and.w	r2, r2, #3
 80020c2:	0092      	lsls	r2, r2, #2
 80020c4:	4093      	lsls	r3, r2
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020cc:	4935      	ldr	r1, [pc, #212]	; (80021a4 <HAL_GPIO_Init+0x304>)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	089b      	lsrs	r3, r3, #2
 80020d2:	3302      	adds	r3, #2
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020da:	4b3a      	ldr	r3, [pc, #232]	; (80021c4 <HAL_GPIO_Init+0x324>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4013      	ands	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020fe:	4a31      	ldr	r2, [pc, #196]	; (80021c4 <HAL_GPIO_Init+0x324>)
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002104:	4b2f      	ldr	r3, [pc, #188]	; (80021c4 <HAL_GPIO_Init+0x324>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002128:	4a26      	ldr	r2, [pc, #152]	; (80021c4 <HAL_GPIO_Init+0x324>)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800212e:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <HAL_GPIO_Init+0x324>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002152:	4a1c      	ldr	r2, [pc, #112]	; (80021c4 <HAL_GPIO_Init+0x324>)
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002158:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <HAL_GPIO_Init+0x324>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800217c:	4a11      	ldr	r2, [pc, #68]	; (80021c4 <HAL_GPIO_Init+0x324>)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3301      	adds	r3, #1
 8002186:	61fb      	str	r3, [r7, #28]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	2b0f      	cmp	r3, #15
 800218c:	f67f ae96 	bls.w	8001ebc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002190:	bf00      	nop
 8002192:	bf00      	nop
 8002194:	3724      	adds	r7, #36	; 0x24
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40013800 	.word	0x40013800
 80021a8:	40020000 	.word	0x40020000
 80021ac:	40020400 	.word	0x40020400
 80021b0:	40020800 	.word	0x40020800
 80021b4:	40020c00 	.word	0x40020c00
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40021400 	.word	0x40021400
 80021c0:	40021800 	.word	0x40021800
 80021c4:	40013c00 	.word	0x40013c00

080021c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	887b      	ldrh	r3, [r7, #2]
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d002      	beq.n	80021e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021e0:	2301      	movs	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
 80021e4:	e001      	b.n	80021ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021e6:	2300      	movs	r3, #0
 80021e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	807b      	strh	r3, [r7, #2]
 8002204:	4613      	mov	r3, r2
 8002206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002208:	787b      	ldrb	r3, [r7, #1]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800220e:	887a      	ldrh	r2, [r7, #2]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002214:	e003      	b.n	800221e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002216:	887b      	ldrh	r3, [r7, #2]
 8002218:	041a      	lsls	r2, r3, #16
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	619a      	str	r2, [r3, #24]
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800222a:	b480      	push	{r7}
 800222c:	b085      	sub	sp, #20
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	460b      	mov	r3, r1
 8002234:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800223c:	887a      	ldrh	r2, [r7, #2]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	4013      	ands	r3, r2
 8002242:	041a      	lsls	r2, r3, #16
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	43d9      	mvns	r1, r3
 8002248:	887b      	ldrh	r3, [r7, #2]
 800224a:	400b      	ands	r3, r1
 800224c:	431a      	orrs	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	619a      	str	r2, [r3, #24]
}
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e0cc      	b.n	800240e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002274:	4b68      	ldr	r3, [pc, #416]	; (8002418 <HAL_RCC_ClockConfig+0x1b8>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 030f 	and.w	r3, r3, #15
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d90c      	bls.n	800229c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002282:	4b65      	ldr	r3, [pc, #404]	; (8002418 <HAL_RCC_ClockConfig+0x1b8>)
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800228a:	4b63      	ldr	r3, [pc, #396]	; (8002418 <HAL_RCC_ClockConfig+0x1b8>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 030f 	and.w	r3, r3, #15
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d001      	beq.n	800229c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0b8      	b.n	800240e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d020      	beq.n	80022ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022b4:	4b59      	ldr	r3, [pc, #356]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4a58      	ldr	r2, [pc, #352]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80022ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022cc:	4b53      	ldr	r3, [pc, #332]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	4a52      	ldr	r2, [pc, #328]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80022d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d8:	4b50      	ldr	r3, [pc, #320]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	494d      	ldr	r1, [pc, #308]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d044      	beq.n	8002380 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d107      	bne.n	800230e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fe:	4b47      	ldr	r3, [pc, #284]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d119      	bne.n	800233e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e07f      	b.n	800240e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d003      	beq.n	800231e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800231a:	2b03      	cmp	r3, #3
 800231c:	d107      	bne.n	800232e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800231e:	4b3f      	ldr	r3, [pc, #252]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d109      	bne.n	800233e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e06f      	b.n	800240e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232e:	4b3b      	ldr	r3, [pc, #236]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e067      	b.n	800240e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800233e:	4b37      	ldr	r3, [pc, #220]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f023 0203 	bic.w	r2, r3, #3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	4934      	ldr	r1, [pc, #208]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 800234c:	4313      	orrs	r3, r2
 800234e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002350:	f7ff fc64 	bl	8001c1c <HAL_GetTick>
 8002354:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002356:	e00a      	b.n	800236e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002358:	f7ff fc60 	bl	8001c1c <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	f241 3288 	movw	r2, #5000	; 0x1388
 8002366:	4293      	cmp	r3, r2
 8002368:	d901      	bls.n	800236e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e04f      	b.n	800240e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236e:	4b2b      	ldr	r3, [pc, #172]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 020c 	and.w	r2, r3, #12
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	429a      	cmp	r2, r3
 800237e:	d1eb      	bne.n	8002358 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002380:	4b25      	ldr	r3, [pc, #148]	; (8002418 <HAL_RCC_ClockConfig+0x1b8>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d20c      	bcs.n	80023a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238e:	4b22      	ldr	r3, [pc, #136]	; (8002418 <HAL_RCC_ClockConfig+0x1b8>)
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002396:	4b20      	ldr	r3, [pc, #128]	; (8002418 <HAL_RCC_ClockConfig+0x1b8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d001      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e032      	b.n	800240e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d008      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	4916      	ldr	r1, [pc, #88]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d009      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023d2:	4b12      	ldr	r3, [pc, #72]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	490e      	ldr	r1, [pc, #56]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023e6:	f000 f855 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 80023ea:	4602      	mov	r2, r0
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	091b      	lsrs	r3, r3, #4
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	490a      	ldr	r1, [pc, #40]	; (8002420 <HAL_RCC_ClockConfig+0x1c0>)
 80023f8:	5ccb      	ldrb	r3, [r1, r3]
 80023fa:	fa22 f303 	lsr.w	r3, r2, r3
 80023fe:	4a09      	ldr	r2, [pc, #36]	; (8002424 <HAL_RCC_ClockConfig+0x1c4>)
 8002400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <HAL_RCC_ClockConfig+0x1c8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff fbc4 	bl	8001b94 <HAL_InitTick>

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40023c00 	.word	0x40023c00
 800241c:	40023800 	.word	0x40023800
 8002420:	08004254 	.word	0x08004254
 8002424:	20012c14 	.word	0x20012c14
 8002428:	20012c28 	.word	0x20012c28

0800242c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002430:	4b03      	ldr	r3, [pc, #12]	; (8002440 <HAL_RCC_GetHCLKFreq+0x14>)
 8002432:	681b      	ldr	r3, [r3, #0]
}
 8002434:	4618      	mov	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	20012c14 	.word	0x20012c14

08002444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002448:	f7ff fff0 	bl	800242c <HAL_RCC_GetHCLKFreq>
 800244c:	4602      	mov	r2, r0
 800244e:	4b05      	ldr	r3, [pc, #20]	; (8002464 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	0a9b      	lsrs	r3, r3, #10
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	4903      	ldr	r1, [pc, #12]	; (8002468 <HAL_RCC_GetPCLK1Freq+0x24>)
 800245a:	5ccb      	ldrb	r3, [r1, r3]
 800245c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002460:	4618      	mov	r0, r3
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40023800 	.word	0x40023800
 8002468:	08004264 	.word	0x08004264

0800246c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002470:	f7ff ffdc 	bl	800242c <HAL_RCC_GetHCLKFreq>
 8002474:	4602      	mov	r2, r0
 8002476:	4b05      	ldr	r3, [pc, #20]	; (800248c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	0b5b      	lsrs	r3, r3, #13
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	4903      	ldr	r1, [pc, #12]	; (8002490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002482:	5ccb      	ldrb	r3, [r1, r3]
 8002484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002488:	4618      	mov	r0, r3
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40023800 	.word	0x40023800
 8002490:	08004264 	.word	0x08004264

08002494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002498:	b0ae      	sub	sp, #184	; 0xb8
 800249a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024ba:	4bcb      	ldr	r3, [pc, #812]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x354>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 030c 	and.w	r3, r3, #12
 80024c2:	2b0c      	cmp	r3, #12
 80024c4:	f200 8206 	bhi.w	80028d4 <HAL_RCC_GetSysClockFreq+0x440>
 80024c8:	a201      	add	r2, pc, #4	; (adr r2, 80024d0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80024ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ce:	bf00      	nop
 80024d0:	08002505 	.word	0x08002505
 80024d4:	080028d5 	.word	0x080028d5
 80024d8:	080028d5 	.word	0x080028d5
 80024dc:	080028d5 	.word	0x080028d5
 80024e0:	0800250d 	.word	0x0800250d
 80024e4:	080028d5 	.word	0x080028d5
 80024e8:	080028d5 	.word	0x080028d5
 80024ec:	080028d5 	.word	0x080028d5
 80024f0:	08002515 	.word	0x08002515
 80024f4:	080028d5 	.word	0x080028d5
 80024f8:	080028d5 	.word	0x080028d5
 80024fc:	080028d5 	.word	0x080028d5
 8002500:	08002705 	.word	0x08002705
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002504:	4bb9      	ldr	r3, [pc, #740]	; (80027ec <HAL_RCC_GetSysClockFreq+0x358>)
 8002506:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800250a:	e1e7      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800250c:	4bb8      	ldr	r3, [pc, #736]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800250e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002512:	e1e3      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002514:	4bb4      	ldr	r3, [pc, #720]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800251c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002520:	4bb1      	ldr	r3, [pc, #708]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d071      	beq.n	8002610 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800252c:	4bae      	ldr	r3, [pc, #696]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	099b      	lsrs	r3, r3, #6
 8002532:	2200      	movs	r2, #0
 8002534:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002538:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800253c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002544:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002548:	2300      	movs	r3, #0
 800254a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800254e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002552:	4622      	mov	r2, r4
 8002554:	462b      	mov	r3, r5
 8002556:	f04f 0000 	mov.w	r0, #0
 800255a:	f04f 0100 	mov.w	r1, #0
 800255e:	0159      	lsls	r1, r3, #5
 8002560:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002564:	0150      	lsls	r0, r2, #5
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	4621      	mov	r1, r4
 800256c:	1a51      	subs	r1, r2, r1
 800256e:	6439      	str	r1, [r7, #64]	; 0x40
 8002570:	4629      	mov	r1, r5
 8002572:	eb63 0301 	sbc.w	r3, r3, r1
 8002576:	647b      	str	r3, [r7, #68]	; 0x44
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002584:	4649      	mov	r1, r9
 8002586:	018b      	lsls	r3, r1, #6
 8002588:	4641      	mov	r1, r8
 800258a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800258e:	4641      	mov	r1, r8
 8002590:	018a      	lsls	r2, r1, #6
 8002592:	4641      	mov	r1, r8
 8002594:	1a51      	subs	r1, r2, r1
 8002596:	63b9      	str	r1, [r7, #56]	; 0x38
 8002598:	4649      	mov	r1, r9
 800259a:	eb63 0301 	sbc.w	r3, r3, r1
 800259e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025a0:	f04f 0200 	mov.w	r2, #0
 80025a4:	f04f 0300 	mov.w	r3, #0
 80025a8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80025ac:	4649      	mov	r1, r9
 80025ae:	00cb      	lsls	r3, r1, #3
 80025b0:	4641      	mov	r1, r8
 80025b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025b6:	4641      	mov	r1, r8
 80025b8:	00ca      	lsls	r2, r1, #3
 80025ba:	4610      	mov	r0, r2
 80025bc:	4619      	mov	r1, r3
 80025be:	4603      	mov	r3, r0
 80025c0:	4622      	mov	r2, r4
 80025c2:	189b      	adds	r3, r3, r2
 80025c4:	633b      	str	r3, [r7, #48]	; 0x30
 80025c6:	462b      	mov	r3, r5
 80025c8:	460a      	mov	r2, r1
 80025ca:	eb42 0303 	adc.w	r3, r2, r3
 80025ce:	637b      	str	r3, [r7, #52]	; 0x34
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025dc:	4629      	mov	r1, r5
 80025de:	024b      	lsls	r3, r1, #9
 80025e0:	4621      	mov	r1, r4
 80025e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025e6:	4621      	mov	r1, r4
 80025e8:	024a      	lsls	r2, r1, #9
 80025ea:	4610      	mov	r0, r2
 80025ec:	4619      	mov	r1, r3
 80025ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025f2:	2200      	movs	r2, #0
 80025f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80025f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80025fc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002600:	f7fd fe00 	bl	8000204 <__aeabi_uldivmod>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4613      	mov	r3, r2
 800260a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800260e:	e067      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002610:	4b75      	ldr	r3, [pc, #468]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	099b      	lsrs	r3, r3, #6
 8002616:	2200      	movs	r2, #0
 8002618:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800261c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002620:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002628:	67bb      	str	r3, [r7, #120]	; 0x78
 800262a:	2300      	movs	r3, #0
 800262c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800262e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002632:	4622      	mov	r2, r4
 8002634:	462b      	mov	r3, r5
 8002636:	f04f 0000 	mov.w	r0, #0
 800263a:	f04f 0100 	mov.w	r1, #0
 800263e:	0159      	lsls	r1, r3, #5
 8002640:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002644:	0150      	lsls	r0, r2, #5
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	4621      	mov	r1, r4
 800264c:	1a51      	subs	r1, r2, r1
 800264e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002650:	4629      	mov	r1, r5
 8002652:	eb63 0301 	sbc.w	r3, r3, r1
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002658:	f04f 0200 	mov.w	r2, #0
 800265c:	f04f 0300 	mov.w	r3, #0
 8002660:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002664:	4649      	mov	r1, r9
 8002666:	018b      	lsls	r3, r1, #6
 8002668:	4641      	mov	r1, r8
 800266a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800266e:	4641      	mov	r1, r8
 8002670:	018a      	lsls	r2, r1, #6
 8002672:	4641      	mov	r1, r8
 8002674:	ebb2 0a01 	subs.w	sl, r2, r1
 8002678:	4649      	mov	r1, r9
 800267a:	eb63 0b01 	sbc.w	fp, r3, r1
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800268a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800268e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002692:	4692      	mov	sl, r2
 8002694:	469b      	mov	fp, r3
 8002696:	4623      	mov	r3, r4
 8002698:	eb1a 0303 	adds.w	r3, sl, r3
 800269c:	623b      	str	r3, [r7, #32]
 800269e:	462b      	mov	r3, r5
 80026a0:	eb4b 0303 	adc.w	r3, fp, r3
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80026b2:	4629      	mov	r1, r5
 80026b4:	028b      	lsls	r3, r1, #10
 80026b6:	4621      	mov	r1, r4
 80026b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026bc:	4621      	mov	r1, r4
 80026be:	028a      	lsls	r2, r1, #10
 80026c0:	4610      	mov	r0, r2
 80026c2:	4619      	mov	r1, r3
 80026c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026c8:	2200      	movs	r2, #0
 80026ca:	673b      	str	r3, [r7, #112]	; 0x70
 80026cc:	677a      	str	r2, [r7, #116]	; 0x74
 80026ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80026d2:	f7fd fd97 	bl	8000204 <__aeabi_uldivmod>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4613      	mov	r3, r2
 80026dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026e0:	4b41      	ldr	r3, [pc, #260]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x354>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	0c1b      	lsrs	r3, r3, #16
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	3301      	adds	r3, #1
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80026f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80026f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002702:	e0eb      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002704:	4b38      	ldr	r3, [pc, #224]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800270c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002710:	4b35      	ldr	r3, [pc, #212]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d06b      	beq.n	80027f4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800271c:	4b32      	ldr	r3, [pc, #200]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	099b      	lsrs	r3, r3, #6
 8002722:	2200      	movs	r2, #0
 8002724:	66bb      	str	r3, [r7, #104]	; 0x68
 8002726:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002728:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800272a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800272e:	663b      	str	r3, [r7, #96]	; 0x60
 8002730:	2300      	movs	r3, #0
 8002732:	667b      	str	r3, [r7, #100]	; 0x64
 8002734:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002738:	4622      	mov	r2, r4
 800273a:	462b      	mov	r3, r5
 800273c:	f04f 0000 	mov.w	r0, #0
 8002740:	f04f 0100 	mov.w	r1, #0
 8002744:	0159      	lsls	r1, r3, #5
 8002746:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800274a:	0150      	lsls	r0, r2, #5
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4621      	mov	r1, r4
 8002752:	1a51      	subs	r1, r2, r1
 8002754:	61b9      	str	r1, [r7, #24]
 8002756:	4629      	mov	r1, r5
 8002758:	eb63 0301 	sbc.w	r3, r3, r1
 800275c:	61fb      	str	r3, [r7, #28]
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	f04f 0300 	mov.w	r3, #0
 8002766:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800276a:	4659      	mov	r1, fp
 800276c:	018b      	lsls	r3, r1, #6
 800276e:	4651      	mov	r1, sl
 8002770:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002774:	4651      	mov	r1, sl
 8002776:	018a      	lsls	r2, r1, #6
 8002778:	4651      	mov	r1, sl
 800277a:	ebb2 0801 	subs.w	r8, r2, r1
 800277e:	4659      	mov	r1, fp
 8002780:	eb63 0901 	sbc.w	r9, r3, r1
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002790:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002794:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002798:	4690      	mov	r8, r2
 800279a:	4699      	mov	r9, r3
 800279c:	4623      	mov	r3, r4
 800279e:	eb18 0303 	adds.w	r3, r8, r3
 80027a2:	613b      	str	r3, [r7, #16]
 80027a4:	462b      	mov	r3, r5
 80027a6:	eb49 0303 	adc.w	r3, r9, r3
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	f04f 0300 	mov.w	r3, #0
 80027b4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80027b8:	4629      	mov	r1, r5
 80027ba:	024b      	lsls	r3, r1, #9
 80027bc:	4621      	mov	r1, r4
 80027be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027c2:	4621      	mov	r1, r4
 80027c4:	024a      	lsls	r2, r1, #9
 80027c6:	4610      	mov	r0, r2
 80027c8:	4619      	mov	r1, r3
 80027ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027ce:	2200      	movs	r2, #0
 80027d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80027d2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80027d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80027d8:	f7fd fd14 	bl	8000204 <__aeabi_uldivmod>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4613      	mov	r3, r2
 80027e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027e6:	e065      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x420>
 80027e8:	40023800 	.word	0x40023800
 80027ec:	00f42400 	.word	0x00f42400
 80027f0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027f4:	4b3d      	ldr	r3, [pc, #244]	; (80028ec <HAL_RCC_GetSysClockFreq+0x458>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	099b      	lsrs	r3, r3, #6
 80027fa:	2200      	movs	r2, #0
 80027fc:	4618      	mov	r0, r3
 80027fe:	4611      	mov	r1, r2
 8002800:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002804:	653b      	str	r3, [r7, #80]	; 0x50
 8002806:	2300      	movs	r3, #0
 8002808:	657b      	str	r3, [r7, #84]	; 0x54
 800280a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800280e:	4642      	mov	r2, r8
 8002810:	464b      	mov	r3, r9
 8002812:	f04f 0000 	mov.w	r0, #0
 8002816:	f04f 0100 	mov.w	r1, #0
 800281a:	0159      	lsls	r1, r3, #5
 800281c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002820:	0150      	lsls	r0, r2, #5
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4641      	mov	r1, r8
 8002828:	1a51      	subs	r1, r2, r1
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	4649      	mov	r1, r9
 800282e:	eb63 0301 	sbc.w	r3, r3, r1
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002840:	4659      	mov	r1, fp
 8002842:	018b      	lsls	r3, r1, #6
 8002844:	4651      	mov	r1, sl
 8002846:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800284a:	4651      	mov	r1, sl
 800284c:	018a      	lsls	r2, r1, #6
 800284e:	4651      	mov	r1, sl
 8002850:	1a54      	subs	r4, r2, r1
 8002852:	4659      	mov	r1, fp
 8002854:	eb63 0501 	sbc.w	r5, r3, r1
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	00eb      	lsls	r3, r5, #3
 8002862:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002866:	00e2      	lsls	r2, r4, #3
 8002868:	4614      	mov	r4, r2
 800286a:	461d      	mov	r5, r3
 800286c:	4643      	mov	r3, r8
 800286e:	18e3      	adds	r3, r4, r3
 8002870:	603b      	str	r3, [r7, #0]
 8002872:	464b      	mov	r3, r9
 8002874:	eb45 0303 	adc.w	r3, r5, r3
 8002878:	607b      	str	r3, [r7, #4]
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002886:	4629      	mov	r1, r5
 8002888:	028b      	lsls	r3, r1, #10
 800288a:	4621      	mov	r1, r4
 800288c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002890:	4621      	mov	r1, r4
 8002892:	028a      	lsls	r2, r1, #10
 8002894:	4610      	mov	r0, r2
 8002896:	4619      	mov	r1, r3
 8002898:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800289c:	2200      	movs	r2, #0
 800289e:	64bb      	str	r3, [r7, #72]	; 0x48
 80028a0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80028a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80028a6:	f7fd fcad 	bl	8000204 <__aeabi_uldivmod>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	4613      	mov	r3, r2
 80028b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80028b4:	4b0d      	ldr	r3, [pc, #52]	; (80028ec <HAL_RCC_GetSysClockFreq+0x458>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	0f1b      	lsrs	r3, r3, #28
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80028c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80028c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80028ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80028d2:	e003      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028d4:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80028d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80028da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	37b8      	adds	r7, #184	; 0xb8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028ea:	bf00      	nop
 80028ec:	40023800 	.word	0x40023800
 80028f0:	00f42400 	.word	0x00f42400

080028f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e28d      	b.n	8002e22 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 8083 	beq.w	8002a1a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002914:	4b94      	ldr	r3, [pc, #592]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 030c 	and.w	r3, r3, #12
 800291c:	2b04      	cmp	r3, #4
 800291e:	d019      	beq.n	8002954 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002920:	4b91      	ldr	r3, [pc, #580]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002928:	2b08      	cmp	r3, #8
 800292a:	d106      	bne.n	800293a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800292c:	4b8e      	ldr	r3, [pc, #568]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002934:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002938:	d00c      	beq.n	8002954 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800293a:	4b8b      	ldr	r3, [pc, #556]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002942:	2b0c      	cmp	r3, #12
 8002944:	d112      	bne.n	800296c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002946:	4b88      	ldr	r3, [pc, #544]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800294e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002952:	d10b      	bne.n	800296c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002954:	4b84      	ldr	r3, [pc, #528]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d05b      	beq.n	8002a18 <HAL_RCC_OscConfig+0x124>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d157      	bne.n	8002a18 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e25a      	b.n	8002e22 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002974:	d106      	bne.n	8002984 <HAL_RCC_OscConfig+0x90>
 8002976:	4b7c      	ldr	r3, [pc, #496]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a7b      	ldr	r2, [pc, #492]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 800297c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	e01d      	b.n	80029c0 <HAL_RCC_OscConfig+0xcc>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800298c:	d10c      	bne.n	80029a8 <HAL_RCC_OscConfig+0xb4>
 800298e:	4b76      	ldr	r3, [pc, #472]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a75      	ldr	r2, [pc, #468]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 8002994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	4b73      	ldr	r3, [pc, #460]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a72      	ldr	r2, [pc, #456]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 80029a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	e00b      	b.n	80029c0 <HAL_RCC_OscConfig+0xcc>
 80029a8:	4b6f      	ldr	r3, [pc, #444]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a6e      	ldr	r2, [pc, #440]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 80029ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b2:	6013      	str	r3, [r2, #0]
 80029b4:	4b6c      	ldr	r3, [pc, #432]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a6b      	ldr	r2, [pc, #428]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 80029ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d013      	beq.n	80029f0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c8:	f7ff f928 	bl	8001c1c <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029d0:	f7ff f924 	bl	8001c1c <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b64      	cmp	r3, #100	; 0x64
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e21f      	b.n	8002e22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e2:	4b61      	ldr	r3, [pc, #388]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0f0      	beq.n	80029d0 <HAL_RCC_OscConfig+0xdc>
 80029ee:	e014      	b.n	8002a1a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f0:	f7ff f914 	bl	8001c1c <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f8:	f7ff f910 	bl	8001c1c <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b64      	cmp	r3, #100	; 0x64
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e20b      	b.n	8002e22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a0a:	4b57      	ldr	r3, [pc, #348]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1f0      	bne.n	80029f8 <HAL_RCC_OscConfig+0x104>
 8002a16:	e000      	b.n	8002a1a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d06f      	beq.n	8002b06 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a26:	4b50      	ldr	r3, [pc, #320]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d017      	beq.n	8002a62 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a32:	4b4d      	ldr	r3, [pc, #308]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d105      	bne.n	8002a4a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a3e:	4b4a      	ldr	r3, [pc, #296]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00b      	beq.n	8002a62 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a4a:	4b47      	ldr	r3, [pc, #284]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a52:	2b0c      	cmp	r3, #12
 8002a54:	d11c      	bne.n	8002a90 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a56:	4b44      	ldr	r3, [pc, #272]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d116      	bne.n	8002a90 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a62:	4b41      	ldr	r3, [pc, #260]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d005      	beq.n	8002a7a <HAL_RCC_OscConfig+0x186>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d001      	beq.n	8002a7a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e1d3      	b.n	8002e22 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a7a:	4b3b      	ldr	r3, [pc, #236]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4937      	ldr	r1, [pc, #220]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a8e:	e03a      	b.n	8002b06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d020      	beq.n	8002ada <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a98:	4b34      	ldr	r3, [pc, #208]	; (8002b6c <HAL_RCC_OscConfig+0x278>)
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9e:	f7ff f8bd 	bl	8001c1c <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aa6:	f7ff f8b9 	bl	8001c1c <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e1b4      	b.n	8002e22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab8:	4b2b      	ldr	r3, [pc, #172]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0f0      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac4:	4b28      	ldr	r3, [pc, #160]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	4925      	ldr	r1, [pc, #148]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	600b      	str	r3, [r1, #0]
 8002ad8:	e015      	b.n	8002b06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ada:	4b24      	ldr	r3, [pc, #144]	; (8002b6c <HAL_RCC_OscConfig+0x278>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae0:	f7ff f89c 	bl	8001c1c <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ae8:	f7ff f898 	bl	8001c1c <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e193      	b.n	8002e22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002afa:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f0      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d036      	beq.n	8002b80 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d016      	beq.n	8002b48 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b1a:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <HAL_RCC_OscConfig+0x27c>)
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b20:	f7ff f87c 	bl	8001c1c <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b28:	f7ff f878 	bl	8001c1c <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e173      	b.n	8002e22 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b3a:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <HAL_RCC_OscConfig+0x274>)
 8002b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0f0      	beq.n	8002b28 <HAL_RCC_OscConfig+0x234>
 8002b46:	e01b      	b.n	8002b80 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b48:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <HAL_RCC_OscConfig+0x27c>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4e:	f7ff f865 	bl	8001c1c <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b54:	e00e      	b.n	8002b74 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b56:	f7ff f861 	bl	8001c1c <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d907      	bls.n	8002b74 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e15c      	b.n	8002e22 <HAL_RCC_OscConfig+0x52e>
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	42470000 	.word	0x42470000
 8002b70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b74:	4b8a      	ldr	r3, [pc, #552]	; (8002da0 <HAL_RCC_OscConfig+0x4ac>)
 8002b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1ea      	bne.n	8002b56 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 8097 	beq.w	8002cbc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b92:	4b83      	ldr	r3, [pc, #524]	; (8002da0 <HAL_RCC_OscConfig+0x4ac>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10f      	bne.n	8002bbe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	4b7f      	ldr	r3, [pc, #508]	; (8002da0 <HAL_RCC_OscConfig+0x4ac>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	4a7e      	ldr	r2, [pc, #504]	; (8002da0 <HAL_RCC_OscConfig+0x4ac>)
 8002ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bac:	6413      	str	r3, [r2, #64]	; 0x40
 8002bae:	4b7c      	ldr	r3, [pc, #496]	; (8002da0 <HAL_RCC_OscConfig+0x4ac>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb6:	60bb      	str	r3, [r7, #8]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbe:	4b79      	ldr	r3, [pc, #484]	; (8002da4 <HAL_RCC_OscConfig+0x4b0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d118      	bne.n	8002bfc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bca:	4b76      	ldr	r3, [pc, #472]	; (8002da4 <HAL_RCC_OscConfig+0x4b0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a75      	ldr	r2, [pc, #468]	; (8002da4 <HAL_RCC_OscConfig+0x4b0>)
 8002bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bd6:	f7ff f821 	bl	8001c1c <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bde:	f7ff f81d 	bl	8001c1c <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e118      	b.n	8002e22 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf0:	4b6c      	ldr	r3, [pc, #432]	; (8002da4 <HAL_RCC_OscConfig+0x4b0>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0f0      	beq.n	8002bde <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d106      	bne.n	8002c12 <HAL_RCC_OscConfig+0x31e>
 8002c04:	4b66      	ldr	r3, [pc, #408]	; (8002da0 <HAL_RCC_OscConfig+0x4ac>)
 8002c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c08:	4a65      	ldr	r2, [pc, #404]	; (8002da0 <HAL_RCC_OscConfig+0x4ac>)
 8002c0a:	f043 0301 	orr.w	r3, r3, #1
 8002c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c10:	e01c      	b.n	8002c4c <HAL_RCC_OscConfig+0x358>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	2b05      	cmp	r3, #5
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCC_OscConfig+0x340>
 8002c1a:	4b61      	ldr	r3, [pc, #388]	; (8002da0 <HAL_RCC_OscConfig+0x4ac>)
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1e:	4a60      	ldr	r2, [pc, #384]	; (8002da0 <HAL_RCC_OscConfig+0x4ac>)
 8002c20:	f043 0304 	orr.w	r3, r3, #4
 8002c24:	6713      	str	r3, [r2, #112]	; 0x70
 8002c26:	4b5e      	ldr	r3, [pc, #376]	; (8002da0 <HAL_RCC_OscConfig+0x4ac>)
 8002c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2a:	4a5d      	ldr	r2, [pc, #372]	; (8002da0 <HAL_RCC_OscConfig+0x4ac>)
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	6713      	str	r3, [r2, #112]	; 0x70
 8002c32:	e00b      	b.n	8002c4c <HAL_RCC_OscConfig+0x358>
 8002c34:	4b5a      	ldr	r3, [pc, #360]	; (8002da0 <HAL_RCC_OscConfig+0x4ac>)
 8002c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c38:	4a59      	ldr	r2, [pc, #356]	; (8002da0 <HAL_RCC_OscConfig+0x4ac>)
 8002c3a:	f023 0301 	bic.w	r3, r3, #1
 8002c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c40:	4b57      	ldr	r3, [pc, #348]	; (8002da0 <HAL_RCC_OscConfig+0x4ac>)
 8002c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c44:	4a56      	ldr	r2, [pc, #344]	; (8002da0 <HAL_RCC_OscConfig+0x4ac>)
 8002c46:	f023 0304 	bic.w	r3, r3, #4
 8002c4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d015      	beq.n	8002c80 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c54:	f7fe ffe2 	bl	8001c1c <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5a:	e00a      	b.n	8002c72 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c5c:	f7fe ffde 	bl	8001c1c <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e0d7      	b.n	8002e22 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c72:	4b4b      	ldr	r3, [pc, #300]	; (8002da0 <HAL_RCC_OscConfig+0x4ac>)
 8002c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0ee      	beq.n	8002c5c <HAL_RCC_OscConfig+0x368>
 8002c7e:	e014      	b.n	8002caa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c80:	f7fe ffcc 	bl	8001c1c <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c86:	e00a      	b.n	8002c9e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c88:	f7fe ffc8 	bl	8001c1c <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e0c1      	b.n	8002e22 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c9e:	4b40      	ldr	r3, [pc, #256]	; (8002da0 <HAL_RCC_OscConfig+0x4ac>)
 8002ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1ee      	bne.n	8002c88 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002caa:	7dfb      	ldrb	r3, [r7, #23]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d105      	bne.n	8002cbc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb0:	4b3b      	ldr	r3, [pc, #236]	; (8002da0 <HAL_RCC_OscConfig+0x4ac>)
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	4a3a      	ldr	r2, [pc, #232]	; (8002da0 <HAL_RCC_OscConfig+0x4ac>)
 8002cb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 80ad 	beq.w	8002e20 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cc6:	4b36      	ldr	r3, [pc, #216]	; (8002da0 <HAL_RCC_OscConfig+0x4ac>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d060      	beq.n	8002d94 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d145      	bne.n	8002d66 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cda:	4b33      	ldr	r3, [pc, #204]	; (8002da8 <HAL_RCC_OscConfig+0x4b4>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7fe ff9c 	bl	8001c1c <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce8:	f7fe ff98 	bl	8001c1c <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e093      	b.n	8002e22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfa:	4b29      	ldr	r3, [pc, #164]	; (8002da0 <HAL_RCC_OscConfig+0x4ac>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69da      	ldr	r2, [r3, #28]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	019b      	lsls	r3, r3, #6
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1c:	085b      	lsrs	r3, r3, #1
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	041b      	lsls	r3, r3, #16
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d28:	061b      	lsls	r3, r3, #24
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d30:	071b      	lsls	r3, r3, #28
 8002d32:	491b      	ldr	r1, [pc, #108]	; (8002da0 <HAL_RCC_OscConfig+0x4ac>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d38:	4b1b      	ldr	r3, [pc, #108]	; (8002da8 <HAL_RCC_OscConfig+0x4b4>)
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3e:	f7fe ff6d 	bl	8001c1c <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d46:	f7fe ff69 	bl	8001c1c <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e064      	b.n	8002e22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d58:	4b11      	ldr	r3, [pc, #68]	; (8002da0 <HAL_RCC_OscConfig+0x4ac>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0f0      	beq.n	8002d46 <HAL_RCC_OscConfig+0x452>
 8002d64:	e05c      	b.n	8002e20 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d66:	4b10      	ldr	r3, [pc, #64]	; (8002da8 <HAL_RCC_OscConfig+0x4b4>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7fe ff56 	bl	8001c1c <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d74:	f7fe ff52 	bl	8001c1c <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e04d      	b.n	8002e22 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d86:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HAL_RCC_OscConfig+0x4ac>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0x480>
 8002d92:	e045      	b.n	8002e20 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d107      	bne.n	8002dac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e040      	b.n	8002e22 <HAL_RCC_OscConfig+0x52e>
 8002da0:	40023800 	.word	0x40023800
 8002da4:	40007000 	.word	0x40007000
 8002da8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dac:	4b1f      	ldr	r3, [pc, #124]	; (8002e2c <HAL_RCC_OscConfig+0x538>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d030      	beq.n	8002e1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d129      	bne.n	8002e1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d122      	bne.n	8002e1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ddc:	4013      	ands	r3, r2
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002de2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d119      	bne.n	8002e1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df2:	085b      	lsrs	r3, r3, #1
 8002df4:	3b01      	subs	r3, #1
 8002df6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d10f      	bne.n	8002e1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d107      	bne.n	8002e1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d001      	beq.n	8002e20 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e000      	b.n	8002e22 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800

08002e30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e07b      	b.n	8002f3a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d108      	bne.n	8002e5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e52:	d009      	beq.n	8002e68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	61da      	str	r2, [r3, #28]
 8002e5a:	e005      	b.n	8002e68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d106      	bne.n	8002e88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7fe fa4a 	bl	800131c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eec:	ea42 0103 	orr.w	r1, r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	0c1b      	lsrs	r3, r3, #16
 8002f06:	f003 0104 	and.w	r1, r3, #4
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	f003 0210 	and.w	r2, r3, #16
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	69da      	ldr	r2, [r3, #28]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b088      	sub	sp, #32
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	603b      	str	r3, [r7, #0]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d101      	bne.n	8002f64 <HAL_SPI_Transmit+0x22>
 8002f60:	2302      	movs	r3, #2
 8002f62:	e126      	b.n	80031b2 <HAL_SPI_Transmit+0x270>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f6c:	f7fe fe56 	bl	8001c1c <HAL_GetTick>
 8002f70:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f72:	88fb      	ldrh	r3, [r7, #6]
 8002f74:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d002      	beq.n	8002f88 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f82:	2302      	movs	r3, #2
 8002f84:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f86:	e10b      	b.n	80031a0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <HAL_SPI_Transmit+0x52>
 8002f8e:	88fb      	ldrh	r3, [r7, #6]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d102      	bne.n	8002f9a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f98:	e102      	b.n	80031a0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	88fa      	ldrh	r2, [r7, #6]
 8002fb2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	88fa      	ldrh	r2, [r7, #6]
 8002fb8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fe0:	d10f      	bne.n	8003002 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ff0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003000:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300c:	2b40      	cmp	r3, #64	; 0x40
 800300e:	d007      	beq.n	8003020 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800301e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003028:	d14b      	bne.n	80030c2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <HAL_SPI_Transmit+0xf6>
 8003032:	8afb      	ldrh	r3, [r7, #22]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d13e      	bne.n	80030b6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303c:	881a      	ldrh	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003048:	1c9a      	adds	r2, r3, #2
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003052:	b29b      	uxth	r3, r3
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800305c:	e02b      	b.n	80030b6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b02      	cmp	r3, #2
 800306a:	d112      	bne.n	8003092 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003070:	881a      	ldrh	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307c:	1c9a      	adds	r2, r3, #2
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003086:	b29b      	uxth	r3, r3
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003090:	e011      	b.n	80030b6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003092:	f7fe fdc3 	bl	8001c1c <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d803      	bhi.n	80030aa <HAL_SPI_Transmit+0x168>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a8:	d102      	bne.n	80030b0 <HAL_SPI_Transmit+0x16e>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d102      	bne.n	80030b6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80030b4:	e074      	b.n	80031a0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1ce      	bne.n	800305e <HAL_SPI_Transmit+0x11c>
 80030c0:	e04c      	b.n	800315c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <HAL_SPI_Transmit+0x18e>
 80030ca:	8afb      	ldrh	r3, [r7, #22]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d140      	bne.n	8003152 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	330c      	adds	r3, #12
 80030da:	7812      	ldrb	r2, [r2, #0]
 80030dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80030f6:	e02c      	b.n	8003152 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b02      	cmp	r3, #2
 8003104:	d113      	bne.n	800312e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	330c      	adds	r3, #12
 8003110:	7812      	ldrb	r2, [r2, #0]
 8003112:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003122:	b29b      	uxth	r3, r3
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	86da      	strh	r2, [r3, #54]	; 0x36
 800312c:	e011      	b.n	8003152 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800312e:	f7fe fd75 	bl	8001c1c <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d803      	bhi.n	8003146 <HAL_SPI_Transmit+0x204>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003144:	d102      	bne.n	800314c <HAL_SPI_Transmit+0x20a>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d102      	bne.n	8003152 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003150:	e026      	b.n	80031a0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003156:	b29b      	uxth	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1cd      	bne.n	80030f8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	6839      	ldr	r1, [r7, #0]
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 f8b3 	bl	80032cc <SPI_EndRxTxTransaction>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d002      	beq.n	8003172 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2220      	movs	r2, #32
 8003170:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10a      	bne.n	8003190 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800317a:	2300      	movs	r3, #0
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	613b      	str	r3, [r7, #16]
 800318e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	77fb      	strb	r3, [r7, #31]
 800319c:	e000      	b.n	80031a0 <HAL_SPI_Transmit+0x25e>
  }

error:
 800319e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80031b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3720      	adds	r7, #32
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	603b      	str	r3, [r7, #0]
 80031c8:	4613      	mov	r3, r2
 80031ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031cc:	f7fe fd26 	bl	8001c1c <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d4:	1a9b      	subs	r3, r3, r2
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	4413      	add	r3, r2
 80031da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031dc:	f7fe fd1e 	bl	8001c1c <HAL_GetTick>
 80031e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031e2:	4b39      	ldr	r3, [pc, #228]	; (80032c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	015b      	lsls	r3, r3, #5
 80031e8:	0d1b      	lsrs	r3, r3, #20
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	fb02 f303 	mul.w	r3, r2, r3
 80031f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031f2:	e054      	b.n	800329e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fa:	d050      	beq.n	800329e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031fc:	f7fe fd0e 	bl	8001c1c <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	69fa      	ldr	r2, [r7, #28]
 8003208:	429a      	cmp	r2, r3
 800320a:	d902      	bls.n	8003212 <SPI_WaitFlagStateUntilTimeout+0x56>
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d13d      	bne.n	800328e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003220:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800322a:	d111      	bne.n	8003250 <SPI_WaitFlagStateUntilTimeout+0x94>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003234:	d004      	beq.n	8003240 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323e:	d107      	bne.n	8003250 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800324e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003258:	d10f      	bne.n	800327a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003278:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e017      	b.n	80032be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	3b01      	subs	r3, #1
 800329c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	4013      	ands	r3, r2
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	bf0c      	ite	eq
 80032ae:	2301      	moveq	r3, #1
 80032b0:	2300      	movne	r3, #0
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	461a      	mov	r2, r3
 80032b6:	79fb      	ldrb	r3, [r7, #7]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d19b      	bne.n	80031f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3720      	adds	r7, #32
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20012c14 	.word	0x20012c14

080032cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af02      	add	r7, sp, #8
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80032d8:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <SPI_EndRxTxTransaction+0x7c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a1b      	ldr	r2, [pc, #108]	; (800334c <SPI_EndRxTxTransaction+0x80>)
 80032de:	fba2 2303 	umull	r2, r3, r2, r3
 80032e2:	0d5b      	lsrs	r3, r3, #21
 80032e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032e8:	fb02 f303 	mul.w	r3, r2, r3
 80032ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032f6:	d112      	bne.n	800331e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2200      	movs	r2, #0
 8003300:	2180      	movs	r1, #128	; 0x80
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f7ff ff5a 	bl	80031bc <SPI_WaitFlagStateUntilTimeout>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d016      	beq.n	800333c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003312:	f043 0220 	orr.w	r2, r3, #32
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e00f      	b.n	800333e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00a      	beq.n	800333a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	3b01      	subs	r3, #1
 8003328:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003334:	2b80      	cmp	r3, #128	; 0x80
 8003336:	d0f2      	beq.n	800331e <SPI_EndRxTxTransaction+0x52>
 8003338:	e000      	b.n	800333c <SPI_EndRxTxTransaction+0x70>
        break;
 800333a:	bf00      	nop
  }

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20012c14 	.word	0x20012c14
 800334c:	165e9f81 	.word	0x165e9f81

08003350 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e041      	b.n	80033e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fe f848 	bl	800140c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3304      	adds	r3, #4
 800338c:	4619      	mov	r1, r3
 800338e:	4610      	mov	r0, r2
 8003390:	f000 fa96 	bl	80038c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b01      	cmp	r3, #1
 8003402:	d001      	beq.n	8003408 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e04e      	b.n	80034a6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 0201 	orr.w	r2, r2, #1
 800341e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a23      	ldr	r2, [pc, #140]	; (80034b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d022      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003432:	d01d      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a1f      	ldr	r2, [pc, #124]	; (80034b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d018      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a1e      	ldr	r2, [pc, #120]	; (80034bc <HAL_TIM_Base_Start_IT+0xcc>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d013      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a1c      	ldr	r2, [pc, #112]	; (80034c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00e      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a1b      	ldr	r2, [pc, #108]	; (80034c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d009      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a19      	ldr	r2, [pc, #100]	; (80034c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d004      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a18      	ldr	r2, [pc, #96]	; (80034cc <HAL_TIM_Base_Start_IT+0xdc>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d111      	bne.n	8003494 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2b06      	cmp	r3, #6
 8003480:	d010      	beq.n	80034a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0201 	orr.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003492:	e007      	b.n	80034a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	40010000 	.word	0x40010000
 80034b8:	40000400 	.word	0x40000400
 80034bc:	40000800 	.word	0x40000800
 80034c0:	40000c00 	.word	0x40000c00
 80034c4:	40010400 	.word	0x40010400
 80034c8:	40014000 	.word	0x40014000
 80034cc:	40001800 	.word	0x40001800

080034d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d122      	bne.n	800352c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d11b      	bne.n	800352c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f06f 0202 	mvn.w	r2, #2
 80034fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f9b5 	bl	8003882 <HAL_TIM_IC_CaptureCallback>
 8003518:	e005      	b.n	8003526 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f9a7 	bl	800386e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f9b8 	bl	8003896 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	2b04      	cmp	r3, #4
 8003538:	d122      	bne.n	8003580 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b04      	cmp	r3, #4
 8003546:	d11b      	bne.n	8003580 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f06f 0204 	mvn.w	r2, #4
 8003550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2202      	movs	r2, #2
 8003556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f98b 	bl	8003882 <HAL_TIM_IC_CaptureCallback>
 800356c:	e005      	b.n	800357a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f97d 	bl	800386e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f98e 	bl	8003896 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b08      	cmp	r3, #8
 800358c:	d122      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b08      	cmp	r3, #8
 800359a:	d11b      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f06f 0208 	mvn.w	r2, #8
 80035a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2204      	movs	r2, #4
 80035aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f961 	bl	8003882 <HAL_TIM_IC_CaptureCallback>
 80035c0:	e005      	b.n	80035ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f953 	bl	800386e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f964 	bl	8003896 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f003 0310 	and.w	r3, r3, #16
 80035de:	2b10      	cmp	r3, #16
 80035e0:	d122      	bne.n	8003628 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f003 0310 	and.w	r3, r3, #16
 80035ec:	2b10      	cmp	r3, #16
 80035ee:	d11b      	bne.n	8003628 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f06f 0210 	mvn.w	r2, #16
 80035f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2208      	movs	r2, #8
 80035fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f937 	bl	8003882 <HAL_TIM_IC_CaptureCallback>
 8003614:	e005      	b.n	8003622 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f929 	bl	800386e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f93a 	bl	8003896 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b01      	cmp	r3, #1
 8003634:	d10e      	bne.n	8003654 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b01      	cmp	r3, #1
 8003642:	d107      	bne.n	8003654 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f06f 0201 	mvn.w	r2, #1
 800364c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fd ffc6 	bl	80015e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365e:	2b80      	cmp	r3, #128	; 0x80
 8003660:	d10e      	bne.n	8003680 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366c:	2b80      	cmp	r3, #128	; 0x80
 800366e:	d107      	bne.n	8003680 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fae0 	bl	8003c40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368a:	2b40      	cmp	r3, #64	; 0x40
 800368c:	d10e      	bne.n	80036ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003698:	2b40      	cmp	r3, #64	; 0x40
 800369a:	d107      	bne.n	80036ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f8ff 	bl	80038aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	f003 0320 	and.w	r3, r3, #32
 80036b6:	2b20      	cmp	r3, #32
 80036b8:	d10e      	bne.n	80036d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f003 0320 	and.w	r3, r3, #32
 80036c4:	2b20      	cmp	r3, #32
 80036c6:	d107      	bne.n	80036d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f06f 0220 	mvn.w	r2, #32
 80036d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 faaa 	bl	8003c2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036d8:	bf00      	nop
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ea:	2300      	movs	r3, #0
 80036ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d101      	bne.n	80036fc <HAL_TIM_ConfigClockSource+0x1c>
 80036f8:	2302      	movs	r3, #2
 80036fa:	e0b4      	b.n	8003866 <HAL_TIM_ConfigClockSource+0x186>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800371a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003722:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003734:	d03e      	beq.n	80037b4 <HAL_TIM_ConfigClockSource+0xd4>
 8003736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800373a:	f200 8087 	bhi.w	800384c <HAL_TIM_ConfigClockSource+0x16c>
 800373e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003742:	f000 8086 	beq.w	8003852 <HAL_TIM_ConfigClockSource+0x172>
 8003746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800374a:	d87f      	bhi.n	800384c <HAL_TIM_ConfigClockSource+0x16c>
 800374c:	2b70      	cmp	r3, #112	; 0x70
 800374e:	d01a      	beq.n	8003786 <HAL_TIM_ConfigClockSource+0xa6>
 8003750:	2b70      	cmp	r3, #112	; 0x70
 8003752:	d87b      	bhi.n	800384c <HAL_TIM_ConfigClockSource+0x16c>
 8003754:	2b60      	cmp	r3, #96	; 0x60
 8003756:	d050      	beq.n	80037fa <HAL_TIM_ConfigClockSource+0x11a>
 8003758:	2b60      	cmp	r3, #96	; 0x60
 800375a:	d877      	bhi.n	800384c <HAL_TIM_ConfigClockSource+0x16c>
 800375c:	2b50      	cmp	r3, #80	; 0x50
 800375e:	d03c      	beq.n	80037da <HAL_TIM_ConfigClockSource+0xfa>
 8003760:	2b50      	cmp	r3, #80	; 0x50
 8003762:	d873      	bhi.n	800384c <HAL_TIM_ConfigClockSource+0x16c>
 8003764:	2b40      	cmp	r3, #64	; 0x40
 8003766:	d058      	beq.n	800381a <HAL_TIM_ConfigClockSource+0x13a>
 8003768:	2b40      	cmp	r3, #64	; 0x40
 800376a:	d86f      	bhi.n	800384c <HAL_TIM_ConfigClockSource+0x16c>
 800376c:	2b30      	cmp	r3, #48	; 0x30
 800376e:	d064      	beq.n	800383a <HAL_TIM_ConfigClockSource+0x15a>
 8003770:	2b30      	cmp	r3, #48	; 0x30
 8003772:	d86b      	bhi.n	800384c <HAL_TIM_ConfigClockSource+0x16c>
 8003774:	2b20      	cmp	r3, #32
 8003776:	d060      	beq.n	800383a <HAL_TIM_ConfigClockSource+0x15a>
 8003778:	2b20      	cmp	r3, #32
 800377a:	d867      	bhi.n	800384c <HAL_TIM_ConfigClockSource+0x16c>
 800377c:	2b00      	cmp	r3, #0
 800377e:	d05c      	beq.n	800383a <HAL_TIM_ConfigClockSource+0x15a>
 8003780:	2b10      	cmp	r3, #16
 8003782:	d05a      	beq.n	800383a <HAL_TIM_ConfigClockSource+0x15a>
 8003784:	e062      	b.n	800384c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6818      	ldr	r0, [r3, #0]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	6899      	ldr	r1, [r3, #8]
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f000 f9ad 	bl	8003af4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	609a      	str	r2, [r3, #8]
      break;
 80037b2:	e04f      	b.n	8003854 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6818      	ldr	r0, [r3, #0]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	6899      	ldr	r1, [r3, #8]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f000 f996 	bl	8003af4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037d6:	609a      	str	r2, [r3, #8]
      break;
 80037d8:	e03c      	b.n	8003854 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6818      	ldr	r0, [r3, #0]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	6859      	ldr	r1, [r3, #4]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	461a      	mov	r2, r3
 80037e8:	f000 f90a 	bl	8003a00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2150      	movs	r1, #80	; 0x50
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 f963 	bl	8003abe <TIM_ITRx_SetConfig>
      break;
 80037f8:	e02c      	b.n	8003854 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6818      	ldr	r0, [r3, #0]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	6859      	ldr	r1, [r3, #4]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	461a      	mov	r2, r3
 8003808:	f000 f929 	bl	8003a5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2160      	movs	r1, #96	; 0x60
 8003812:	4618      	mov	r0, r3
 8003814:	f000 f953 	bl	8003abe <TIM_ITRx_SetConfig>
      break;
 8003818:	e01c      	b.n	8003854 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	6859      	ldr	r1, [r3, #4]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	461a      	mov	r2, r3
 8003828:	f000 f8ea 	bl	8003a00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2140      	movs	r1, #64	; 0x40
 8003832:	4618      	mov	r0, r3
 8003834:	f000 f943 	bl	8003abe <TIM_ITRx_SetConfig>
      break;
 8003838:	e00c      	b.n	8003854 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4619      	mov	r1, r3
 8003844:	4610      	mov	r0, r2
 8003846:	f000 f93a 	bl	8003abe <TIM_ITRx_SetConfig>
      break;
 800384a:	e003      	b.n	8003854 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	73fb      	strb	r3, [r7, #15]
      break;
 8003850:	e000      	b.n	8003854 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003852:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003864:	7bfb      	ldrb	r3, [r7, #15]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
	...

080038c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a40      	ldr	r2, [pc, #256]	; (80039d4 <TIM_Base_SetConfig+0x114>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d013      	beq.n	8003900 <TIM_Base_SetConfig+0x40>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038de:	d00f      	beq.n	8003900 <TIM_Base_SetConfig+0x40>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a3d      	ldr	r2, [pc, #244]	; (80039d8 <TIM_Base_SetConfig+0x118>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d00b      	beq.n	8003900 <TIM_Base_SetConfig+0x40>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a3c      	ldr	r2, [pc, #240]	; (80039dc <TIM_Base_SetConfig+0x11c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d007      	beq.n	8003900 <TIM_Base_SetConfig+0x40>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a3b      	ldr	r2, [pc, #236]	; (80039e0 <TIM_Base_SetConfig+0x120>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d003      	beq.n	8003900 <TIM_Base_SetConfig+0x40>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a3a      	ldr	r2, [pc, #232]	; (80039e4 <TIM_Base_SetConfig+0x124>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d108      	bne.n	8003912 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a2f      	ldr	r2, [pc, #188]	; (80039d4 <TIM_Base_SetConfig+0x114>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d02b      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003920:	d027      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a2c      	ldr	r2, [pc, #176]	; (80039d8 <TIM_Base_SetConfig+0x118>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d023      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a2b      	ldr	r2, [pc, #172]	; (80039dc <TIM_Base_SetConfig+0x11c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d01f      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a2a      	ldr	r2, [pc, #168]	; (80039e0 <TIM_Base_SetConfig+0x120>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d01b      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a29      	ldr	r2, [pc, #164]	; (80039e4 <TIM_Base_SetConfig+0x124>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d017      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a28      	ldr	r2, [pc, #160]	; (80039e8 <TIM_Base_SetConfig+0x128>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d013      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a27      	ldr	r2, [pc, #156]	; (80039ec <TIM_Base_SetConfig+0x12c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d00f      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a26      	ldr	r2, [pc, #152]	; (80039f0 <TIM_Base_SetConfig+0x130>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d00b      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a25      	ldr	r2, [pc, #148]	; (80039f4 <TIM_Base_SetConfig+0x134>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d007      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a24      	ldr	r2, [pc, #144]	; (80039f8 <TIM_Base_SetConfig+0x138>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d003      	beq.n	8003972 <TIM_Base_SetConfig+0xb2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a23      	ldr	r2, [pc, #140]	; (80039fc <TIM_Base_SetConfig+0x13c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d108      	bne.n	8003984 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003978:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	4313      	orrs	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a0a      	ldr	r2, [pc, #40]	; (80039d4 <TIM_Base_SetConfig+0x114>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d003      	beq.n	80039b8 <TIM_Base_SetConfig+0xf8>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a0c      	ldr	r2, [pc, #48]	; (80039e4 <TIM_Base_SetConfig+0x124>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d103      	bne.n	80039c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	615a      	str	r2, [r3, #20]
}
 80039c6:	bf00      	nop
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40010000 	.word	0x40010000
 80039d8:	40000400 	.word	0x40000400
 80039dc:	40000800 	.word	0x40000800
 80039e0:	40000c00 	.word	0x40000c00
 80039e4:	40010400 	.word	0x40010400
 80039e8:	40014000 	.word	0x40014000
 80039ec:	40014400 	.word	0x40014400
 80039f0:	40014800 	.word	0x40014800
 80039f4:	40001800 	.word	0x40001800
 80039f8:	40001c00 	.word	0x40001c00
 80039fc:	40002000 	.word	0x40002000

08003a00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	f023 0201 	bic.w	r2, r3, #1
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	011b      	lsls	r3, r3, #4
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f023 030a 	bic.w	r3, r3, #10
 8003a3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	621a      	str	r2, [r3, #32]
}
 8003a52:	bf00      	nop
 8003a54:	371c      	adds	r7, #28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b087      	sub	sp, #28
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	60f8      	str	r0, [r7, #12]
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	f023 0210 	bic.w	r2, r3, #16
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	031b      	lsls	r3, r3, #12
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	621a      	str	r2, [r3, #32]
}
 8003ab2:	bf00      	nop
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b085      	sub	sp, #20
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f043 0307 	orr.w	r3, r3, #7
 8003ae0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	609a      	str	r2, [r3, #8]
}
 8003ae8:	bf00      	nop
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
 8003b00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	021a      	lsls	r2, r3, #8
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	431a      	orrs	r2, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	609a      	str	r2, [r3, #8]
}
 8003b28:	bf00      	nop
 8003b2a:	371c      	adds	r7, #28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	e05a      	b.n	8003c02 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a21      	ldr	r2, [pc, #132]	; (8003c10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d022      	beq.n	8003bd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b98:	d01d      	beq.n	8003bd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a1d      	ldr	r2, [pc, #116]	; (8003c14 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d018      	beq.n	8003bd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a1b      	ldr	r2, [pc, #108]	; (8003c18 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d013      	beq.n	8003bd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a1a      	ldr	r2, [pc, #104]	; (8003c1c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d00e      	beq.n	8003bd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a18      	ldr	r2, [pc, #96]	; (8003c20 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d009      	beq.n	8003bd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a17      	ldr	r2, [pc, #92]	; (8003c24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d004      	beq.n	8003bd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a15      	ldr	r2, [pc, #84]	; (8003c28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d10c      	bne.n	8003bf0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	40010000 	.word	0x40010000
 8003c14:	40000400 	.word	0x40000400
 8003c18:	40000800 	.word	0x40000800
 8003c1c:	40000c00 	.word	0x40000c00
 8003c20:	40010400 	.word	0x40010400
 8003c24:	40014000 	.word	0x40014000
 8003c28:	40001800 	.word	0x40001800

08003c2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e03f      	b.n	8003ce6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d106      	bne.n	8003c80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7fd fc0a 	bl	8001494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2224      	movs	r2, #36	; 0x24
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f829 	bl	8003cf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695a      	ldr	r2, [r3, #20]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68da      	ldr	r2, [r3, #12]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ccc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cf4:	b0c0      	sub	sp, #256	; 0x100
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d0c:	68d9      	ldr	r1, [r3, #12]
 8003d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	ea40 0301 	orr.w	r3, r0, r1
 8003d18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d48:	f021 010c 	bic.w	r1, r1, #12
 8003d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d56:	430b      	orrs	r3, r1
 8003d58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d6a:	6999      	ldr	r1, [r3, #24]
 8003d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	ea40 0301 	orr.w	r3, r0, r1
 8003d76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	4b8f      	ldr	r3, [pc, #572]	; (8003fbc <UART_SetConfig+0x2cc>)
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d005      	beq.n	8003d90 <UART_SetConfig+0xa0>
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	4b8d      	ldr	r3, [pc, #564]	; (8003fc0 <UART_SetConfig+0x2d0>)
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d104      	bne.n	8003d9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d90:	f7fe fb6c 	bl	800246c <HAL_RCC_GetPCLK2Freq>
 8003d94:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d98:	e003      	b.n	8003da2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d9a:	f7fe fb53 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 8003d9e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dac:	f040 810c 	bne.w	8003fc8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003db4:	2200      	movs	r2, #0
 8003db6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003dba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003dbe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003dc2:	4622      	mov	r2, r4
 8003dc4:	462b      	mov	r3, r5
 8003dc6:	1891      	adds	r1, r2, r2
 8003dc8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003dca:	415b      	adcs	r3, r3
 8003dcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003dd2:	4621      	mov	r1, r4
 8003dd4:	eb12 0801 	adds.w	r8, r2, r1
 8003dd8:	4629      	mov	r1, r5
 8003dda:	eb43 0901 	adc.w	r9, r3, r1
 8003dde:	f04f 0200 	mov.w	r2, #0
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003df2:	4690      	mov	r8, r2
 8003df4:	4699      	mov	r9, r3
 8003df6:	4623      	mov	r3, r4
 8003df8:	eb18 0303 	adds.w	r3, r8, r3
 8003dfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e00:	462b      	mov	r3, r5
 8003e02:	eb49 0303 	adc.w	r3, r9, r3
 8003e06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e1e:	460b      	mov	r3, r1
 8003e20:	18db      	adds	r3, r3, r3
 8003e22:	653b      	str	r3, [r7, #80]	; 0x50
 8003e24:	4613      	mov	r3, r2
 8003e26:	eb42 0303 	adc.w	r3, r2, r3
 8003e2a:	657b      	str	r3, [r7, #84]	; 0x54
 8003e2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e34:	f7fc f9e6 	bl	8000204 <__aeabi_uldivmod>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	4b61      	ldr	r3, [pc, #388]	; (8003fc4 <UART_SetConfig+0x2d4>)
 8003e3e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	011c      	lsls	r4, r3, #4
 8003e46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e50:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e58:	4642      	mov	r2, r8
 8003e5a:	464b      	mov	r3, r9
 8003e5c:	1891      	adds	r1, r2, r2
 8003e5e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e60:	415b      	adcs	r3, r3
 8003e62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e68:	4641      	mov	r1, r8
 8003e6a:	eb12 0a01 	adds.w	sl, r2, r1
 8003e6e:	4649      	mov	r1, r9
 8003e70:	eb43 0b01 	adc.w	fp, r3, r1
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e88:	4692      	mov	sl, r2
 8003e8a:	469b      	mov	fp, r3
 8003e8c:	4643      	mov	r3, r8
 8003e8e:	eb1a 0303 	adds.w	r3, sl, r3
 8003e92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e96:	464b      	mov	r3, r9
 8003e98:	eb4b 0303 	adc.w	r3, fp, r3
 8003e9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003eac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003eb0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	18db      	adds	r3, r3, r3
 8003eb8:	643b      	str	r3, [r7, #64]	; 0x40
 8003eba:	4613      	mov	r3, r2
 8003ebc:	eb42 0303 	adc.w	r3, r2, r3
 8003ec0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ec2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ec6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003eca:	f7fc f99b 	bl	8000204 <__aeabi_uldivmod>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	4b3b      	ldr	r3, [pc, #236]	; (8003fc4 <UART_SetConfig+0x2d4>)
 8003ed6:	fba3 2301 	umull	r2, r3, r3, r1
 8003eda:	095b      	lsrs	r3, r3, #5
 8003edc:	2264      	movs	r2, #100	; 0x64
 8003ede:	fb02 f303 	mul.w	r3, r2, r3
 8003ee2:	1acb      	subs	r3, r1, r3
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003eea:	4b36      	ldr	r3, [pc, #216]	; (8003fc4 <UART_SetConfig+0x2d4>)
 8003eec:	fba3 2302 	umull	r2, r3, r3, r2
 8003ef0:	095b      	lsrs	r3, r3, #5
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ef8:	441c      	add	r4, r3
 8003efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003efe:	2200      	movs	r2, #0
 8003f00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f04:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f0c:	4642      	mov	r2, r8
 8003f0e:	464b      	mov	r3, r9
 8003f10:	1891      	adds	r1, r2, r2
 8003f12:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f14:	415b      	adcs	r3, r3
 8003f16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f1c:	4641      	mov	r1, r8
 8003f1e:	1851      	adds	r1, r2, r1
 8003f20:	6339      	str	r1, [r7, #48]	; 0x30
 8003f22:	4649      	mov	r1, r9
 8003f24:	414b      	adcs	r3, r1
 8003f26:	637b      	str	r3, [r7, #52]	; 0x34
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	f04f 0300 	mov.w	r3, #0
 8003f30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f34:	4659      	mov	r1, fp
 8003f36:	00cb      	lsls	r3, r1, #3
 8003f38:	4651      	mov	r1, sl
 8003f3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f3e:	4651      	mov	r1, sl
 8003f40:	00ca      	lsls	r2, r1, #3
 8003f42:	4610      	mov	r0, r2
 8003f44:	4619      	mov	r1, r3
 8003f46:	4603      	mov	r3, r0
 8003f48:	4642      	mov	r2, r8
 8003f4a:	189b      	adds	r3, r3, r2
 8003f4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f50:	464b      	mov	r3, r9
 8003f52:	460a      	mov	r2, r1
 8003f54:	eb42 0303 	adc.w	r3, r2, r3
 8003f58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f68:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f70:	460b      	mov	r3, r1
 8003f72:	18db      	adds	r3, r3, r3
 8003f74:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f76:	4613      	mov	r3, r2
 8003f78:	eb42 0303 	adc.w	r3, r2, r3
 8003f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f86:	f7fc f93d 	bl	8000204 <__aeabi_uldivmod>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4b0d      	ldr	r3, [pc, #52]	; (8003fc4 <UART_SetConfig+0x2d4>)
 8003f90:	fba3 1302 	umull	r1, r3, r3, r2
 8003f94:	095b      	lsrs	r3, r3, #5
 8003f96:	2164      	movs	r1, #100	; 0x64
 8003f98:	fb01 f303 	mul.w	r3, r1, r3
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	3332      	adds	r3, #50	; 0x32
 8003fa2:	4a08      	ldr	r2, [pc, #32]	; (8003fc4 <UART_SetConfig+0x2d4>)
 8003fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa8:	095b      	lsrs	r3, r3, #5
 8003faa:	f003 0207 	and.w	r2, r3, #7
 8003fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4422      	add	r2, r4
 8003fb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fb8:	e105      	b.n	80041c6 <UART_SetConfig+0x4d6>
 8003fba:	bf00      	nop
 8003fbc:	40011000 	.word	0x40011000
 8003fc0:	40011400 	.word	0x40011400
 8003fc4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003fd2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003fd6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003fda:	4642      	mov	r2, r8
 8003fdc:	464b      	mov	r3, r9
 8003fde:	1891      	adds	r1, r2, r2
 8003fe0:	6239      	str	r1, [r7, #32]
 8003fe2:	415b      	adcs	r3, r3
 8003fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fe6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fea:	4641      	mov	r1, r8
 8003fec:	1854      	adds	r4, r2, r1
 8003fee:	4649      	mov	r1, r9
 8003ff0:	eb43 0501 	adc.w	r5, r3, r1
 8003ff4:	f04f 0200 	mov.w	r2, #0
 8003ff8:	f04f 0300 	mov.w	r3, #0
 8003ffc:	00eb      	lsls	r3, r5, #3
 8003ffe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004002:	00e2      	lsls	r2, r4, #3
 8004004:	4614      	mov	r4, r2
 8004006:	461d      	mov	r5, r3
 8004008:	4643      	mov	r3, r8
 800400a:	18e3      	adds	r3, r4, r3
 800400c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004010:	464b      	mov	r3, r9
 8004012:	eb45 0303 	adc.w	r3, r5, r3
 8004016:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800401a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004026:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800402a:	f04f 0200 	mov.w	r2, #0
 800402e:	f04f 0300 	mov.w	r3, #0
 8004032:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004036:	4629      	mov	r1, r5
 8004038:	008b      	lsls	r3, r1, #2
 800403a:	4621      	mov	r1, r4
 800403c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004040:	4621      	mov	r1, r4
 8004042:	008a      	lsls	r2, r1, #2
 8004044:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004048:	f7fc f8dc 	bl	8000204 <__aeabi_uldivmod>
 800404c:	4602      	mov	r2, r0
 800404e:	460b      	mov	r3, r1
 8004050:	4b60      	ldr	r3, [pc, #384]	; (80041d4 <UART_SetConfig+0x4e4>)
 8004052:	fba3 2302 	umull	r2, r3, r3, r2
 8004056:	095b      	lsrs	r3, r3, #5
 8004058:	011c      	lsls	r4, r3, #4
 800405a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800405e:	2200      	movs	r2, #0
 8004060:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004064:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004068:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800406c:	4642      	mov	r2, r8
 800406e:	464b      	mov	r3, r9
 8004070:	1891      	adds	r1, r2, r2
 8004072:	61b9      	str	r1, [r7, #24]
 8004074:	415b      	adcs	r3, r3
 8004076:	61fb      	str	r3, [r7, #28]
 8004078:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800407c:	4641      	mov	r1, r8
 800407e:	1851      	adds	r1, r2, r1
 8004080:	6139      	str	r1, [r7, #16]
 8004082:	4649      	mov	r1, r9
 8004084:	414b      	adcs	r3, r1
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	f04f 0200 	mov.w	r2, #0
 800408c:	f04f 0300 	mov.w	r3, #0
 8004090:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004094:	4659      	mov	r1, fp
 8004096:	00cb      	lsls	r3, r1, #3
 8004098:	4651      	mov	r1, sl
 800409a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800409e:	4651      	mov	r1, sl
 80040a0:	00ca      	lsls	r2, r1, #3
 80040a2:	4610      	mov	r0, r2
 80040a4:	4619      	mov	r1, r3
 80040a6:	4603      	mov	r3, r0
 80040a8:	4642      	mov	r2, r8
 80040aa:	189b      	adds	r3, r3, r2
 80040ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040b0:	464b      	mov	r3, r9
 80040b2:	460a      	mov	r2, r1
 80040b4:	eb42 0303 	adc.w	r3, r2, r3
 80040b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80040c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	f04f 0300 	mov.w	r3, #0
 80040d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80040d4:	4649      	mov	r1, r9
 80040d6:	008b      	lsls	r3, r1, #2
 80040d8:	4641      	mov	r1, r8
 80040da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040de:	4641      	mov	r1, r8
 80040e0:	008a      	lsls	r2, r1, #2
 80040e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80040e6:	f7fc f88d 	bl	8000204 <__aeabi_uldivmod>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	4b39      	ldr	r3, [pc, #228]	; (80041d4 <UART_SetConfig+0x4e4>)
 80040f0:	fba3 1302 	umull	r1, r3, r3, r2
 80040f4:	095b      	lsrs	r3, r3, #5
 80040f6:	2164      	movs	r1, #100	; 0x64
 80040f8:	fb01 f303 	mul.w	r3, r1, r3
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	011b      	lsls	r3, r3, #4
 8004100:	3332      	adds	r3, #50	; 0x32
 8004102:	4a34      	ldr	r2, [pc, #208]	; (80041d4 <UART_SetConfig+0x4e4>)
 8004104:	fba2 2303 	umull	r2, r3, r2, r3
 8004108:	095b      	lsrs	r3, r3, #5
 800410a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800410e:	441c      	add	r4, r3
 8004110:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004114:	2200      	movs	r2, #0
 8004116:	673b      	str	r3, [r7, #112]	; 0x70
 8004118:	677a      	str	r2, [r7, #116]	; 0x74
 800411a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800411e:	4642      	mov	r2, r8
 8004120:	464b      	mov	r3, r9
 8004122:	1891      	adds	r1, r2, r2
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	415b      	adcs	r3, r3
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800412e:	4641      	mov	r1, r8
 8004130:	1851      	adds	r1, r2, r1
 8004132:	6039      	str	r1, [r7, #0]
 8004134:	4649      	mov	r1, r9
 8004136:	414b      	adcs	r3, r1
 8004138:	607b      	str	r3, [r7, #4]
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004146:	4659      	mov	r1, fp
 8004148:	00cb      	lsls	r3, r1, #3
 800414a:	4651      	mov	r1, sl
 800414c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004150:	4651      	mov	r1, sl
 8004152:	00ca      	lsls	r2, r1, #3
 8004154:	4610      	mov	r0, r2
 8004156:	4619      	mov	r1, r3
 8004158:	4603      	mov	r3, r0
 800415a:	4642      	mov	r2, r8
 800415c:	189b      	adds	r3, r3, r2
 800415e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004160:	464b      	mov	r3, r9
 8004162:	460a      	mov	r2, r1
 8004164:	eb42 0303 	adc.w	r3, r2, r3
 8004168:	66fb      	str	r3, [r7, #108]	; 0x6c
 800416a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	663b      	str	r3, [r7, #96]	; 0x60
 8004174:	667a      	str	r2, [r7, #100]	; 0x64
 8004176:	f04f 0200 	mov.w	r2, #0
 800417a:	f04f 0300 	mov.w	r3, #0
 800417e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004182:	4649      	mov	r1, r9
 8004184:	008b      	lsls	r3, r1, #2
 8004186:	4641      	mov	r1, r8
 8004188:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800418c:	4641      	mov	r1, r8
 800418e:	008a      	lsls	r2, r1, #2
 8004190:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004194:	f7fc f836 	bl	8000204 <__aeabi_uldivmod>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4b0d      	ldr	r3, [pc, #52]	; (80041d4 <UART_SetConfig+0x4e4>)
 800419e:	fba3 1302 	umull	r1, r3, r3, r2
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	2164      	movs	r1, #100	; 0x64
 80041a6:	fb01 f303 	mul.w	r3, r1, r3
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	3332      	adds	r3, #50	; 0x32
 80041b0:	4a08      	ldr	r2, [pc, #32]	; (80041d4 <UART_SetConfig+0x4e4>)
 80041b2:	fba2 2303 	umull	r2, r3, r2, r3
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	f003 020f 	and.w	r2, r3, #15
 80041bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4422      	add	r2, r4
 80041c4:	609a      	str	r2, [r3, #8]
}
 80041c6:	bf00      	nop
 80041c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80041cc:	46bd      	mov	sp, r7
 80041ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041d2:	bf00      	nop
 80041d4:	51eb851f 	.word	0x51eb851f

080041d8 <__libc_init_array>:
 80041d8:	b570      	push	{r4, r5, r6, lr}
 80041da:	4d0d      	ldr	r5, [pc, #52]	; (8004210 <__libc_init_array+0x38>)
 80041dc:	4c0d      	ldr	r4, [pc, #52]	; (8004214 <__libc_init_array+0x3c>)
 80041de:	1b64      	subs	r4, r4, r5
 80041e0:	10a4      	asrs	r4, r4, #2
 80041e2:	2600      	movs	r6, #0
 80041e4:	42a6      	cmp	r6, r4
 80041e6:	d109      	bne.n	80041fc <__libc_init_array+0x24>
 80041e8:	4d0b      	ldr	r5, [pc, #44]	; (8004218 <__libc_init_array+0x40>)
 80041ea:	4c0c      	ldr	r4, [pc, #48]	; (800421c <__libc_init_array+0x44>)
 80041ec:	f000 f820 	bl	8004230 <_init>
 80041f0:	1b64      	subs	r4, r4, r5
 80041f2:	10a4      	asrs	r4, r4, #2
 80041f4:	2600      	movs	r6, #0
 80041f6:	42a6      	cmp	r6, r4
 80041f8:	d105      	bne.n	8004206 <__libc_init_array+0x2e>
 80041fa:	bd70      	pop	{r4, r5, r6, pc}
 80041fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004200:	4798      	blx	r3
 8004202:	3601      	adds	r6, #1
 8004204:	e7ee      	b.n	80041e4 <__libc_init_array+0xc>
 8004206:	f855 3b04 	ldr.w	r3, [r5], #4
 800420a:	4798      	blx	r3
 800420c:	3601      	adds	r6, #1
 800420e:	e7f2      	b.n	80041f6 <__libc_init_array+0x1e>
 8004210:	08004274 	.word	0x08004274
 8004214:	08004274 	.word	0x08004274
 8004218:	08004274 	.word	0x08004274
 800421c:	08004278 	.word	0x08004278

08004220 <memset>:
 8004220:	4402      	add	r2, r0
 8004222:	4603      	mov	r3, r0
 8004224:	4293      	cmp	r3, r2
 8004226:	d100      	bne.n	800422a <memset+0xa>
 8004228:	4770      	bx	lr
 800422a:	f803 1b01 	strb.w	r1, [r3], #1
 800422e:	e7f9      	b.n	8004224 <memset+0x4>

08004230 <_init>:
 8004230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004232:	bf00      	nop
 8004234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004236:	bc08      	pop	{r3}
 8004238:	469e      	mov	lr, r3
 800423a:	4770      	bx	lr

0800423c <_fini>:
 800423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423e:	bf00      	nop
 8004240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004242:	bc08      	pop	{r3}
 8004244:	469e      	mov	lr, r3
 8004246:	4770      	bx	lr
