
DisplayILI9488.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a38  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003bfc  08003bfc  00013bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c30  08003c30  00024a08  2**0
                  CONTENTS
  4 .ARM          00000008  08003c30  08003c30  00013c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c38  08003c38  00024a08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c38  08003c38  00013c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c3c  08003c3c  00013c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00004a08  20000000  08003c40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20004a08  08008648  00024a08  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b1c  08008648  00024b1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00024a08  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d39  00000000  00000000  00024a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002540  00000000  00000000  00035771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  00037cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  00038be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000220ab  00000000  00000000  000399e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b79  00000000  00000000  0005ba93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cee3a  00000000  00000000  0006e60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013d446  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e50  00000000  00000000  0013d498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20004a08 	.word	0x20004a08
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003be4 	.word	0x08003be4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20004a0c 	.word	0x20004a0c
 8000200:	08003be4 	.word	0x08003be4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <Button_Init>:
static button_t btn1;

/* List of button handles (order must match button_id_t enum) */
static button_t *button_list[BTN_CNT] = {&btn1};

void Button_Init(void) {
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
	btn1 = (button_t){
 800050e:	4b05      	ldr	r3, [pc, #20]	; (8000524 <Button_Init+0x1c>)
 8000510:	4a05      	ldr	r2, [pc, #20]	; (8000528 <Button_Init+0x20>)
 8000512:	ca07      	ldmia	r2, {r0, r1, r2}
 8000514:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.id = BTN_ID_1,
		.counter = 0,
		.port = B1_GPIO_Port,
		.pin = B1_Pin
	};
}
 8000518:	bf00      	nop
 800051a:	3714      	adds	r7, #20
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	20004a24 	.word	0x20004a24
 8000528:	08003bfc 	.word	0x08003bfc

0800052c <Button_PressedHandler>:

static void Button_PressedHandler(button_id_t id) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
	switch (id) {
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d103      	bne.n	8000544 <Button_PressedHandler+0x18>
		case BTN_ID_1:
			Led_Toggle(LED_ID_1);
 800053c:	2000      	movs	r0, #0
 800053e:	f000 fdb9 	bl	80010b4 <Led_Toggle>
			break;
 8000542:	e000      	b.n	8000546 <Button_PressedHandler+0x1a>
		default:
			break;
 8000544:	bf00      	nop
	}
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <Button_ReleasedHandler>:

static void Button_ReleasedHandler(button_id_t id) {
 800054e:	b480      	push	{r7}
 8000550:	b083      	sub	sp, #12
 8000552:	af00      	add	r7, sp, #0
 8000554:	4603      	mov	r3, r0
 8000556:	71fb      	strb	r3, [r7, #7]
	switch (id) {
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	2b00      	cmp	r3, #0
		case BTN_ID_1:
			break;
		default:
			break;
 800055c:	bf00      	nop
	}
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
	...

0800056c <Button_Debounce>:

void Button_Debounce(void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < BTN_CNT; i++) {
 8000572:	2300      	movs	r3, #0
 8000574:	73fb      	strb	r3, [r7, #15]
 8000576:	e03c      	b.n	80005f2 <Button_Debounce+0x86>
		// get next button to debounce
		button_t *btn = button_list[i];
 8000578:	7bfb      	ldrb	r3, [r7, #15]
 800057a:	4a22      	ldr	r2, [pc, #136]	; (8000604 <Button_Debounce+0x98>)
 800057c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000580:	60bb      	str	r3, [r7, #8]

		// Read current state of button
		bool pressed = !HAL_GPIO_ReadPin(btn->port, btn->pin);
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	685a      	ldr	r2, [r3, #4]
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	689b      	ldr	r3, [r3, #8]
 800058a:	b29b      	uxth	r3, r3
 800058c:	4619      	mov	r1, r3
 800058e:	4610      	mov	r0, r2
 8000590:	f001 faf4 	bl	8001b7c <HAL_GPIO_ReadPin>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	bf0c      	ite	eq
 800059a:	2301      	moveq	r3, #1
 800059c:	2300      	movne	r3, #0
 800059e:	71fb      	strb	r3, [r7, #7]

		if (!pressed) {
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	f083 0301 	eor.w	r3, r3, #1
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d00c      	beq.n	80005c6 <Button_Debounce+0x5a>
			// if button released then call callback function if it exists
			if (btn->counter == DEBOUNCE_TIME + 1) {
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	785b      	ldrb	r3, [r3, #1]
 80005b0:	2b15      	cmp	r3, #21
 80005b2:	d104      	bne.n	80005be <Button_Debounce+0x52>
				Button_PressedHandler(btn->id);
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff ffb7 	bl	800052c <Button_PressedHandler>
			}

			// button not pressed so reset counter
			btn->counter = 0;
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	2200      	movs	r2, #0
 80005c2:	705a      	strb	r2, [r3, #1]
 80005c4:	e012      	b.n	80005ec <Button_Debounce+0x80>
		} else {
			// do not allow counter to overflow
			if (btn->counter <= DEBOUNCE_TIME) {
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	785b      	ldrb	r3, [r3, #1]
 80005ca:	2b14      	cmp	r3, #20
 80005cc:	d80e      	bhi.n	80005ec <Button_Debounce+0x80>
				btn->counter++;
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	785b      	ldrb	r3, [r3, #1]
 80005d2:	3301      	adds	r3, #1
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	705a      	strb	r2, [r3, #1]
				// if counter reaches debounce time then register press
				if (btn->counter == DEBOUNCE_TIME) {
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	785b      	ldrb	r3, [r3, #1]
 80005de:	2b14      	cmp	r3, #20
 80005e0:	d104      	bne.n	80005ec <Button_Debounce+0x80>
					Button_ReleasedHandler(btn->id);
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff ffb1 	bl	800054e <Button_ReleasedHandler>
	for (uint8_t i = 0; i < BTN_CNT; i++) {
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	3301      	adds	r3, #1
 80005f0:	73fb      	strb	r3, [r7, #15]
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d0bf      	beq.n	8000578 <Button_Debounce+0xc>
				}
			}
		}
	}
}
 80005f8:	bf00      	nop
 80005fa:	bf00      	nop
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000000 	.word	0x20000000

08000608 <Display_Init>:

/* External reference to display SPI handle */
extern SPI_HandleTypeDef hspi2;

void Display_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	/* Hardware reset display */
	Display_HWReset();
 800060c:	f000 f824 	bl	8000658 <Display_HWReset>

	/* Software reset */
	Display_TransmitCmd(DISPLAY_SWRESET);
 8000610:	2001      	movs	r0, #1
 8000612:	f000 f837 	bl	8000684 <Display_TransmitCmd>
	HAL_Delay(250);
 8000616:	20fa      	movs	r0, #250	; 0xfa
 8000618:	f000 ffe6 	bl	80015e8 <HAL_Delay>

	/* Exit sleep mode */
	Display_TransmitCmd(DISPLAY_SLEEPOUT);
 800061c:	2011      	movs	r0, #17
 800061e:	f000 f831 	bl	8000684 <Display_TransmitCmd>
	HAL_Delay(100);
 8000622:	2064      	movs	r0, #100	; 0x64
 8000624:	f000 ffe0 	bl	80015e8 <HAL_Delay>

	/* 4-line serial interface mode control */
	Display_TransmitCmdParam(DISPLAY_INTMCTRL, 0x00);
 8000628:	2100      	movs	r1, #0
 800062a:	20b0      	movs	r0, #176	; 0xb0
 800062c:	f000 f86e 	bl	800070c <Display_TransmitCmdParam>

	/* 3-bit RGB interface pixel format */
	Display_TransmitCmdParam(DISPLAY_INTPXLFMT, 0x01);
 8000630:	2101      	movs	r1, #1
 8000632:	203a      	movs	r0, #58	; 0x3a
 8000634:	f000 f86a 	bl	800070c <Display_TransmitCmdParam>

	/* Memory access control sets scanning direction of frame memory */
	// was 0x08
	Display_TransmitCmdParam(DISPLAY_MEMACTRL, 0x08);
 8000638:	2108      	movs	r1, #8
 800063a:	2036      	movs	r0, #54	; 0x36
 800063c:	f000 f866 	bl	800070c <Display_TransmitCmdParam>

	/* TODO modify positive, negative, and digital gamma settings */

	/* Exit sleep mode */
	Display_TransmitCmd(DISPLAY_SLEEPOUT);
 8000640:	2011      	movs	r0, #17
 8000642:	f000 f81f 	bl	8000684 <Display_TransmitCmd>
	HAL_Delay(250);
 8000646:	20fa      	movs	r0, #250	; 0xfa
 8000648:	f000 ffce 	bl	80015e8 <HAL_Delay>

	/* Turn display on */
	Display_TransmitCmd(DISPLAY_DISPON);
 800064c:	2029      	movs	r0, #41	; 0x29
 800064e:	f000 f819 	bl	8000684 <Display_TransmitCmd>
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <Display_HWReset>:

void Display_HWReset(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	/* Hold RESET pin LOW with delay */
	HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	2101      	movs	r1, #1
 8000660:	4807      	ldr	r0, [pc, #28]	; (8000680 <Display_HWReset+0x28>)
 8000662:	f001 faa3 	bl	8001bac <HAL_GPIO_WritePin>
	HAL_Delay(DISPLAY_RESET_TIME_MS);
 8000666:	200a      	movs	r0, #10
 8000668:	f000 ffbe 	bl	80015e8 <HAL_Delay>

	/* Set RESET pin HIGH and wait for system reset to complete */
	HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	2101      	movs	r1, #1
 8000670:	4803      	ldr	r0, [pc, #12]	; (8000680 <Display_HWReset+0x28>)
 8000672:	f001 fa9b 	bl	8001bac <HAL_GPIO_WritePin>
	HAL_Delay(DISPLAY_RESET_TIME_MS);
 8000676:	200a      	movs	r0, #10
 8000678:	f000 ffb6 	bl	80015e8 <HAL_Delay>
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40020800 	.word	0x40020800

08000684 <Display_TransmitCmd>:

void Display_TransmitCmd(uint8_t cmd)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
	/* DC/RS LOW since writing command */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2101      	movs	r1, #1
 8000692:	480b      	ldr	r0, [pc, #44]	; (80006c0 <Display_TransmitCmd+0x3c>)
 8000694:	f001 fa8a 	bl	8001bac <HAL_GPIO_WritePin>

	/* Set CS LOW */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	2110      	movs	r1, #16
 800069c:	4808      	ldr	r0, [pc, #32]	; (80006c0 <Display_TransmitCmd+0x3c>)
 800069e:	f001 fa85 	bl	8001bac <HAL_GPIO_WritePin>

	/* Write SPI data */
	HAL_SPI_Transmit(&hspi2, &cmd, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80006a2:	1df9      	adds	r1, r7, #7
 80006a4:	2364      	movs	r3, #100	; 0x64
 80006a6:	2201      	movs	r2, #1
 80006a8:	4806      	ldr	r0, [pc, #24]	; (80006c4 <Display_TransmitCmd+0x40>)
 80006aa:	f002 f924 	bl	80028f6 <HAL_SPI_Transmit>

	/* Set CS HIGH */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	2110      	movs	r1, #16
 80006b2:	4803      	ldr	r0, [pc, #12]	; (80006c0 <Display_TransmitCmd+0x3c>)
 80006b4:	f001 fa7a 	bl	8001bac <HAL_GPIO_WritePin>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40020400 	.word	0x40020400
 80006c4:	20004a34 	.word	0x20004a34

080006c8 <Display_TransmitParam>:

void Display_TransmitParam(uint8_t param)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
	/* DC/RS HIGH since writing data */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	2101      	movs	r1, #1
 80006d6:	480b      	ldr	r0, [pc, #44]	; (8000704 <Display_TransmitParam+0x3c>)
 80006d8:	f001 fa68 	bl	8001bac <HAL_GPIO_WritePin>

	/* Set CS LOW */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	2110      	movs	r1, #16
 80006e0:	4808      	ldr	r0, [pc, #32]	; (8000704 <Display_TransmitParam+0x3c>)
 80006e2:	f001 fa63 	bl	8001bac <HAL_GPIO_WritePin>

	/* Write SPI data */
	HAL_SPI_Transmit(&hspi2, &param, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80006e6:	1df9      	adds	r1, r7, #7
 80006e8:	2364      	movs	r3, #100	; 0x64
 80006ea:	2201      	movs	r2, #1
 80006ec:	4806      	ldr	r0, [pc, #24]	; (8000708 <Display_TransmitParam+0x40>)
 80006ee:	f002 f902 	bl	80028f6 <HAL_SPI_Transmit>

	/* Set CS HIGH */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	2110      	movs	r1, #16
 80006f6:	4803      	ldr	r0, [pc, #12]	; (8000704 <Display_TransmitParam+0x3c>)
 80006f8:	f001 fa58 	bl	8001bac <HAL_GPIO_WritePin>
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40020400 	.word	0x40020400
 8000708:	20004a34 	.word	0x20004a34

0800070c <Display_TransmitCmdParam>:

void Display_TransmitCmdParam(uint8_t cmd, uint8_t param)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	460a      	mov	r2, r1
 8000716:	71fb      	strb	r3, [r7, #7]
 8000718:	4613      	mov	r3, r2
 800071a:	71bb      	strb	r3, [r7, #6]
	/* Send command */
	Display_TransmitCmd(cmd);
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ffb0 	bl	8000684 <Display_TransmitCmd>

	/* Send parameter */
	Display_TransmitParam(param);
 8000724:	79bb      	ldrb	r3, [r7, #6]
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ffce 	bl	80006c8 <Display_TransmitParam>
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <Display_SetWindow>:

void Display_SetWindow(uint16_t xs, uint16_t ys, uint16_t xe, uint16_t ye)
{
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	4604      	mov	r4, r0
 800073c:	4608      	mov	r0, r1
 800073e:	4611      	mov	r1, r2
 8000740:	461a      	mov	r2, r3
 8000742:	4623      	mov	r3, r4
 8000744:	80fb      	strh	r3, [r7, #6]
 8000746:	4603      	mov	r3, r0
 8000748:	80bb      	strh	r3, [r7, #4]
 800074a:	460b      	mov	r3, r1
 800074c:	807b      	strh	r3, [r7, #2]
 800074e:	4613      	mov	r3, r2
 8000750:	803b      	strh	r3, [r7, #0]
	/* Check coordinate are not out of range */
	if ((xs > xe) || (xe > DISPLAY_MAX_X) || (ys > ye) || (ye > DISPLAY_MAX_Y)) {
 8000752:	88fa      	ldrh	r2, [r7, #6]
 8000754:	887b      	ldrh	r3, [r7, #2]
 8000756:	429a      	cmp	r2, r3
 8000758:	f200 808b 	bhi.w	8000872 <Display_SetWindow+0x13e>
 800075c:	887b      	ldrh	r3, [r7, #2]
 800075e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000762:	f080 8086 	bcs.w	8000872 <Display_SetWindow+0x13e>
 8000766:	88ba      	ldrh	r2, [r7, #4]
 8000768:	883b      	ldrh	r3, [r7, #0]
 800076a:	429a      	cmp	r2, r3
 800076c:	f200 8081 	bhi.w	8000872 <Display_SetWindow+0x13e>
 8000770:	883b      	ldrh	r3, [r7, #0]
 8000772:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000776:	d27c      	bcs.n	8000872 <Display_SetWindow+0x13e>
		/* Error so do nothing */
		return;
	}

	/* Set column range */
	Display_TransmitCmd(DISPLAY_COLADDRSET);
 8000778:	202a      	movs	r0, #42	; 0x2a
 800077a:	f7ff ff83 	bl	8000684 <Display_TransmitCmd>

	/* Set DC/RS LOW since transmitting date */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_SET);
 800077e:	2201      	movs	r2, #1
 8000780:	2101      	movs	r1, #1
 8000782:	483e      	ldr	r0, [pc, #248]	; (800087c <Display_SetWindow+0x148>)
 8000784:	f001 fa12 	bl	8001bac <HAL_GPIO_WritePin>

	/* Hold CS LOW until all parameters have been sent */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	2110      	movs	r1, #16
 800078c:	483b      	ldr	r0, [pc, #236]	; (800087c <Display_SetWindow+0x148>)
 800078e:	f001 fa0d 	bl	8001bac <HAL_GPIO_WritePin>

	/* Write column start and end data */
	uint8_t byte = ys >> 8;	// SC[15:8]
 8000792:	88bb      	ldrh	r3, [r7, #4]
 8000794:	0a1b      	lsrs	r3, r3, #8
 8000796:	b29b      	uxth	r3, r3
 8000798:	b2db      	uxtb	r3, r3
 800079a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 800079c:	f107 010f 	add.w	r1, r7, #15
 80007a0:	2364      	movs	r3, #100	; 0x64
 80007a2:	2201      	movs	r2, #1
 80007a4:	4836      	ldr	r0, [pc, #216]	; (8000880 <Display_SetWindow+0x14c>)
 80007a6:	f002 f8a6 	bl	80028f6 <HAL_SPI_Transmit>
	byte = ys & 0xFF;		// SC[7:0]
 80007aa:	88bb      	ldrh	r3, [r7, #4]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80007b0:	f107 010f 	add.w	r1, r7, #15
 80007b4:	2364      	movs	r3, #100	; 0x64
 80007b6:	2201      	movs	r2, #1
 80007b8:	4831      	ldr	r0, [pc, #196]	; (8000880 <Display_SetWindow+0x14c>)
 80007ba:	f002 f89c 	bl	80028f6 <HAL_SPI_Transmit>
	byte = ye >> 8;			// EC[15:8]
 80007be:	883b      	ldrh	r3, [r7, #0]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80007c8:	f107 010f 	add.w	r1, r7, #15
 80007cc:	2364      	movs	r3, #100	; 0x64
 80007ce:	2201      	movs	r2, #1
 80007d0:	482b      	ldr	r0, [pc, #172]	; (8000880 <Display_SetWindow+0x14c>)
 80007d2:	f002 f890 	bl	80028f6 <HAL_SPI_Transmit>
	byte = ye & 0xFF;		// EC[7:0]
 80007d6:	883b      	ldrh	r3, [r7, #0]
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80007dc:	f107 010f 	add.w	r1, r7, #15
 80007e0:	2364      	movs	r3, #100	; 0x64
 80007e2:	2201      	movs	r2, #1
 80007e4:	4826      	ldr	r0, [pc, #152]	; (8000880 <Display_SetWindow+0x14c>)
 80007e6:	f002 f886 	bl	80028f6 <HAL_SPI_Transmit>

	/* Last parameter sent so end transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80007ea:	2201      	movs	r2, #1
 80007ec:	2110      	movs	r1, #16
 80007ee:	4823      	ldr	r0, [pc, #140]	; (800087c <Display_SetWindow+0x148>)
 80007f0:	f001 f9dc 	bl	8001bac <HAL_GPIO_WritePin>

	/* Set page range */
	Display_TransmitCmd(DISPLAY_PGADDRSET);
 80007f4:	202b      	movs	r0, #43	; 0x2b
 80007f6:	f7ff ff45 	bl	8000684 <Display_TransmitCmd>

	/* Set DC/RS LOW since transmitting date */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2101      	movs	r1, #1
 80007fe:	481f      	ldr	r0, [pc, #124]	; (800087c <Display_SetWindow+0x148>)
 8000800:	f001 f9d4 	bl	8001bac <HAL_GPIO_WritePin>

	/* Begin multi-parameter transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2110      	movs	r1, #16
 8000808:	481c      	ldr	r0, [pc, #112]	; (800087c <Display_SetWindow+0x148>)
 800080a:	f001 f9cf 	bl	8001bac <HAL_GPIO_WritePin>

	/* Write page start and end data */
	byte = xs >> 8;		// SP[15:8]
 800080e:	88fb      	ldrh	r3, [r7, #6]
 8000810:	0a1b      	lsrs	r3, r3, #8
 8000812:	b29b      	uxth	r3, r3
 8000814:	b2db      	uxtb	r3, r3
 8000816:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 8000818:	f107 010f 	add.w	r1, r7, #15
 800081c:	2364      	movs	r3, #100	; 0x64
 800081e:	2201      	movs	r2, #1
 8000820:	4817      	ldr	r0, [pc, #92]	; (8000880 <Display_SetWindow+0x14c>)
 8000822:	f002 f868 	bl	80028f6 <HAL_SPI_Transmit>
	byte = xs & 0xFF;	// SP[7:0]
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 800082c:	f107 010f 	add.w	r1, r7, #15
 8000830:	2364      	movs	r3, #100	; 0x64
 8000832:	2201      	movs	r2, #1
 8000834:	4812      	ldr	r0, [pc, #72]	; (8000880 <Display_SetWindow+0x14c>)
 8000836:	f002 f85e 	bl	80028f6 <HAL_SPI_Transmit>
	byte = xe >> 8;		// EP[15:8]
 800083a:	887b      	ldrh	r3, [r7, #2]
 800083c:	0a1b      	lsrs	r3, r3, #8
 800083e:	b29b      	uxth	r3, r3
 8000840:	b2db      	uxtb	r3, r3
 8000842:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 8000844:	f107 010f 	add.w	r1, r7, #15
 8000848:	2364      	movs	r3, #100	; 0x64
 800084a:	2201      	movs	r2, #1
 800084c:	480c      	ldr	r0, [pc, #48]	; (8000880 <Display_SetWindow+0x14c>)
 800084e:	f002 f852 	bl	80028f6 <HAL_SPI_Transmit>
	byte = xe & 0xFF;	// EP[7:0]
 8000852:	887b      	ldrh	r3, [r7, #2]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 8000858:	f107 010f 	add.w	r1, r7, #15
 800085c:	2364      	movs	r3, #100	; 0x64
 800085e:	2201      	movs	r2, #1
 8000860:	4807      	ldr	r0, [pc, #28]	; (8000880 <Display_SetWindow+0x14c>)
 8000862:	f002 f848 	bl	80028f6 <HAL_SPI_Transmit>

	/* Last parameter sent so end transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000866:	2201      	movs	r2, #1
 8000868:	2110      	movs	r1, #16
 800086a:	4804      	ldr	r0, [pc, #16]	; (800087c <Display_SetWindow+0x148>)
 800086c:	f001 f99e 	bl	8001bac <HAL_GPIO_WritePin>
 8000870:	e000      	b.n	8000874 <Display_SetWindow+0x140>
		return;
 8000872:	bf00      	nop
}
 8000874:	3714      	adds	r7, #20
 8000876:	46bd      	mov	sp, r7
 8000878:	bd90      	pop	{r4, r7, pc}
 800087a:	bf00      	nop
 800087c:	40020400 	.word	0x40020400
 8000880:	20004a34 	.word	0x20004a34

08000884 <Display_SendColor>:


void Display_SendColor(uint32_t npixels, uint8_t color) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	460b      	mov	r3, r1
 800088e:	70fb      	strb	r3, [r7, #3]
	/* Set up writing to frame buffer */
	Display_TransmitCmd(DISPLAY_MEMWR);
 8000890:	202c      	movs	r0, #44	; 0x2c
 8000892:	f7ff fef7 	bl	8000684 <Display_TransmitCmd>

	/* Set up sending data to display */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_SET);
 8000896:	2201      	movs	r2, #1
 8000898:	2101      	movs	r1, #1
 800089a:	4815      	ldr	r0, [pc, #84]	; (80008f0 <Display_SendColor+0x6c>)
 800089c:	f001 f986 	bl	8001bac <HAL_GPIO_WritePin>

	/* Set CS LOW to begin transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2110      	movs	r1, #16
 80008a4:	4812      	ldr	r0, [pc, #72]	; (80008f0 <Display_SendColor+0x6c>)
 80008a6:	f001 f981 	bl	8001bac <HAL_GPIO_WritePin>

	/* If odd number of pixels pad a data byte to fill byte */
	if (npixels % 2 != 0) {
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d002      	beq.n	80008ba <Display_SendColor+0x36>
		npixels++;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3301      	adds	r3, #1
 80008b8:	607b      	str	r3, [r7, #4]
	}

	/* 2 pixel data stored per byte, so divide npixels by 2 */
	for (uint32_t i = 0; i < npixels / 2; i++) {
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	e008      	b.n	80008d2 <Display_SendColor+0x4e>
		HAL_SPI_Transmit(&hspi2, &color, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80008c0:	1cf9      	adds	r1, r7, #3
 80008c2:	2364      	movs	r3, #100	; 0x64
 80008c4:	2201      	movs	r2, #1
 80008c6:	480b      	ldr	r0, [pc, #44]	; (80008f4 <Display_SendColor+0x70>)
 80008c8:	f002 f815 	bl	80028f6 <HAL_SPI_Transmit>
	for (uint32_t i = 0; i < npixels / 2; i++) {
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	3301      	adds	r3, #1
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d3f1      	bcc.n	80008c0 <Display_SendColor+0x3c>
	}

	/* Set CS HIGH to end transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	2110      	movs	r1, #16
 80008e0:	4803      	ldr	r0, [pc, #12]	; (80008f0 <Display_SendColor+0x6c>)
 80008e2:	f001 f963 	bl	8001bac <HAL_GPIO_WritePin>
}
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40020400 	.word	0x40020400
 80008f4:	20004a34 	.word	0x20004a34

080008f8 <Display_SendData>:

void Display_SendData(uint32_t data_len, uint8_t *data) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]

	/* Set up writing to frame buffer */
	Display_TransmitCmd(DISPLAY_MEMWR);
 8000902:	202c      	movs	r0, #44	; 0x2c
 8000904:	f7ff febe 	bl	8000684 <Display_TransmitCmd>

	/* Set up sending data to display */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_SET);
 8000908:	2201      	movs	r2, #1
 800090a:	2101      	movs	r1, #1
 800090c:	4811      	ldr	r0, [pc, #68]	; (8000954 <Display_SendData+0x5c>)
 800090e:	f001 f94d 	bl	8001bac <HAL_GPIO_WritePin>

	/* Set CS LOW to begin transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2110      	movs	r1, #16
 8000916:	480f      	ldr	r0, [pc, #60]	; (8000954 <Display_SendData+0x5c>)
 8000918:	f001 f948 	bl	8001bac <HAL_GPIO_WritePin>

	for (uint32_t i = 0; i < data_len; i++) {
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	e00a      	b.n	8000938 <Display_SendData+0x40>
		HAL_SPI_Transmit(&hspi2, &(data[i]), sizeof(uint8_t), SPI_TIMEOUT_MS);
 8000922:	683a      	ldr	r2, [r7, #0]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	18d1      	adds	r1, r2, r3
 8000928:	2364      	movs	r3, #100	; 0x64
 800092a:	2201      	movs	r2, #1
 800092c:	480a      	ldr	r0, [pc, #40]	; (8000958 <Display_SendData+0x60>)
 800092e:	f001 ffe2 	bl	80028f6 <HAL_SPI_Transmit>
	for (uint32_t i = 0; i < data_len; i++) {
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	3301      	adds	r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fa      	ldr	r2, [r7, #12]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	429a      	cmp	r2, r3
 800093e:	d3f0      	bcc.n	8000922 <Display_SendData+0x2a>
	}

	/* Set CS HIGH to end transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000940:	2201      	movs	r2, #1
 8000942:	2110      	movs	r1, #16
 8000944:	4803      	ldr	r0, [pc, #12]	; (8000954 <Display_SendData+0x5c>)
 8000946:	f001 f931 	bl	8001bac <HAL_GPIO_WritePin>
}
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40020400 	.word	0x40020400
 8000958:	20004a34 	.word	0x20004a34

0800095c <Gfx_Init>:
	0b1110000, // 7
	0b1111111, // 8
	0b1110011  // 9
};

void Gfx_Init(void) {
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	Gfx_SetBackground(COLOR_BLACK);
 8000960:	2000      	movs	r0, #0
 8000962:	f000 f803 	bl	800096c <Gfx_SetBackground>
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <Gfx_SetBackground>:

void Gfx_SetBackground(uint8_t color) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af02      	add	r7, sp, #8
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
	background_color = color;
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <Gfx_SetBackground+0x2c>)
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	7013      	strb	r3, [r2, #0]
	Gfx_DrawRect(0, 0, DISPLAY_SIZE_X, DISPLAY_SIZE_Y, color);
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000984:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000988:	2100      	movs	r1, #0
 800098a:	2000      	movs	r0, #0
 800098c:	f000 f806 	bl	800099c <Gfx_DrawRect>
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20004a30 	.word	0x20004a30

0800099c <Gfx_DrawRect>:

void Gfx_DrawRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t color) {
 800099c:	b590      	push	{r4, r7, lr}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4604      	mov	r4, r0
 80009a4:	4608      	mov	r0, r1
 80009a6:	4611      	mov	r1, r2
 80009a8:	461a      	mov	r2, r3
 80009aa:	4623      	mov	r3, r4
 80009ac:	80fb      	strh	r3, [r7, #6]
 80009ae:	4603      	mov	r3, r0
 80009b0:	80bb      	strh	r3, [r7, #4]
 80009b2:	460b      	mov	r3, r1
 80009b4:	807b      	strh	r3, [r7, #2]
 80009b6:	4613      	mov	r3, r2
 80009b8:	803b      	strh	r3, [r7, #0]
	/* Set window of rectangle */
	Display_SetWindow(x, y, x + w - 1, y + h - 1);
 80009ba:	88fa      	ldrh	r2, [r7, #6]
 80009bc:	887b      	ldrh	r3, [r7, #2]
 80009be:	4413      	add	r3, r2
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	3b01      	subs	r3, #1
 80009c4:	b29c      	uxth	r4, r3
 80009c6:	88ba      	ldrh	r2, [r7, #4]
 80009c8:	883b      	ldrh	r3, [r7, #0]
 80009ca:	4413      	add	r3, r2
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	3b01      	subs	r3, #1
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	88b9      	ldrh	r1, [r7, #4]
 80009d4:	88f8      	ldrh	r0, [r7, #6]
 80009d6:	4622      	mov	r2, r4
 80009d8:	f7ff feac 	bl	8000734 <Display_SetWindow>

	/* Send pixel data */
	Display_SendColor(w * h, color);
 80009dc:	887b      	ldrh	r3, [r7, #2]
 80009de:	883a      	ldrh	r2, [r7, #0]
 80009e0:	fb02 f303 	mul.w	r3, r2, r3
 80009e4:	461a      	mov	r2, r3
 80009e6:	7e3b      	ldrb	r3, [r7, #24]
 80009e8:	4619      	mov	r1, r3
 80009ea:	4610      	mov	r0, r2
 80009ec:	f7ff ff4a 	bl	8000884 <Display_SendColor>
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd90      	pop	{r4, r7, pc}

080009f8 <Gfx_DrawDigit>:

void Gfx_DrawDigit(uint16_t x, uint16_t y, uint8_t digit, uint8_t font_height, uint8_t color) {
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b087      	sub	sp, #28
 80009fc:	af02      	add	r7, sp, #8
 80009fe:	4604      	mov	r4, r0
 8000a00:	4608      	mov	r0, r1
 8000a02:	4611      	mov	r1, r2
 8000a04:	461a      	mov	r2, r3
 8000a06:	4623      	mov	r3, r4
 8000a08:	80fb      	strh	r3, [r7, #6]
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	80bb      	strh	r3, [r7, #4]
 8000a0e:	460b      	mov	r3, r1
 8000a10:	70fb      	strb	r3, [r7, #3]
 8000a12:	4613      	mov	r3, r2
 8000a14:	70bb      	strb	r3, [r7, #2]

	/* Digits 0-9 will map directly to display that digit, -1 will delete the digit */
	if (digit != (uint8_t)(-1) && (digit < 0 || digit > 9)) {
 8000a16:	78fb      	ldrb	r3, [r7, #3]
 8000a18:	2bff      	cmp	r3, #255	; 0xff
 8000a1a:	d003      	beq.n	8000a24 <Gfx_DrawDigit+0x2c>
 8000a1c:	78fb      	ldrb	r3, [r7, #3]
 8000a1e:	2b09      	cmp	r3, #9
 8000a20:	f200 8102 	bhi.w	8000c28 <Gfx_DrawDigit+0x230>
		// Do nothing if digit is not a valid value
		return;
	}

	/* thickness of each segment */
	uint8_t thickness = font_height / 10;
 8000a24:	78bb      	ldrb	r3, [r7, #2]
 8000a26:	4a82      	ldr	r2, [pc, #520]	; (8000c30 <Gfx_DrawDigit+0x238>)
 8000a28:	fba2 2303 	umull	r2, r3, r2, r3
 8000a2c:	08db      	lsrs	r3, r3, #3
 8000a2e:	73fb      	strb	r3, [r7, #15]

	/* length of each segment */
	uint8_t seg_len = (font_height - (thickness * 2)) / 2;
 8000a30:	78ba      	ldrb	r2, [r7, #2]
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	0fda      	lsrs	r2, r3, #31
 8000a3a:	4413      	add	r3, r2
 8000a3c:	105b      	asrs	r3, r3, #1
 8000a3e:	73bb      	strb	r3, [r7, #14]

	/* for small fonts make the segments slightly thicker */
	if (font_height < 40) {
 8000a40:	78bb      	ldrb	r3, [r7, #2]
 8000a42:	2b27      	cmp	r3, #39	; 0x27
 8000a44:	d802      	bhi.n	8000a4c <Gfx_DrawDigit+0x54>
		thickness += 2;
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
 8000a48:	3302      	adds	r3, #2
 8000a4a:	73fb      	strb	r3, [r7, #15]
	}

	/* Get abcdefg pattern for digit (or zero if digit == -1)*/
	uint8_t pattern = (digit == (uint8_t)(-1)) ? 0 : digit_patterns[digit];
 8000a4c:	78fb      	ldrb	r3, [r7, #3]
 8000a4e:	2bff      	cmp	r3, #255	; 0xff
 8000a50:	d003      	beq.n	8000a5a <Gfx_DrawDigit+0x62>
 8000a52:	78fb      	ldrb	r3, [r7, #3]
 8000a54:	4a77      	ldr	r2, [pc, #476]	; (8000c34 <Gfx_DrawDigit+0x23c>)
 8000a56:	5cd3      	ldrb	r3, [r2, r3]
 8000a58:	e000      	b.n	8000a5c <Gfx_DrawDigit+0x64>
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	737b      	strb	r3, [r7, #13]
	/* Active segments are set to color */
	/* Inactive segments are set to background color */
	uint8_t new_color;

	// a
	new_color = ((pattern & SEG_A_MASK) ? color : background_color);
 8000a5e:	7b7b      	ldrb	r3, [r7, #13]
 8000a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d002      	beq.n	8000a6e <Gfx_DrawDigit+0x76>
 8000a68:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a6c:	e001      	b.n	8000a72 <Gfx_DrawDigit+0x7a>
 8000a6e:	4b72      	ldr	r3, [pc, #456]	; (8000c38 <Gfx_DrawDigit+0x240>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	733b      	strb	r3, [r7, #12]
	Gfx_DrawRect(x+thickness, y, seg_len, thickness, new_color);
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	88fb      	ldrh	r3, [r7, #6]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	b298      	uxth	r0, r3
 8000a7e:	7bbb      	ldrb	r3, [r7, #14]
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
 8000a84:	b29c      	uxth	r4, r3
 8000a86:	88b9      	ldrh	r1, [r7, #4]
 8000a88:	7b3b      	ldrb	r3, [r7, #12]
 8000a8a:	9300      	str	r3, [sp, #0]
 8000a8c:	4623      	mov	r3, r4
 8000a8e:	f7ff ff85 	bl	800099c <Gfx_DrawRect>

	// b
	new_color = ((pattern & SEG_B_MASK) ? color : background_color);
 8000a92:	7b7b      	ldrb	r3, [r7, #13]
 8000a94:	f003 0320 	and.w	r3, r3, #32
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d002      	beq.n	8000aa2 <Gfx_DrawDigit+0xaa>
 8000a9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000aa0:	e001      	b.n	8000aa6 <Gfx_DrawDigit+0xae>
 8000aa2:	4b65      	ldr	r3, [pc, #404]	; (8000c38 <Gfx_DrawDigit+0x240>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	733b      	strb	r3, [r7, #12]
	Gfx_DrawRect(x+seg_len+thickness, y+thickness, thickness, seg_len, new_color);
 8000aa8:	7bbb      	ldrb	r3, [r7, #14]
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	88fb      	ldrh	r3, [r7, #6]
 8000aae:	4413      	add	r3, r2
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	4413      	add	r3, r2
 8000ab8:	b298      	uxth	r0, r3
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
 8000abc:	b29a      	uxth	r2, r3
 8000abe:	88bb      	ldrh	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	b299      	uxth	r1, r3
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	7bbb      	ldrb	r3, [r7, #14]
 8000aca:	b29c      	uxth	r4, r3
 8000acc:	7b3b      	ldrb	r3, [r7, #12]
 8000ace:	9300      	str	r3, [sp, #0]
 8000ad0:	4623      	mov	r3, r4
 8000ad2:	f7ff ff63 	bl	800099c <Gfx_DrawRect>

	// c
	new_color = ((pattern & SEG_C_MASK) ? color : background_color);
 8000ad6:	7b7b      	ldrb	r3, [r7, #13]
 8000ad8:	f003 0310 	and.w	r3, r3, #16
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d002      	beq.n	8000ae6 <Gfx_DrawDigit+0xee>
 8000ae0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ae4:	e001      	b.n	8000aea <Gfx_DrawDigit+0xf2>
 8000ae6:	4b54      	ldr	r3, [pc, #336]	; (8000c38 <Gfx_DrawDigit+0x240>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	733b      	strb	r3, [r7, #12]
	Gfx_DrawRect(x+seg_len+thickness, y+(2*thickness)+seg_len, thickness, seg_len, new_color);
 8000aec:	7bbb      	ldrb	r3, [r7, #14]
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	88fb      	ldrh	r3, [r7, #6]
 8000af2:	4413      	add	r3, r2
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	4413      	add	r3, r2
 8000afc:	b298      	uxth	r0, r3
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	88bb      	ldrh	r3, [r7, #4]
 8000b08:	4413      	add	r3, r2
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	7bbb      	ldrb	r3, [r7, #14]
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	4413      	add	r3, r2
 8000b12:	b299      	uxth	r1, r3
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	7bbb      	ldrb	r3, [r7, #14]
 8000b1a:	b29c      	uxth	r4, r3
 8000b1c:	7b3b      	ldrb	r3, [r7, #12]
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	4623      	mov	r3, r4
 8000b22:	f7ff ff3b 	bl	800099c <Gfx_DrawRect>

	// d
	new_color = ((pattern & SEG_D_MASK) ? color : background_color);
 8000b26:	7b7b      	ldrb	r3, [r7, #13]
 8000b28:	f003 0308 	and.w	r3, r3, #8
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d002      	beq.n	8000b36 <Gfx_DrawDigit+0x13e>
 8000b30:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b34:	e001      	b.n	8000b3a <Gfx_DrawDigit+0x142>
 8000b36:	4b40      	ldr	r3, [pc, #256]	; (8000c38 <Gfx_DrawDigit+0x240>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	733b      	strb	r3, [r7, #12]
	Gfx_DrawRect(x+thickness, y+(2*thickness)+(2*seg_len), seg_len, thickness, new_color);
 8000b3c:	7bfb      	ldrb	r3, [r7, #15]
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	88fb      	ldrh	r3, [r7, #6]
 8000b42:	4413      	add	r3, r2
 8000b44:	b298      	uxth	r0, r3
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	7bbb      	ldrb	r3, [r7, #14]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	4413      	add	r3, r2
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	88bb      	ldrh	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	b299      	uxth	r1, r3
 8000b5c:	7bbb      	ldrb	r3, [r7, #14]
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	b29c      	uxth	r4, r3
 8000b64:	7b3b      	ldrb	r3, [r7, #12]
 8000b66:	9300      	str	r3, [sp, #0]
 8000b68:	4623      	mov	r3, r4
 8000b6a:	f7ff ff17 	bl	800099c <Gfx_DrawRect>

	// e
	new_color = ((pattern & SEG_E_MASK) ? color : background_color);
 8000b6e:	7b7b      	ldrb	r3, [r7, #13]
 8000b70:	f003 0304 	and.w	r3, r3, #4
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d002      	beq.n	8000b7e <Gfx_DrawDigit+0x186>
 8000b78:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b7c:	e001      	b.n	8000b82 <Gfx_DrawDigit+0x18a>
 8000b7e:	4b2e      	ldr	r3, [pc, #184]	; (8000c38 <Gfx_DrawDigit+0x240>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	733b      	strb	r3, [r7, #12]
	Gfx_DrawRect(x, y+(2*thickness)+seg_len, thickness, seg_len, new_color);
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	88bb      	ldrh	r3, [r7, #4]
 8000b8e:	4413      	add	r3, r2
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	7bbb      	ldrb	r3, [r7, #14]
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	4413      	add	r3, r2
 8000b98:	b299      	uxth	r1, r3
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	7bbb      	ldrb	r3, [r7, #14]
 8000ba0:	b29c      	uxth	r4, r3
 8000ba2:	88f8      	ldrh	r0, [r7, #6]
 8000ba4:	7b3b      	ldrb	r3, [r7, #12]
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	4623      	mov	r3, r4
 8000baa:	f7ff fef7 	bl	800099c <Gfx_DrawRect>

	// f
	new_color = ((pattern & SEG_F_MASK) ? color : background_color);
 8000bae:	7b7b      	ldrb	r3, [r7, #13]
 8000bb0:	f003 0302 	and.w	r3, r3, #2
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d002      	beq.n	8000bbe <Gfx_DrawDigit+0x1c6>
 8000bb8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bbc:	e001      	b.n	8000bc2 <Gfx_DrawDigit+0x1ca>
 8000bbe:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <Gfx_DrawDigit+0x240>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	733b      	strb	r3, [r7, #12]
	Gfx_DrawRect(x, y+thickness, thickness, seg_len, new_color);
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	88bb      	ldrh	r3, [r7, #4]
 8000bca:	4413      	add	r3, r2
 8000bcc:	b299      	uxth	r1, r3
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	7bbb      	ldrb	r3, [r7, #14]
 8000bd4:	b29c      	uxth	r4, r3
 8000bd6:	88f8      	ldrh	r0, [r7, #6]
 8000bd8:	7b3b      	ldrb	r3, [r7, #12]
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	4623      	mov	r3, r4
 8000bde:	f7ff fedd 	bl	800099c <Gfx_DrawRect>

	// g
	new_color = ((pattern & SEG_G_MASK) ? color : background_color);
 8000be2:	7b7b      	ldrb	r3, [r7, #13]
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d002      	beq.n	8000bf2 <Gfx_DrawDigit+0x1fa>
 8000bec:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bf0:	e001      	b.n	8000bf6 <Gfx_DrawDigit+0x1fe>
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <Gfx_DrawDigit+0x240>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	733b      	strb	r3, [r7, #12]
	Gfx_DrawRect(x+thickness, y+thickness+seg_len, seg_len, thickness, new_color);
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	4413      	add	r3, r2
 8000c00:	b298      	uxth	r0, r3
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
 8000c04:	b29a      	uxth	r2, r3
 8000c06:	88bb      	ldrh	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	7bbb      	ldrb	r3, [r7, #14]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	4413      	add	r3, r2
 8000c12:	b299      	uxth	r1, r3
 8000c14:	7bbb      	ldrb	r3, [r7, #14]
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	b29c      	uxth	r4, r3
 8000c1c:	7b3b      	ldrb	r3, [r7, #12]
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	4623      	mov	r3, r4
 8000c22:	f7ff febb 	bl	800099c <Gfx_DrawRect>
 8000c26:	e000      	b.n	8000c2a <Gfx_DrawDigit+0x232>
		return;
 8000c28:	bf00      	nop
}
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd90      	pop	{r4, r7, pc}
 8000c30:	cccccccd 	.word	0xcccccccd
 8000c34:	20000004 	.word	0x20000004
 8000c38:	20004a30 	.word	0x20004a30

08000c3c <Gfx_DrawImage>:

void Gfx_DrawImage(image_t *img) {
 8000c3c:	b590      	push	{r4, r7, lr}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	/* Set window to display image */
	Display_SetWindow(img->x, img->y, img->x + img->w -1, img->y + img->h - 1);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	8818      	ldrh	r0, [r3, #0]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	8859      	ldrh	r1, [r3, #2]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	881a      	ldrh	r2, [r3, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	889b      	ldrh	r3, [r3, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	b29c      	uxth	r4, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	885a      	ldrh	r2, [r3, #2]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	88db      	ldrh	r3, [r3, #6]
 8000c64:	4413      	add	r3, r2
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	4622      	mov	r2, r4
 8000c6e:	f7ff fd61 	bl	8000734 <Display_SetWindow>

	/* Send image data */
	Display_SendData(img->data_len, img->data);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	68da      	ldr	r2, [r3, #12]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4610      	mov	r0, r2
 8000c7e:	f7ff fe3b 	bl	80008f8 <Display_SendData>
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd90      	pop	{r4, r7, pc}
	...

08000c8c <Gfx_DeleteImage>:

void Gfx_DeleteImage(image_t *img) {
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af02      	add	r7, sp, #8
 8000c92:	6078      	str	r0, [r7, #4]
	/* Set window of image */
	Display_SetWindow(img->x, img->y, img->x + img->w -1, img->y + img->h - 1);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	8818      	ldrh	r0, [r3, #0]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	8859      	ldrh	r1, [r3, #2]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	881a      	ldrh	r2, [r3, #0]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	889b      	ldrh	r3, [r3, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	b29c      	uxth	r4, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	885a      	ldrh	r2, [r3, #2]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	88db      	ldrh	r3, [r3, #6]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	4622      	mov	r2, r4
 8000cbe:	f7ff fd39 	bl	8000734 <Display_SetWindow>

	/* Draw background color to delete image */
	Gfx_DrawRect(img->x, img->y, img->w, img->h, background_color);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	8818      	ldrh	r0, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	8859      	ldrh	r1, [r3, #2]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	889a      	ldrh	r2, [r3, #4]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	88dc      	ldrh	r4, [r3, #6]
 8000cd2:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <Gfx_DeleteImage+0x5c>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	4623      	mov	r3, r4
 8000cda:	f7ff fe5f 	bl	800099c <Gfx_DrawRect>

}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd90      	pop	{r4, r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20004a30 	.word	0x20004a30

08000cec <SystemClock_Config>:
SPI_HandleTypeDef hspi2;	// spi interface to control display
UART_HandleTypeDef huart2;	// uart interface for debugging
TIM_HandleTypeDef htim3;	// timer interface for button debouncing

void SystemClock_Config(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b094      	sub	sp, #80	; 0x50
 8000cf0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	2234      	movs	r2, #52	; 0x34
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f002 ff6a 	bl	8003bd4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d00:	f107 0308 	add.w	r3, r7, #8
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]

	/* Configure the main internal regulator output voltage */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000d10:	2300      	movs	r3, #0
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	4b2a      	ldr	r3, [pc, #168]	; (8000dc0 <SystemClock_Config+0xd4>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d18:	4a29      	ldr	r2, [pc, #164]	; (8000dc0 <SystemClock_Config+0xd4>)
 8000d1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d20:	4b27      	ldr	r3, [pc, #156]	; (8000dc0 <SystemClock_Config+0xd4>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	4b24      	ldr	r3, [pc, #144]	; (8000dc4 <SystemClock_Config+0xd8>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d38:	4a22      	ldr	r2, [pc, #136]	; (8000dc4 <SystemClock_Config+0xd8>)
 8000d3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d3e:	6013      	str	r3, [r2, #0]
 8000d40:	4b20      	ldr	r3, [pc, #128]	; (8000dc4 <SystemClock_Config+0xd8>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d48:	603b      	str	r3, [r7, #0]
 8000d4a:	683b      	ldr	r3, [r7, #0]

	/* Initialize the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d50:	2301      	movs	r3, #1
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d54:	2310      	movs	r3, #16
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000d60:	2310      	movs	r3, #16
 8000d62:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000d64:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d68:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d6a:	2304      	movs	r3, #4
 8000d6c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000d72:	2302      	movs	r3, #2
 8000d74:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f001 fa94 	bl	80022a8 <HAL_RCC_OscConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <SystemClock_Config+0x9e>
		Error_Handler();
 8000d86:	f000 f963 	bl	8001050 <Error_Handler>
	}

	/* Initializes the CPU, AHB and APB buses clocks */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d8a:	230f      	movs	r3, #15
 8000d8c:	60bb      	str	r3, [r7, #8]
							  	  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d9a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000da0:	f107 0308 	add.w	r3, r7, #8
 8000da4:	2102      	movs	r1, #2
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 ff34 	bl	8001c14 <HAL_RCC_ClockConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <SystemClock_Config+0xca>
		Error_Handler();
 8000db2:	f000 f94d 	bl	8001050 <Error_Handler>
	}
}
 8000db6:	bf00      	nop
 8000db8:	3750      	adds	r7, #80	; 0x50
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40007000 	.word	0x40007000

08000dc8 <MX_SPI2_Init>:


void MX_SPI2_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000dcc:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <MX_SPI2_Init+0x64>)
 8000dce:	4a18      	ldr	r2, [pc, #96]	; (8000e30 <MX_SPI2_Init+0x68>)
 8000dd0:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000dd2:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <MX_SPI2_Init+0x64>)
 8000dd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dd8:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000dda:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <MX_SPI2_Init+0x64>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <MX_SPI2_Init+0x64>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <MX_SPI2_Init+0x64>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <MX_SPI2_Init+0x64>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <MX_SPI2_Init+0x64>)
 8000df4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000df8:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <MX_SPI2_Init+0x64>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e00:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <MX_SPI2_Init+0x64>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <MX_SPI2_Init+0x64>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e0c:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <MX_SPI2_Init+0x64>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_SPI2_Init+0x64>)
 8000e14:	220a      	movs	r2, #10
 8000e16:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000e18:	4804      	ldr	r0, [pc, #16]	; (8000e2c <MX_SPI2_Init+0x64>)
 8000e1a:	f001 fce3 	bl	80027e4 <HAL_SPI_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_SPI2_Init+0x60>
		Error_Handler();
 8000e24:	f000 f914 	bl	8001050 <Error_Handler>
	}
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20004a34 	.word	0x20004a34
 8000e30:	40003800 	.word	0x40003800

08000e34 <MX_USART2_UART_Init>:


void MX_USART2_UART_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	/* USART2 parameter configuration */
	huart2.Instance = USART2;
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e3a:	4a12      	ldr	r2, [pc, #72]	; (8000e84 <MX_USART2_UART_Init+0x50>)
 8000e3c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e44:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e6c:	f002 fbcc 	bl	8003608 <HAL_UART_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000e76:	f000 f8eb 	bl	8001050 <Error_Handler>
	}
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20004a8c 	.word	0x20004a8c
 8000e84:	40004400 	.word	0x40004400

08000e88 <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	4b40      	ldr	r3, [pc, #256]	; (8000fa4 <MX_GPIO_Init+0x11c>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a3f      	ldr	r2, [pc, #252]	; (8000fa4 <MX_GPIO_Init+0x11c>)
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b3d      	ldr	r3, [pc, #244]	; (8000fa4 <MX_GPIO_Init+0x11c>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0304 	and.w	r3, r3, #4
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	4b39      	ldr	r3, [pc, #228]	; (8000fa4 <MX_GPIO_Init+0x11c>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a38      	ldr	r2, [pc, #224]	; (8000fa4 <MX_GPIO_Init+0x11c>)
 8000ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b36      	ldr	r3, [pc, #216]	; (8000fa4 <MX_GPIO_Init+0x11c>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	4b32      	ldr	r3, [pc, #200]	; (8000fa4 <MX_GPIO_Init+0x11c>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a31      	ldr	r2, [pc, #196]	; (8000fa4 <MX_GPIO_Init+0x11c>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b2f      	ldr	r3, [pc, #188]	; (8000fa4 <MX_GPIO_Init+0x11c>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	4b2b      	ldr	r3, [pc, #172]	; (8000fa4 <MX_GPIO_Init+0x11c>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a2a      	ldr	r2, [pc, #168]	; (8000fa4 <MX_GPIO_Init+0x11c>)
 8000efc:	f043 0302 	orr.w	r3, r3, #2
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b28      	ldr	r3, [pc, #160]	; (8000fa4 <MX_GPIO_Init+0x11c>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]

	/* Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2101      	movs	r1, #1
 8000f12:	4825      	ldr	r0, [pc, #148]	; (8000fa8 <MX_GPIO_Init+0x120>)
 8000f14:	f000 fe4a 	bl	8001bac <HAL_GPIO_WritePin>

	/* Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2120      	movs	r1, #32
 8000f1c:	4823      	ldr	r0, [pc, #140]	; (8000fac <MX_GPIO_Init+0x124>)
 8000f1e:	f000 fe45 	bl	8001bac <HAL_GPIO_WritePin>

	/* Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, SPI_DCRS_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2111      	movs	r1, #17
 8000f26:	4822      	ldr	r0, [pc, #136]	; (8000fb0 <MX_GPIO_Init+0x128>)
 8000f28:	f000 fe40 	bl	8001bac <HAL_GPIO_WritePin>

	/* Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000f2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f30:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f32:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f36:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4619      	mov	r1, r3
 8000f42:	4819      	ldr	r0, [pc, #100]	; (8000fa8 <MX_GPIO_Init+0x120>)
 8000f44:	f000 fc86 	bl	8001854 <HAL_GPIO_Init>

	/* Configure GPIO pin : SPI_RESET_Pin */
	GPIO_InitStruct.Pin = SPI_RESET_Pin;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI_RESET_GPIO_Port, &GPIO_InitStruct);
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4812      	ldr	r0, [pc, #72]	; (8000fa8 <MX_GPIO_Init+0x120>)
 8000f60:	f000 fc78 	bl	8001854 <HAL_GPIO_Init>

	/* Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000f64:	2320      	movs	r3, #32
 8000f66:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480c      	ldr	r0, [pc, #48]	; (8000fac <MX_GPIO_Init+0x124>)
 8000f7c:	f000 fc6a 	bl	8001854 <HAL_GPIO_Init>

	/* Configure GPIO pins : SPI_DCRS_Pin SPI_CS_Pin */
	GPIO_InitStruct.Pin = SPI_DCRS_Pin|SPI_CS_Pin;
 8000f80:	2311      	movs	r3, #17
 8000f82:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f84:	2301      	movs	r3, #1
 8000f86:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	4619      	mov	r1, r3
 8000f96:	4806      	ldr	r0, [pc, #24]	; (8000fb0 <MX_GPIO_Init+0x128>)
 8000f98:	f000 fc5c 	bl	8001854 <HAL_GPIO_Init>
}
 8000f9c:	bf00      	nop
 8000f9e:	3728      	adds	r7, #40	; 0x28
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40020800 	.word	0x40020800
 8000fac:	40020000 	.word	0x40020000
 8000fb0:	40020400 	.word	0x40020400

08000fb4 <MX_TIM3_Init>:

void MX_TIM3_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fba:	f107 0308 	add.w	r3, r7, #8
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc8:	463b      	mov	r3, r7
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]

  /* Initialize timer to generate interrupt every 1 milliseconds */
  htim3.Instance = TIM3;
 8000fd0:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <MX_TIM3_Init+0x94>)
 8000fd2:	4a1e      	ldr	r2, [pc, #120]	; (800104c <MX_TIM3_Init+0x98>)
 8000fd4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <MX_TIM3_Init+0x94>)
 8000fd8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fdc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fde:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <MX_TIM3_Init+0x94>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 83;
 8000fe4:	4b18      	ldr	r3, [pc, #96]	; (8001048 <MX_TIM3_Init+0x94>)
 8000fe6:	2253      	movs	r2, #83	; 0x53
 8000fe8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <MX_TIM3_Init+0x94>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <MX_TIM3_Init+0x94>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ff6:	4814      	ldr	r0, [pc, #80]	; (8001048 <MX_TIM3_Init+0x94>)
 8000ff8:	f001 fe84 	bl	8002d04 <HAL_TIM_Base_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001002:	f000 f825 	bl	8001050 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800100c:	f107 0308 	add.w	r3, r7, #8
 8001010:	4619      	mov	r1, r3
 8001012:	480d      	ldr	r0, [pc, #52]	; (8001048 <MX_TIM3_Init+0x94>)
 8001014:	f002 f83e 	bl	8003094 <HAL_TIM_ConfigClockSource>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800101e:	f000 f817 	bl	8001050 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001022:	2300      	movs	r3, #0
 8001024:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800102a:	463b      	mov	r3, r7
 800102c:	4619      	mov	r1, r3
 800102e:	4806      	ldr	r0, [pc, #24]	; (8001048 <MX_TIM3_Init+0x94>)
 8001030:	f002 fa5a 	bl	80034e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800103a:	f000 f809 	bl	8001050 <Error_Handler>
  }
}
 800103e:	bf00      	nop
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20004ad0 	.word	0x20004ad0
 800104c:	40000400 	.word	0x40000400

08001050 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * Auto-generated by CubeIDE.
  */
void Error_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001054:	b672      	cpsid	i
}
 8001056:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001058:	e7fe      	b.n	8001058 <Error_Handler+0x8>

0800105a <Led_Init>:
 */

#include "led.h"
#include "main.h"

void Led_Init(void) {
 800105a:	b580      	push	{r7, lr}
 800105c:	af00      	add	r7, sp, #0
	Led_Off(LED_ID_1);
 800105e:	2000      	movs	r0, #0
 8001060:	f000 f808 	bl	8001074 <Led_Off>
	Led_Off(LED_ID_2);
 8001064:	2001      	movs	r0, #1
 8001066:	f000 f805 	bl	8001074 <Led_Off>
	Led_Off(LED_ID_3);
 800106a:	2002      	movs	r0, #2
 800106c:	f000 f802 	bl	8001074 <Led_Off>
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <Led_Off>:
		default:
			break;
	}
}

void Led_Off(led_id_t led_id) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
	switch (led_id) {
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	2b02      	cmp	r3, #2
 8001082:	d00c      	beq.n	800109e <Led_Off+0x2a>
 8001084:	2b02      	cmp	r3, #2
 8001086:	dc0c      	bgt.n	80010a2 <Led_Off+0x2e>
 8001088:	2b00      	cmp	r3, #0
 800108a:	d002      	beq.n	8001092 <Led_Off+0x1e>
 800108c:	2b01      	cmp	r3, #1
 800108e:	d00a      	beq.n	80010a6 <Led_Off+0x32>
			break;
		case LED_ID_3:
			// TODO turn led off
			break;
		default:
			break;
 8001090:	e007      	b.n	80010a2 <Led_Off+0x2e>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	2120      	movs	r1, #32
 8001096:	4806      	ldr	r0, [pc, #24]	; (80010b0 <Led_Off+0x3c>)
 8001098:	f000 fd88 	bl	8001bac <HAL_GPIO_WritePin>
			break;
 800109c:	e004      	b.n	80010a8 <Led_Off+0x34>
			break;
 800109e:	bf00      	nop
 80010a0:	e002      	b.n	80010a8 <Led_Off+0x34>
			break;
 80010a2:	bf00      	nop
 80010a4:	e000      	b.n	80010a8 <Led_Off+0x34>
			break;
 80010a6:	bf00      	nop
	}
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40020000 	.word	0x40020000

080010b4 <Led_Toggle>:

void Led_Toggle(led_id_t led_id) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
	switch (led_id) {
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d00b      	beq.n	80010dc <Led_Toggle+0x28>
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	dc0b      	bgt.n	80010e0 <Led_Toggle+0x2c>
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <Led_Toggle+0x1e>
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d009      	beq.n	80010e4 <Led_Toggle+0x30>
			break;
		case LED_ID_3:
			// TODO toggle LED
			break;
		default:
			break;
 80010d0:	e006      	b.n	80010e0 <Led_Toggle+0x2c>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80010d2:	2120      	movs	r1, #32
 80010d4:	4806      	ldr	r0, [pc, #24]	; (80010f0 <Led_Toggle+0x3c>)
 80010d6:	f000 fd82 	bl	8001bde <HAL_GPIO_TogglePin>
			break;
 80010da:	e004      	b.n	80010e6 <Led_Toggle+0x32>
			break;
 80010dc:	bf00      	nop
 80010de:	e002      	b.n	80010e6 <Led_Toggle+0x32>
			break;
 80010e0:	bf00      	nop
 80010e2:	e000      	b.n	80010e6 <Led_Toggle+0x32>
			break;
 80010e4:	bf00      	nop
	}
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40020000 	.word	0x40020000

080010f4 <main>:
#include "gfx.h"
#include "img.h"
#include "timer.h"

int main(void)
{
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b089      	sub	sp, #36	; 0x24
 80010f8:	af02      	add	r7, sp, #8
	/* Reset of all peripherals, initializes the flash interface and the systick */
	HAL_Init();
 80010fa:	f000 fa03 	bl	8001504 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80010fe:	f7ff fdf5 	bl	8000cec <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001102:	f7ff fec1 	bl	8000e88 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001106:	f7ff fe95 	bl	8000e34 <MX_USART2_UART_Init>
	MX_SPI2_Init();
 800110a:	f7ff fe5d 	bl	8000dc8 <MX_SPI2_Init>
	MX_TIM3_Init();
 800110e:	f7ff ff51 	bl	8000fb4 <MX_TIM3_Init>

	/* Turn off all LEDs */
	Led_Init();
 8001112:	f7ff ffa2 	bl	800105a <Led_Init>

	/* Reset button controllers */
	Button_Init();
 8001116:	f7ff f9f7 	bl	8000508 <Button_Init>

	/* Initialize display */
	Display_Init();
 800111a:	f7ff fa75 	bl	8000608 <Display_Init>

	/* Initialize graphics unit */
	Gfx_Init();
 800111e:	f7ff fc1d 	bl	800095c <Gfx_Init>

	/* Get reference to Caltech Racing Logo image*/
	extern uint8_t caltech_racing_logo_img[];
	image_t team_logo_img = {
 8001122:	4b2a      	ldr	r3, [pc, #168]	; (80011cc <main+0xd8>)
 8001124:	1d3c      	adds	r4, r7, #4
 8001126:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001128:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			.data = caltech_racing_logo_img,
			.data_len = CALTECH_RACING_LOGO_IMG_LEN
	};

	/* Start interrupts from timer */
	Timer_EnableInterrupts();
 800112c:	f000 f9a6 	bl	800147c <Timer_EnableInterrupts>

	/* Infinite main loop */
	while (1)
	{
		/* Show team logo */
		Gfx_SetBackground(COLOR_BLACK);
 8001130:	2000      	movs	r0, #0
 8001132:	f7ff fc1b 	bl	800096c <Gfx_SetBackground>
		Gfx_DrawImage(&team_logo_img);
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff fd7f 	bl	8000c3c <Gfx_DrawImage>
		HAL_Delay(2000);
 800113e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001142:	f000 fa51 	bl	80015e8 <HAL_Delay>
		Gfx_DeleteImage(&team_logo_img);
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fd9f 	bl	8000c8c <Gfx_DeleteImage>

		/* Count from 0 -9 */
		for (uint8_t count = 0; count < 10; count++) {
 800114e:	2300      	movs	r3, #0
 8001150:	75fb      	strb	r3, [r7, #23]
 8001152:	e037      	b.n	80011c4 <main+0xd0>
			Gfx_DrawDigit( 10, 40, count,  20, COLOR_RED);
 8001154:	7dfa      	ldrb	r2, [r7, #23]
 8001156:	2324      	movs	r3, #36	; 0x24
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2314      	movs	r3, #20
 800115c:	2128      	movs	r1, #40	; 0x28
 800115e:	200a      	movs	r0, #10
 8001160:	f7ff fc4a 	bl	80009f8 <Gfx_DrawDigit>
			Gfx_DrawDigit( 40, 40, count,  35, COLOR_PINK);
 8001164:	7dfa      	ldrb	r2, [r7, #23]
 8001166:	232d      	movs	r3, #45	; 0x2d
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2323      	movs	r3, #35	; 0x23
 800116c:	2128      	movs	r1, #40	; 0x28
 800116e:	2028      	movs	r0, #40	; 0x28
 8001170:	f7ff fc42 	bl	80009f8 <Gfx_DrawDigit>
			Gfx_DrawDigit( 80, 40, count,  50, COLOR_YELLOW);
 8001174:	7dfa      	ldrb	r2, [r7, #23]
 8001176:	2336      	movs	r3, #54	; 0x36
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2332      	movs	r3, #50	; 0x32
 800117c:	2128      	movs	r1, #40	; 0x28
 800117e:	2050      	movs	r0, #80	; 0x50
 8001180:	f7ff fc3a 	bl	80009f8 <Gfx_DrawDigit>
			Gfx_DrawDigit(140, 40, count,  80, COLOR_GREEN);
 8001184:	7dfa      	ldrb	r2, [r7, #23]
 8001186:	2312      	movs	r3, #18
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2350      	movs	r3, #80	; 0x50
 800118c:	2128      	movs	r1, #40	; 0x28
 800118e:	208c      	movs	r0, #140	; 0x8c
 8001190:	f7ff fc32 	bl	80009f8 <Gfx_DrawDigit>
			Gfx_DrawDigit(220, 40, count, 120, COLOR_CYAN);
 8001194:	7dfa      	ldrb	r2, [r7, #23]
 8001196:	231a      	movs	r3, #26
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2378      	movs	r3, #120	; 0x78
 800119c:	2128      	movs	r1, #40	; 0x28
 800119e:	20dc      	movs	r0, #220	; 0xdc
 80011a0:	f7ff fc2a 	bl	80009f8 <Gfx_DrawDigit>
			Gfx_DrawDigit(320, 40, count, 200, COLOR_BLUE);
 80011a4:	7dfa      	ldrb	r2, [r7, #23]
 80011a6:	2309      	movs	r3, #9
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	23c8      	movs	r3, #200	; 0xc8
 80011ac:	2128      	movs	r1, #40	; 0x28
 80011ae:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80011b2:	f7ff fc21 	bl	80009f8 <Gfx_DrawDigit>
			HAL_Delay(500);
 80011b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011ba:	f000 fa15 	bl	80015e8 <HAL_Delay>
		for (uint8_t count = 0; count < 10; count++) {
 80011be:	7dfb      	ldrb	r3, [r7, #23]
 80011c0:	3301      	adds	r3, #1
 80011c2:	75fb      	strb	r3, [r7, #23]
 80011c4:	7dfb      	ldrb	r3, [r7, #23]
 80011c6:	2b09      	cmp	r3, #9
 80011c8:	d9c4      	bls.n	8001154 <main+0x60>
		Gfx_SetBackground(COLOR_BLACK);
 80011ca:	e7b1      	b.n	8001130 <main+0x3c>
 80011cc:	08003c08 	.word	0x08003c08

080011d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <HAL_MspInit+0x4c>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	4a0f      	ldr	r2, [pc, #60]	; (800121c <HAL_MspInit+0x4c>)
 80011e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e4:	6453      	str	r3, [r2, #68]	; 0x44
 80011e6:	4b0d      	ldr	r3, [pc, #52]	; (800121c <HAL_MspInit+0x4c>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <HAL_MspInit+0x4c>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	4a08      	ldr	r2, [pc, #32]	; (800121c <HAL_MspInit+0x4c>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001200:	6413      	str	r3, [r2, #64]	; 0x40
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_MspInit+0x4c>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800120e:	2007      	movs	r0, #7
 8001210:	f000 fade 	bl	80017d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40023800 	.word	0x40023800

08001220 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a30      	ldr	r2, [pc, #192]	; (8001300 <HAL_SPI_MspInit+0xe0>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d15a      	bne.n	80012f8 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b2f      	ldr	r3, [pc, #188]	; (8001304 <HAL_SPI_MspInit+0xe4>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	4a2e      	ldr	r2, [pc, #184]	; (8001304 <HAL_SPI_MspInit+0xe4>)
 800124c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001250:	6413      	str	r3, [r2, #64]	; 0x40
 8001252:	4b2c      	ldr	r3, [pc, #176]	; (8001304 <HAL_SPI_MspInit+0xe4>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b28      	ldr	r3, [pc, #160]	; (8001304 <HAL_SPI_MspInit+0xe4>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a27      	ldr	r2, [pc, #156]	; (8001304 <HAL_SPI_MspInit+0xe4>)
 8001268:	f043 0304 	orr.w	r3, r3, #4
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b25      	ldr	r3, [pc, #148]	; (8001304 <HAL_SPI_MspInit+0xe4>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	4b21      	ldr	r3, [pc, #132]	; (8001304 <HAL_SPI_MspInit+0xe4>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a20      	ldr	r2, [pc, #128]	; (8001304 <HAL_SPI_MspInit+0xe4>)
 8001284:	f043 0302 	orr.w	r3, r3, #2
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <HAL_SPI_MspInit+0xe4>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001296:	2302      	movs	r3, #2
 8001298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a2:	2303      	movs	r3, #3
 80012a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80012a6:	2307      	movs	r3, #7
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	4815      	ldr	r0, [pc, #84]	; (8001308 <HAL_SPI_MspInit+0xe8>)
 80012b2:	f000 facf 	bl	8001854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012b6:	2304      	movs	r3, #4
 80012b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c2:	2303      	movs	r3, #3
 80012c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012c6:	2305      	movs	r3, #5
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	480d      	ldr	r0, [pc, #52]	; (8001308 <HAL_SPI_MspInit+0xe8>)
 80012d2:	f000 fabf 	bl	8001854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e4:	2303      	movs	r3, #3
 80012e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012e8:	2305      	movs	r3, #5
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4619      	mov	r1, r3
 80012f2:	4806      	ldr	r0, [pc, #24]	; (800130c <HAL_SPI_MspInit+0xec>)
 80012f4:	f000 faae 	bl	8001854 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012f8:	bf00      	nop
 80012fa:	3728      	adds	r7, #40	; 0x28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40003800 	.word	0x40003800
 8001304:	40023800 	.word	0x40023800
 8001308:	40020800 	.word	0x40020800
 800130c:	40020400 	.word	0x40020400

08001310 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a0e      	ldr	r2, [pc, #56]	; (8001358 <HAL_TIM_Base_MspInit+0x48>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d115      	bne.n	800134e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b0d      	ldr	r3, [pc, #52]	; (800135c <HAL_TIM_Base_MspInit+0x4c>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	4a0c      	ldr	r2, [pc, #48]	; (800135c <HAL_TIM_Base_MspInit+0x4c>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	6413      	str	r3, [r2, #64]	; 0x40
 8001332:	4b0a      	ldr	r3, [pc, #40]	; (800135c <HAL_TIM_Base_MspInit+0x4c>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800133e:	2200      	movs	r2, #0
 8001340:	2100      	movs	r1, #0
 8001342:	201d      	movs	r0, #29
 8001344:	f000 fa4f 	bl	80017e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001348:	201d      	movs	r0, #29
 800134a:	f000 fa68 	bl	800181e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40000400 	.word	0x40000400
 800135c:	40023800 	.word	0x40023800

08001360 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a19      	ldr	r2, [pc, #100]	; (80013e4 <HAL_UART_MspInit+0x84>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d12b      	bne.n	80013da <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <HAL_UART_MspInit+0x88>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	4a17      	ldr	r2, [pc, #92]	; (80013e8 <HAL_UART_MspInit+0x88>)
 800138c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001390:	6413      	str	r3, [r2, #64]	; 0x40
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <HAL_UART_MspInit+0x88>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_UART_MspInit+0x88>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a10      	ldr	r2, [pc, #64]	; (80013e8 <HAL_UART_MspInit+0x88>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_UART_MspInit+0x88>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013ba:	230c      	movs	r3, #12
 80013bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ca:	2307      	movs	r3, #7
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	; (80013ec <HAL_UART_MspInit+0x8c>)
 80013d6:	f000 fa3d 	bl	8001854 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013da:	bf00      	nop
 80013dc:	3728      	adds	r7, #40	; 0x28
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40004400 	.word	0x40004400
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020000 	.word	0x40020000

080013f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <NMI_Handler+0x4>

080013f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <HardFault_Handler+0x4>

080013fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <MemManage_Handler+0x4>

08001402 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <BusFault_Handler+0x4>

08001408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800140c:	e7fe      	b.n	800140c <UsageFault_Handler+0x4>

0800140e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800143c:	f000 f8b4 	bl	80015a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}

08001444 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim3);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <TIM3_IRQHandler+0x10>)
 800144a:	f001 fd1b 	bl	8002e84 <HAL_TIM_IRQHandler>
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20004ad0 	.word	0x20004ad0

08001458 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <SystemInit+0x20>)
 800145e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001462:	4a05      	ldr	r2, [pc, #20]	; (8001478 <SystemInit+0x20>)
 8001464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <Timer_EnableInterrupts>:
#include "button.h"
#include "stm32f4xx_hal.h"

extern TIM_HandleTypeDef htim3;

void Timer_EnableInterrupts(void) {
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim3);
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <Timer_EnableInterrupts+0x10>)
 8001482:	f001 fc8f 	bl	8002da4 <HAL_TIM_Base_Start_IT>
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20004ad0 	.word	0x20004ad0

08001490 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a04      	ldr	r2, [pc, #16]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d101      	bne.n	80014a4 <HAL_TIM_PeriodElapsedCallback+0x14>
		// Should be called every 1ms
		Button_Debounce();
 80014a0:	f7ff f864 	bl	800056c <Button_Debounce>
	}
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20004ad0 	.word	0x20004ad0

080014b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014b4:	480d      	ldr	r0, [pc, #52]	; (80014ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014b6:	490e      	ldr	r1, [pc, #56]	; (80014f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014b8:	4a0e      	ldr	r2, [pc, #56]	; (80014f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014bc:	e002      	b.n	80014c4 <LoopCopyDataInit>

080014be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c2:	3304      	adds	r3, #4

080014c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c8:	d3f9      	bcc.n	80014be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ca:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014cc:	4c0b      	ldr	r4, [pc, #44]	; (80014fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80014ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d0:	e001      	b.n	80014d6 <LoopFillZerobss>

080014d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d4:	3204      	adds	r2, #4

080014d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d8:	d3fb      	bcc.n	80014d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014da:	f7ff ffbd 	bl	8001458 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014de:	f002 fb55 	bl	8003b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014e2:	f7ff fe07 	bl	80010f4 <main>
  bx  lr    
 80014e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f0:	20004a08 	.word	0x20004a08
  ldr r2, =_sidata
 80014f4:	08003c40 	.word	0x08003c40
  ldr r2, =_sbss
 80014f8:	20004a08 	.word	0x20004a08
  ldr r4, =_ebss
 80014fc:	20004b1c 	.word	0x20004b1c

08001500 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001500:	e7fe      	b.n	8001500 <ADC_IRQHandler>
	...

08001504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001508:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <HAL_Init+0x40>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0d      	ldr	r2, [pc, #52]	; (8001544 <HAL_Init+0x40>)
 800150e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001514:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_Init+0x40>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <HAL_Init+0x40>)
 800151a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800151e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <HAL_Init+0x40>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a07      	ldr	r2, [pc, #28]	; (8001544 <HAL_Init+0x40>)
 8001526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800152a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800152c:	2003      	movs	r0, #3
 800152e:	f000 f94f 	bl	80017d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001532:	2000      	movs	r0, #0
 8001534:	f000 f808 	bl	8001548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001538:	f7ff fe4a 	bl	80011d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40023c00 	.word	0x40023c00

08001548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <HAL_InitTick+0x54>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_InitTick+0x58>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	4619      	mov	r1, r3
 800155a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001562:	fbb2 f3f3 	udiv	r3, r2, r3
 8001566:	4618      	mov	r0, r3
 8001568:	f000 f967 	bl	800183a <HAL_SYSTICK_Config>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e00e      	b.n	8001594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b0f      	cmp	r3, #15
 800157a:	d80a      	bhi.n	8001592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800157c:	2200      	movs	r2, #0
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	f000 f92f 	bl	80017e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001588:	4a06      	ldr	r2, [pc, #24]	; (80015a4 <HAL_InitTick+0x5c>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	e000      	b.n	8001594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	200049fc 	.word	0x200049fc
 80015a0:	20004a04 	.word	0x20004a04
 80015a4:	20004a00 	.word	0x20004a00

080015a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_IncTick+0x20>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_IncTick+0x24>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	4a04      	ldr	r2, [pc, #16]	; (80015cc <HAL_IncTick+0x24>)
 80015ba:	6013      	str	r3, [r2, #0]
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20004a04 	.word	0x20004a04
 80015cc:	20004b18 	.word	0x20004b18

080015d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return uwTick;
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <HAL_GetTick+0x14>)
 80015d6:	681b      	ldr	r3, [r3, #0]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20004b18 	.word	0x20004b18

080015e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f0:	f7ff ffee 	bl	80015d0 <HAL_GetTick>
 80015f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001600:	d005      	beq.n	800160e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001602:	4b0a      	ldr	r3, [pc, #40]	; (800162c <HAL_Delay+0x44>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4413      	add	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800160e:	bf00      	nop
 8001610:	f7ff ffde 	bl	80015d0 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	429a      	cmp	r2, r3
 800161e:	d8f7      	bhi.n	8001610 <HAL_Delay+0x28>
  {
  }
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20004a04 	.word	0x20004a04

08001630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800164c:	4013      	ands	r3, r2
 800164e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800165c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001662:	4a04      	ldr	r2, [pc, #16]	; (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	60d3      	str	r3, [r2, #12]
}
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800167c:	4b04      	ldr	r3, [pc, #16]	; (8001690 <__NVIC_GetPriorityGrouping+0x18>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	f003 0307 	and.w	r3, r3, #7
}
 8001686:	4618      	mov	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	db0b      	blt.n	80016be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	f003 021f 	and.w	r2, r3, #31
 80016ac:	4907      	ldr	r1, [pc, #28]	; (80016cc <__NVIC_EnableIRQ+0x38>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	095b      	lsrs	r3, r3, #5
 80016b4:	2001      	movs	r0, #1
 80016b6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000e100 	.word	0xe000e100

080016d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	6039      	str	r1, [r7, #0]
 80016da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	db0a      	blt.n	80016fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	490c      	ldr	r1, [pc, #48]	; (800171c <__NVIC_SetPriority+0x4c>)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	0112      	lsls	r2, r2, #4
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	440b      	add	r3, r1
 80016f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f8:	e00a      	b.n	8001710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4908      	ldr	r1, [pc, #32]	; (8001720 <__NVIC_SetPriority+0x50>)
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	3b04      	subs	r3, #4
 8001708:	0112      	lsls	r2, r2, #4
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	440b      	add	r3, r1
 800170e:	761a      	strb	r2, [r3, #24]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	e000e100 	.word	0xe000e100
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	; 0x24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f1c3 0307 	rsb	r3, r3, #7
 800173e:	2b04      	cmp	r3, #4
 8001740:	bf28      	it	cs
 8001742:	2304      	movcs	r3, #4
 8001744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3304      	adds	r3, #4
 800174a:	2b06      	cmp	r3, #6
 800174c:	d902      	bls.n	8001754 <NVIC_EncodePriority+0x30>
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3b03      	subs	r3, #3
 8001752:	e000      	b.n	8001756 <NVIC_EncodePriority+0x32>
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001758:	f04f 32ff 	mov.w	r2, #4294967295
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43da      	mvns	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	401a      	ands	r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800176c:	f04f 31ff 	mov.w	r1, #4294967295
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	fa01 f303 	lsl.w	r3, r1, r3
 8001776:	43d9      	mvns	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177c:	4313      	orrs	r3, r2
         );
}
 800177e:	4618      	mov	r0, r3
 8001780:	3724      	adds	r7, #36	; 0x24
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3b01      	subs	r3, #1
 8001798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800179c:	d301      	bcc.n	80017a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800179e:	2301      	movs	r3, #1
 80017a0:	e00f      	b.n	80017c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a2:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <SysTick_Config+0x40>)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017aa:	210f      	movs	r1, #15
 80017ac:	f04f 30ff 	mov.w	r0, #4294967295
 80017b0:	f7ff ff8e 	bl	80016d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <SysTick_Config+0x40>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ba:	4b04      	ldr	r3, [pc, #16]	; (80017cc <SysTick_Config+0x40>)
 80017bc:	2207      	movs	r2, #7
 80017be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	e000e010 	.word	0xe000e010

080017d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ff29 	bl	8001630 <__NVIC_SetPriorityGrouping>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b086      	sub	sp, #24
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	4603      	mov	r3, r0
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f8:	f7ff ff3e 	bl	8001678 <__NVIC_GetPriorityGrouping>
 80017fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	68b9      	ldr	r1, [r7, #8]
 8001802:	6978      	ldr	r0, [r7, #20]
 8001804:	f7ff ff8e 	bl	8001724 <NVIC_EncodePriority>
 8001808:	4602      	mov	r2, r0
 800180a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180e:	4611      	mov	r1, r2
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff5d 	bl	80016d0 <__NVIC_SetPriority>
}
 8001816:	bf00      	nop
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff31 	bl	8001694 <__NVIC_EnableIRQ>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff ffa2 	bl	800178c <SysTick_Config>
 8001848:	4603      	mov	r3, r0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	; 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001866:	2300      	movs	r3, #0
 8001868:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
 800186e:	e165      	b.n	8001b3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001870:	2201      	movs	r2, #1
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	429a      	cmp	r2, r3
 800188a:	f040 8154 	bne.w	8001b36 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	2b01      	cmp	r3, #1
 8001898:	d005      	beq.n	80018a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d130      	bne.n	8001908 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	2203      	movs	r2, #3
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43db      	mvns	r3, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4013      	ands	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	68da      	ldr	r2, [r3, #12]
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018dc:	2201      	movs	r2, #1
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	091b      	lsrs	r3, r3, #4
 80018f2:	f003 0201 	and.w	r2, r3, #1
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4313      	orrs	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	2b03      	cmp	r3, #3
 8001912:	d017      	beq.n	8001944 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	2203      	movs	r2, #3
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d123      	bne.n	8001998 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	08da      	lsrs	r2, r3, #3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3208      	adds	r2, #8
 8001958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800195c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	220f      	movs	r2, #15
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	691a      	ldr	r2, [r3, #16]
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	08da      	lsrs	r2, r3, #3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3208      	adds	r2, #8
 8001992:	69b9      	ldr	r1, [r7, #24]
 8001994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	2203      	movs	r2, #3
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 0203 	and.w	r2, r3, #3
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 80ae 	beq.w	8001b36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	4b5d      	ldr	r3, [pc, #372]	; (8001b54 <HAL_GPIO_Init+0x300>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	4a5c      	ldr	r2, [pc, #368]	; (8001b54 <HAL_GPIO_Init+0x300>)
 80019e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ea:	4b5a      	ldr	r3, [pc, #360]	; (8001b54 <HAL_GPIO_Init+0x300>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019f6:	4a58      	ldr	r2, [pc, #352]	; (8001b58 <HAL_GPIO_Init+0x304>)
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	089b      	lsrs	r3, r3, #2
 80019fc:	3302      	adds	r3, #2
 80019fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	220f      	movs	r2, #15
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4013      	ands	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a4f      	ldr	r2, [pc, #316]	; (8001b5c <HAL_GPIO_Init+0x308>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d025      	beq.n	8001a6e <HAL_GPIO_Init+0x21a>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a4e      	ldr	r2, [pc, #312]	; (8001b60 <HAL_GPIO_Init+0x30c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d01f      	beq.n	8001a6a <HAL_GPIO_Init+0x216>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a4d      	ldr	r2, [pc, #308]	; (8001b64 <HAL_GPIO_Init+0x310>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d019      	beq.n	8001a66 <HAL_GPIO_Init+0x212>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a4c      	ldr	r2, [pc, #304]	; (8001b68 <HAL_GPIO_Init+0x314>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d013      	beq.n	8001a62 <HAL_GPIO_Init+0x20e>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a4b      	ldr	r2, [pc, #300]	; (8001b6c <HAL_GPIO_Init+0x318>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d00d      	beq.n	8001a5e <HAL_GPIO_Init+0x20a>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a4a      	ldr	r2, [pc, #296]	; (8001b70 <HAL_GPIO_Init+0x31c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d007      	beq.n	8001a5a <HAL_GPIO_Init+0x206>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a49      	ldr	r2, [pc, #292]	; (8001b74 <HAL_GPIO_Init+0x320>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d101      	bne.n	8001a56 <HAL_GPIO_Init+0x202>
 8001a52:	2306      	movs	r3, #6
 8001a54:	e00c      	b.n	8001a70 <HAL_GPIO_Init+0x21c>
 8001a56:	2307      	movs	r3, #7
 8001a58:	e00a      	b.n	8001a70 <HAL_GPIO_Init+0x21c>
 8001a5a:	2305      	movs	r3, #5
 8001a5c:	e008      	b.n	8001a70 <HAL_GPIO_Init+0x21c>
 8001a5e:	2304      	movs	r3, #4
 8001a60:	e006      	b.n	8001a70 <HAL_GPIO_Init+0x21c>
 8001a62:	2303      	movs	r3, #3
 8001a64:	e004      	b.n	8001a70 <HAL_GPIO_Init+0x21c>
 8001a66:	2302      	movs	r3, #2
 8001a68:	e002      	b.n	8001a70 <HAL_GPIO_Init+0x21c>
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e000      	b.n	8001a70 <HAL_GPIO_Init+0x21c>
 8001a6e:	2300      	movs	r3, #0
 8001a70:	69fa      	ldr	r2, [r7, #28]
 8001a72:	f002 0203 	and.w	r2, r2, #3
 8001a76:	0092      	lsls	r2, r2, #2
 8001a78:	4093      	lsls	r3, r2
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a80:	4935      	ldr	r1, [pc, #212]	; (8001b58 <HAL_GPIO_Init+0x304>)
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	089b      	lsrs	r3, r3, #2
 8001a86:	3302      	adds	r3, #2
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a8e:	4b3a      	ldr	r3, [pc, #232]	; (8001b78 <HAL_GPIO_Init+0x324>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	43db      	mvns	r3, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ab2:	4a31      	ldr	r2, [pc, #196]	; (8001b78 <HAL_GPIO_Init+0x324>)
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ab8:	4b2f      	ldr	r3, [pc, #188]	; (8001b78 <HAL_GPIO_Init+0x324>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d003      	beq.n	8001adc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001adc:	4a26      	ldr	r2, [pc, #152]	; (8001b78 <HAL_GPIO_Init+0x324>)
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ae2:	4b25      	ldr	r3, [pc, #148]	; (8001b78 <HAL_GPIO_Init+0x324>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	43db      	mvns	r3, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4013      	ands	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b06:	4a1c      	ldr	r2, [pc, #112]	; (8001b78 <HAL_GPIO_Init+0x324>)
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b0c:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <HAL_GPIO_Init+0x324>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d003      	beq.n	8001b30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b30:	4a11      	ldr	r2, [pc, #68]	; (8001b78 <HAL_GPIO_Init+0x324>)
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	61fb      	str	r3, [r7, #28]
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	2b0f      	cmp	r3, #15
 8001b40:	f67f ae96 	bls.w	8001870 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b44:	bf00      	nop
 8001b46:	bf00      	nop
 8001b48:	3724      	adds	r7, #36	; 0x24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40013800 	.word	0x40013800
 8001b5c:	40020000 	.word	0x40020000
 8001b60:	40020400 	.word	0x40020400
 8001b64:	40020800 	.word	0x40020800
 8001b68:	40020c00 	.word	0x40020c00
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40021400 	.word	0x40021400
 8001b74:	40021800 	.word	0x40021800
 8001b78:	40013c00 	.word	0x40013c00

08001b7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691a      	ldr	r2, [r3, #16]
 8001b8c:	887b      	ldrh	r3, [r7, #2]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d002      	beq.n	8001b9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b94:	2301      	movs	r3, #1
 8001b96:	73fb      	strb	r3, [r7, #15]
 8001b98:	e001      	b.n	8001b9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bbc:	787b      	ldrb	r3, [r7, #1]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc2:	887a      	ldrh	r2, [r7, #2]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bc8:	e003      	b.n	8001bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bca:	887b      	ldrh	r3, [r7, #2]
 8001bcc:	041a      	lsls	r2, r3, #16
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	619a      	str	r2, [r3, #24]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b085      	sub	sp, #20
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	460b      	mov	r3, r1
 8001be8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bf0:	887a      	ldrh	r2, [r7, #2]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	041a      	lsls	r2, r3, #16
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	43d9      	mvns	r1, r3
 8001bfc:	887b      	ldrh	r3, [r7, #2]
 8001bfe:	400b      	ands	r3, r1
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	619a      	str	r2, [r3, #24]
}
 8001c06:	bf00      	nop
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0cc      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c28:	4b68      	ldr	r3, [pc, #416]	; (8001dcc <HAL_RCC_ClockConfig+0x1b8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 030f 	and.w	r3, r3, #15
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d90c      	bls.n	8001c50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c36:	4b65      	ldr	r3, [pc, #404]	; (8001dcc <HAL_RCC_ClockConfig+0x1b8>)
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3e:	4b63      	ldr	r3, [pc, #396]	; (8001dcc <HAL_RCC_ClockConfig+0x1b8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0b8      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d020      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c68:	4b59      	ldr	r3, [pc, #356]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	4a58      	ldr	r2, [pc, #352]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d005      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c80:	4b53      	ldr	r3, [pc, #332]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	4a52      	ldr	r2, [pc, #328]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c8c:	4b50      	ldr	r3, [pc, #320]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	494d      	ldr	r1, [pc, #308]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d044      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d107      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	4b47      	ldr	r3, [pc, #284]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d119      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e07f      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d003      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	d107      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd2:	4b3f      	ldr	r3, [pc, #252]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d109      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e06f      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce2:	4b3b      	ldr	r3, [pc, #236]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e067      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cf2:	4b37      	ldr	r3, [pc, #220]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f023 0203 	bic.w	r2, r3, #3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	4934      	ldr	r1, [pc, #208]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d04:	f7ff fc64 	bl	80015d0 <HAL_GetTick>
 8001d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0a:	e00a      	b.n	8001d22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d0c:	f7ff fc60 	bl	80015d0 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e04f      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d22:	4b2b      	ldr	r3, [pc, #172]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 020c 	and.w	r2, r3, #12
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d1eb      	bne.n	8001d0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d34:	4b25      	ldr	r3, [pc, #148]	; (8001dcc <HAL_RCC_ClockConfig+0x1b8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 030f 	and.w	r3, r3, #15
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d20c      	bcs.n	8001d5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d42:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <HAL_RCC_ClockConfig+0x1b8>)
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4a:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <HAL_RCC_ClockConfig+0x1b8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e032      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d008      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d68:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	4916      	ldr	r1, [pc, #88]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d009      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d86:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	490e      	ldr	r1, [pc, #56]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d9a:	f000 f855 	bl	8001e48 <HAL_RCC_GetSysClockFreq>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	490a      	ldr	r1, [pc, #40]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001dac:	5ccb      	ldrb	r3, [r1, r3]
 8001dae:	fa22 f303 	lsr.w	r3, r2, r3
 8001db2:	4a09      	ldr	r2, [pc, #36]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <HAL_RCC_ClockConfig+0x1c8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fbc4 	bl	8001548 <HAL_InitTick>

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40023c00 	.word	0x40023c00
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	08003c18 	.word	0x08003c18
 8001dd8:	200049fc 	.word	0x200049fc
 8001ddc:	20004a00 	.word	0x20004a00

08001de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	200049fc 	.word	0x200049fc

08001df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dfc:	f7ff fff0 	bl	8001de0 <HAL_RCC_GetHCLKFreq>
 8001e00:	4602      	mov	r2, r0
 8001e02:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	0a9b      	lsrs	r3, r3, #10
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	4903      	ldr	r1, [pc, #12]	; (8001e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e0e:	5ccb      	ldrb	r3, [r1, r3]
 8001e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	08003c28 	.word	0x08003c28

08001e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e24:	f7ff ffdc 	bl	8001de0 <HAL_RCC_GetHCLKFreq>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	0b5b      	lsrs	r3, r3, #13
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	4903      	ldr	r1, [pc, #12]	; (8001e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e36:	5ccb      	ldrb	r3, [r1, r3]
 8001e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40023800 	.word	0x40023800
 8001e44:	08003c28 	.word	0x08003c28

08001e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e4c:	b0ae      	sub	sp, #184	; 0xb8
 8001e4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e6e:	4bcb      	ldr	r3, [pc, #812]	; (800219c <HAL_RCC_GetSysClockFreq+0x354>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b0c      	cmp	r3, #12
 8001e78:	f200 8206 	bhi.w	8002288 <HAL_RCC_GetSysClockFreq+0x440>
 8001e7c:	a201      	add	r2, pc, #4	; (adr r2, 8001e84 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e82:	bf00      	nop
 8001e84:	08001eb9 	.word	0x08001eb9
 8001e88:	08002289 	.word	0x08002289
 8001e8c:	08002289 	.word	0x08002289
 8001e90:	08002289 	.word	0x08002289
 8001e94:	08001ec1 	.word	0x08001ec1
 8001e98:	08002289 	.word	0x08002289
 8001e9c:	08002289 	.word	0x08002289
 8001ea0:	08002289 	.word	0x08002289
 8001ea4:	08001ec9 	.word	0x08001ec9
 8001ea8:	08002289 	.word	0x08002289
 8001eac:	08002289 	.word	0x08002289
 8001eb0:	08002289 	.word	0x08002289
 8001eb4:	080020b9 	.word	0x080020b9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001eb8:	4bb9      	ldr	r3, [pc, #740]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001eba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001ebe:	e1e7      	b.n	8002290 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ec0:	4bb8      	ldr	r3, [pc, #736]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001ec2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001ec6:	e1e3      	b.n	8002290 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ec8:	4bb4      	ldr	r3, [pc, #720]	; (800219c <HAL_RCC_GetSysClockFreq+0x354>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ed0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ed4:	4bb1      	ldr	r3, [pc, #708]	; (800219c <HAL_RCC_GetSysClockFreq+0x354>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d071      	beq.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee0:	4bae      	ldr	r3, [pc, #696]	; (800219c <HAL_RCC_GetSysClockFreq+0x354>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	099b      	lsrs	r3, r3, #6
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001eec:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001ef0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ef8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001efc:	2300      	movs	r3, #0
 8001efe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001f02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001f06:	4622      	mov	r2, r4
 8001f08:	462b      	mov	r3, r5
 8001f0a:	f04f 0000 	mov.w	r0, #0
 8001f0e:	f04f 0100 	mov.w	r1, #0
 8001f12:	0159      	lsls	r1, r3, #5
 8001f14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f18:	0150      	lsls	r0, r2, #5
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4621      	mov	r1, r4
 8001f20:	1a51      	subs	r1, r2, r1
 8001f22:	6439      	str	r1, [r7, #64]	; 0x40
 8001f24:	4629      	mov	r1, r5
 8001f26:	eb63 0301 	sbc.w	r3, r3, r1
 8001f2a:	647b      	str	r3, [r7, #68]	; 0x44
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	f04f 0300 	mov.w	r3, #0
 8001f34:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001f38:	4649      	mov	r1, r9
 8001f3a:	018b      	lsls	r3, r1, #6
 8001f3c:	4641      	mov	r1, r8
 8001f3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f42:	4641      	mov	r1, r8
 8001f44:	018a      	lsls	r2, r1, #6
 8001f46:	4641      	mov	r1, r8
 8001f48:	1a51      	subs	r1, r2, r1
 8001f4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8001f4c:	4649      	mov	r1, r9
 8001f4e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f54:	f04f 0200 	mov.w	r2, #0
 8001f58:	f04f 0300 	mov.w	r3, #0
 8001f5c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001f60:	4649      	mov	r1, r9
 8001f62:	00cb      	lsls	r3, r1, #3
 8001f64:	4641      	mov	r1, r8
 8001f66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f6a:	4641      	mov	r1, r8
 8001f6c:	00ca      	lsls	r2, r1, #3
 8001f6e:	4610      	mov	r0, r2
 8001f70:	4619      	mov	r1, r3
 8001f72:	4603      	mov	r3, r0
 8001f74:	4622      	mov	r2, r4
 8001f76:	189b      	adds	r3, r3, r2
 8001f78:	633b      	str	r3, [r7, #48]	; 0x30
 8001f7a:	462b      	mov	r3, r5
 8001f7c:	460a      	mov	r2, r1
 8001f7e:	eb42 0303 	adc.w	r3, r2, r3
 8001f82:	637b      	str	r3, [r7, #52]	; 0x34
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	f04f 0300 	mov.w	r3, #0
 8001f8c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f90:	4629      	mov	r1, r5
 8001f92:	024b      	lsls	r3, r1, #9
 8001f94:	4621      	mov	r1, r4
 8001f96:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f9a:	4621      	mov	r1, r4
 8001f9c:	024a      	lsls	r2, r1, #9
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001fac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001fb0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001fb4:	f7fe f926 	bl	8000204 <__aeabi_uldivmod>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001fc2:	e067      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fc4:	4b75      	ldr	r3, [pc, #468]	; (800219c <HAL_RCC_GetSysClockFreq+0x354>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	099b      	lsrs	r3, r3, #6
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001fd0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001fd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fdc:	67bb      	str	r3, [r7, #120]	; 0x78
 8001fde:	2300      	movs	r3, #0
 8001fe0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001fe2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001fe6:	4622      	mov	r2, r4
 8001fe8:	462b      	mov	r3, r5
 8001fea:	f04f 0000 	mov.w	r0, #0
 8001fee:	f04f 0100 	mov.w	r1, #0
 8001ff2:	0159      	lsls	r1, r3, #5
 8001ff4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ff8:	0150      	lsls	r0, r2, #5
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	4621      	mov	r1, r4
 8002000:	1a51      	subs	r1, r2, r1
 8002002:	62b9      	str	r1, [r7, #40]	; 0x28
 8002004:	4629      	mov	r1, r5
 8002006:	eb63 0301 	sbc.w	r3, r3, r1
 800200a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	f04f 0300 	mov.w	r3, #0
 8002014:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002018:	4649      	mov	r1, r9
 800201a:	018b      	lsls	r3, r1, #6
 800201c:	4641      	mov	r1, r8
 800201e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002022:	4641      	mov	r1, r8
 8002024:	018a      	lsls	r2, r1, #6
 8002026:	4641      	mov	r1, r8
 8002028:	ebb2 0a01 	subs.w	sl, r2, r1
 800202c:	4649      	mov	r1, r9
 800202e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800203e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002042:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002046:	4692      	mov	sl, r2
 8002048:	469b      	mov	fp, r3
 800204a:	4623      	mov	r3, r4
 800204c:	eb1a 0303 	adds.w	r3, sl, r3
 8002050:	623b      	str	r3, [r7, #32]
 8002052:	462b      	mov	r3, r5
 8002054:	eb4b 0303 	adc.w	r3, fp, r3
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
 800205a:	f04f 0200 	mov.w	r2, #0
 800205e:	f04f 0300 	mov.w	r3, #0
 8002062:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002066:	4629      	mov	r1, r5
 8002068:	028b      	lsls	r3, r1, #10
 800206a:	4621      	mov	r1, r4
 800206c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002070:	4621      	mov	r1, r4
 8002072:	028a      	lsls	r2, r1, #10
 8002074:	4610      	mov	r0, r2
 8002076:	4619      	mov	r1, r3
 8002078:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800207c:	2200      	movs	r2, #0
 800207e:	673b      	str	r3, [r7, #112]	; 0x70
 8002080:	677a      	str	r2, [r7, #116]	; 0x74
 8002082:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002086:	f7fe f8bd 	bl	8000204 <__aeabi_uldivmod>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4613      	mov	r3, r2
 8002090:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002094:	4b41      	ldr	r3, [pc, #260]	; (800219c <HAL_RCC_GetSysClockFreq+0x354>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	0c1b      	lsrs	r3, r3, #16
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	3301      	adds	r3, #1
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80020a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80020aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80020b6:	e0eb      	b.n	8002290 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020b8:	4b38      	ldr	r3, [pc, #224]	; (800219c <HAL_RCC_GetSysClockFreq+0x354>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020c4:	4b35      	ldr	r3, [pc, #212]	; (800219c <HAL_RCC_GetSysClockFreq+0x354>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d06b      	beq.n	80021a8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020d0:	4b32      	ldr	r3, [pc, #200]	; (800219c <HAL_RCC_GetSysClockFreq+0x354>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	099b      	lsrs	r3, r3, #6
 80020d6:	2200      	movs	r2, #0
 80020d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80020da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80020dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020e2:	663b      	str	r3, [r7, #96]	; 0x60
 80020e4:	2300      	movs	r3, #0
 80020e6:	667b      	str	r3, [r7, #100]	; 0x64
 80020e8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80020ec:	4622      	mov	r2, r4
 80020ee:	462b      	mov	r3, r5
 80020f0:	f04f 0000 	mov.w	r0, #0
 80020f4:	f04f 0100 	mov.w	r1, #0
 80020f8:	0159      	lsls	r1, r3, #5
 80020fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020fe:	0150      	lsls	r0, r2, #5
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4621      	mov	r1, r4
 8002106:	1a51      	subs	r1, r2, r1
 8002108:	61b9      	str	r1, [r7, #24]
 800210a:	4629      	mov	r1, r5
 800210c:	eb63 0301 	sbc.w	r3, r3, r1
 8002110:	61fb      	str	r3, [r7, #28]
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	f04f 0300 	mov.w	r3, #0
 800211a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800211e:	4659      	mov	r1, fp
 8002120:	018b      	lsls	r3, r1, #6
 8002122:	4651      	mov	r1, sl
 8002124:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002128:	4651      	mov	r1, sl
 800212a:	018a      	lsls	r2, r1, #6
 800212c:	4651      	mov	r1, sl
 800212e:	ebb2 0801 	subs.w	r8, r2, r1
 8002132:	4659      	mov	r1, fp
 8002134:	eb63 0901 	sbc.w	r9, r3, r1
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	f04f 0300 	mov.w	r3, #0
 8002140:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002144:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002148:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800214c:	4690      	mov	r8, r2
 800214e:	4699      	mov	r9, r3
 8002150:	4623      	mov	r3, r4
 8002152:	eb18 0303 	adds.w	r3, r8, r3
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	462b      	mov	r3, r5
 800215a:	eb49 0303 	adc.w	r3, r9, r3
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800216c:	4629      	mov	r1, r5
 800216e:	024b      	lsls	r3, r1, #9
 8002170:	4621      	mov	r1, r4
 8002172:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002176:	4621      	mov	r1, r4
 8002178:	024a      	lsls	r2, r1, #9
 800217a:	4610      	mov	r0, r2
 800217c:	4619      	mov	r1, r3
 800217e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002182:	2200      	movs	r2, #0
 8002184:	65bb      	str	r3, [r7, #88]	; 0x58
 8002186:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002188:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800218c:	f7fe f83a 	bl	8000204 <__aeabi_uldivmod>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4613      	mov	r3, r2
 8002196:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800219a:	e065      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0x420>
 800219c:	40023800 	.word	0x40023800
 80021a0:	00f42400 	.word	0x00f42400
 80021a4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021a8:	4b3d      	ldr	r3, [pc, #244]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x458>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	099b      	lsrs	r3, r3, #6
 80021ae:	2200      	movs	r2, #0
 80021b0:	4618      	mov	r0, r3
 80021b2:	4611      	mov	r1, r2
 80021b4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021b8:	653b      	str	r3, [r7, #80]	; 0x50
 80021ba:	2300      	movs	r3, #0
 80021bc:	657b      	str	r3, [r7, #84]	; 0x54
 80021be:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80021c2:	4642      	mov	r2, r8
 80021c4:	464b      	mov	r3, r9
 80021c6:	f04f 0000 	mov.w	r0, #0
 80021ca:	f04f 0100 	mov.w	r1, #0
 80021ce:	0159      	lsls	r1, r3, #5
 80021d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021d4:	0150      	lsls	r0, r2, #5
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4641      	mov	r1, r8
 80021dc:	1a51      	subs	r1, r2, r1
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	4649      	mov	r1, r9
 80021e2:	eb63 0301 	sbc.w	r3, r3, r1
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	f04f 0200 	mov.w	r2, #0
 80021ec:	f04f 0300 	mov.w	r3, #0
 80021f0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80021f4:	4659      	mov	r1, fp
 80021f6:	018b      	lsls	r3, r1, #6
 80021f8:	4651      	mov	r1, sl
 80021fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021fe:	4651      	mov	r1, sl
 8002200:	018a      	lsls	r2, r1, #6
 8002202:	4651      	mov	r1, sl
 8002204:	1a54      	subs	r4, r2, r1
 8002206:	4659      	mov	r1, fp
 8002208:	eb63 0501 	sbc.w	r5, r3, r1
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	f04f 0300 	mov.w	r3, #0
 8002214:	00eb      	lsls	r3, r5, #3
 8002216:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800221a:	00e2      	lsls	r2, r4, #3
 800221c:	4614      	mov	r4, r2
 800221e:	461d      	mov	r5, r3
 8002220:	4643      	mov	r3, r8
 8002222:	18e3      	adds	r3, r4, r3
 8002224:	603b      	str	r3, [r7, #0]
 8002226:	464b      	mov	r3, r9
 8002228:	eb45 0303 	adc.w	r3, r5, r3
 800222c:	607b      	str	r3, [r7, #4]
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	e9d7 4500 	ldrd	r4, r5, [r7]
 800223a:	4629      	mov	r1, r5
 800223c:	028b      	lsls	r3, r1, #10
 800223e:	4621      	mov	r1, r4
 8002240:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002244:	4621      	mov	r1, r4
 8002246:	028a      	lsls	r2, r1, #10
 8002248:	4610      	mov	r0, r2
 800224a:	4619      	mov	r1, r3
 800224c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002250:	2200      	movs	r2, #0
 8002252:	64bb      	str	r3, [r7, #72]	; 0x48
 8002254:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002256:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800225a:	f7fd ffd3 	bl	8000204 <__aeabi_uldivmod>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	4613      	mov	r3, r2
 8002264:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002268:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x458>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	0f1b      	lsrs	r3, r3, #28
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002276:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800227a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800227e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002282:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002286:	e003      	b.n	8002290 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800228a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800228e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002290:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002294:	4618      	mov	r0, r3
 8002296:	37b8      	adds	r7, #184	; 0xb8
 8002298:	46bd      	mov	sp, r7
 800229a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800229e:	bf00      	nop
 80022a0:	40023800 	.word	0x40023800
 80022a4:	00f42400 	.word	0x00f42400

080022a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e28d      	b.n	80027d6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 8083 	beq.w	80023ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022c8:	4b94      	ldr	r3, [pc, #592]	; (800251c <HAL_RCC_OscConfig+0x274>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 030c 	and.w	r3, r3, #12
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d019      	beq.n	8002308 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022d4:	4b91      	ldr	r3, [pc, #580]	; (800251c <HAL_RCC_OscConfig+0x274>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d106      	bne.n	80022ee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022e0:	4b8e      	ldr	r3, [pc, #568]	; (800251c <HAL_RCC_OscConfig+0x274>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ec:	d00c      	beq.n	8002308 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ee:	4b8b      	ldr	r3, [pc, #556]	; (800251c <HAL_RCC_OscConfig+0x274>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022f6:	2b0c      	cmp	r3, #12
 80022f8:	d112      	bne.n	8002320 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022fa:	4b88      	ldr	r3, [pc, #544]	; (800251c <HAL_RCC_OscConfig+0x274>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002306:	d10b      	bne.n	8002320 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002308:	4b84      	ldr	r3, [pc, #528]	; (800251c <HAL_RCC_OscConfig+0x274>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d05b      	beq.n	80023cc <HAL_RCC_OscConfig+0x124>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d157      	bne.n	80023cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e25a      	b.n	80027d6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002328:	d106      	bne.n	8002338 <HAL_RCC_OscConfig+0x90>
 800232a:	4b7c      	ldr	r3, [pc, #496]	; (800251c <HAL_RCC_OscConfig+0x274>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a7b      	ldr	r2, [pc, #492]	; (800251c <HAL_RCC_OscConfig+0x274>)
 8002330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	e01d      	b.n	8002374 <HAL_RCC_OscConfig+0xcc>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002340:	d10c      	bne.n	800235c <HAL_RCC_OscConfig+0xb4>
 8002342:	4b76      	ldr	r3, [pc, #472]	; (800251c <HAL_RCC_OscConfig+0x274>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a75      	ldr	r2, [pc, #468]	; (800251c <HAL_RCC_OscConfig+0x274>)
 8002348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	4b73      	ldr	r3, [pc, #460]	; (800251c <HAL_RCC_OscConfig+0x274>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a72      	ldr	r2, [pc, #456]	; (800251c <HAL_RCC_OscConfig+0x274>)
 8002354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	e00b      	b.n	8002374 <HAL_RCC_OscConfig+0xcc>
 800235c:	4b6f      	ldr	r3, [pc, #444]	; (800251c <HAL_RCC_OscConfig+0x274>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a6e      	ldr	r2, [pc, #440]	; (800251c <HAL_RCC_OscConfig+0x274>)
 8002362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	4b6c      	ldr	r3, [pc, #432]	; (800251c <HAL_RCC_OscConfig+0x274>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a6b      	ldr	r2, [pc, #428]	; (800251c <HAL_RCC_OscConfig+0x274>)
 800236e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d013      	beq.n	80023a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7ff f928 	bl	80015d0 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002384:	f7ff f924 	bl	80015d0 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b64      	cmp	r3, #100	; 0x64
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e21f      	b.n	80027d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002396:	4b61      	ldr	r3, [pc, #388]	; (800251c <HAL_RCC_OscConfig+0x274>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0xdc>
 80023a2:	e014      	b.n	80023ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a4:	f7ff f914 	bl	80015d0 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023ac:	f7ff f910 	bl	80015d0 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b64      	cmp	r3, #100	; 0x64
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e20b      	b.n	80027d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023be:	4b57      	ldr	r3, [pc, #348]	; (800251c <HAL_RCC_OscConfig+0x274>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f0      	bne.n	80023ac <HAL_RCC_OscConfig+0x104>
 80023ca:	e000      	b.n	80023ce <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d06f      	beq.n	80024ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023da:	4b50      	ldr	r3, [pc, #320]	; (800251c <HAL_RCC_OscConfig+0x274>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 030c 	and.w	r3, r3, #12
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d017      	beq.n	8002416 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023e6:	4b4d      	ldr	r3, [pc, #308]	; (800251c <HAL_RCC_OscConfig+0x274>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	d105      	bne.n	80023fe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023f2:	4b4a      	ldr	r3, [pc, #296]	; (800251c <HAL_RCC_OscConfig+0x274>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00b      	beq.n	8002416 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023fe:	4b47      	ldr	r3, [pc, #284]	; (800251c <HAL_RCC_OscConfig+0x274>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002406:	2b0c      	cmp	r3, #12
 8002408:	d11c      	bne.n	8002444 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800240a:	4b44      	ldr	r3, [pc, #272]	; (800251c <HAL_RCC_OscConfig+0x274>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d116      	bne.n	8002444 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002416:	4b41      	ldr	r3, [pc, #260]	; (800251c <HAL_RCC_OscConfig+0x274>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d005      	beq.n	800242e <HAL_RCC_OscConfig+0x186>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d001      	beq.n	800242e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e1d3      	b.n	80027d6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242e:	4b3b      	ldr	r3, [pc, #236]	; (800251c <HAL_RCC_OscConfig+0x274>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	4937      	ldr	r1, [pc, #220]	; (800251c <HAL_RCC_OscConfig+0x274>)
 800243e:	4313      	orrs	r3, r2
 8002440:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002442:	e03a      	b.n	80024ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d020      	beq.n	800248e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800244c:	4b34      	ldr	r3, [pc, #208]	; (8002520 <HAL_RCC_OscConfig+0x278>)
 800244e:	2201      	movs	r2, #1
 8002450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002452:	f7ff f8bd 	bl	80015d0 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800245a:	f7ff f8b9 	bl	80015d0 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e1b4      	b.n	80027d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246c:	4b2b      	ldr	r3, [pc, #172]	; (800251c <HAL_RCC_OscConfig+0x274>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0f0      	beq.n	800245a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002478:	4b28      	ldr	r3, [pc, #160]	; (800251c <HAL_RCC_OscConfig+0x274>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	4925      	ldr	r1, [pc, #148]	; (800251c <HAL_RCC_OscConfig+0x274>)
 8002488:	4313      	orrs	r3, r2
 800248a:	600b      	str	r3, [r1, #0]
 800248c:	e015      	b.n	80024ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800248e:	4b24      	ldr	r3, [pc, #144]	; (8002520 <HAL_RCC_OscConfig+0x278>)
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002494:	f7ff f89c 	bl	80015d0 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800249c:	f7ff f898 	bl	80015d0 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e193      	b.n	80027d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ae:	4b1b      	ldr	r3, [pc, #108]	; (800251c <HAL_RCC_OscConfig+0x274>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d036      	beq.n	8002534 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d016      	beq.n	80024fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ce:	4b15      	ldr	r3, [pc, #84]	; (8002524 <HAL_RCC_OscConfig+0x27c>)
 80024d0:	2201      	movs	r2, #1
 80024d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d4:	f7ff f87c 	bl	80015d0 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024dc:	f7ff f878 	bl	80015d0 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e173      	b.n	80027d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ee:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_RCC_OscConfig+0x274>)
 80024f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0x234>
 80024fa:	e01b      	b.n	8002534 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024fc:	4b09      	ldr	r3, [pc, #36]	; (8002524 <HAL_RCC_OscConfig+0x27c>)
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002502:	f7ff f865 	bl	80015d0 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002508:	e00e      	b.n	8002528 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800250a:	f7ff f861 	bl	80015d0 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d907      	bls.n	8002528 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e15c      	b.n	80027d6 <HAL_RCC_OscConfig+0x52e>
 800251c:	40023800 	.word	0x40023800
 8002520:	42470000 	.word	0x42470000
 8002524:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002528:	4b8a      	ldr	r3, [pc, #552]	; (8002754 <HAL_RCC_OscConfig+0x4ac>)
 800252a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1ea      	bne.n	800250a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 8097 	beq.w	8002670 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002542:	2300      	movs	r3, #0
 8002544:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002546:	4b83      	ldr	r3, [pc, #524]	; (8002754 <HAL_RCC_OscConfig+0x4ac>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10f      	bne.n	8002572 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	4b7f      	ldr	r3, [pc, #508]	; (8002754 <HAL_RCC_OscConfig+0x4ac>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	4a7e      	ldr	r2, [pc, #504]	; (8002754 <HAL_RCC_OscConfig+0x4ac>)
 800255c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002560:	6413      	str	r3, [r2, #64]	; 0x40
 8002562:	4b7c      	ldr	r3, [pc, #496]	; (8002754 <HAL_RCC_OscConfig+0x4ac>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800256e:	2301      	movs	r3, #1
 8002570:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002572:	4b79      	ldr	r3, [pc, #484]	; (8002758 <HAL_RCC_OscConfig+0x4b0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d118      	bne.n	80025b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800257e:	4b76      	ldr	r3, [pc, #472]	; (8002758 <HAL_RCC_OscConfig+0x4b0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a75      	ldr	r2, [pc, #468]	; (8002758 <HAL_RCC_OscConfig+0x4b0>)
 8002584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800258a:	f7ff f821 	bl	80015d0 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002592:	f7ff f81d 	bl	80015d0 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e118      	b.n	80027d6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a4:	4b6c      	ldr	r3, [pc, #432]	; (8002758 <HAL_RCC_OscConfig+0x4b0>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d106      	bne.n	80025c6 <HAL_RCC_OscConfig+0x31e>
 80025b8:	4b66      	ldr	r3, [pc, #408]	; (8002754 <HAL_RCC_OscConfig+0x4ac>)
 80025ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025bc:	4a65      	ldr	r2, [pc, #404]	; (8002754 <HAL_RCC_OscConfig+0x4ac>)
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	6713      	str	r3, [r2, #112]	; 0x70
 80025c4:	e01c      	b.n	8002600 <HAL_RCC_OscConfig+0x358>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b05      	cmp	r3, #5
 80025cc:	d10c      	bne.n	80025e8 <HAL_RCC_OscConfig+0x340>
 80025ce:	4b61      	ldr	r3, [pc, #388]	; (8002754 <HAL_RCC_OscConfig+0x4ac>)
 80025d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d2:	4a60      	ldr	r2, [pc, #384]	; (8002754 <HAL_RCC_OscConfig+0x4ac>)
 80025d4:	f043 0304 	orr.w	r3, r3, #4
 80025d8:	6713      	str	r3, [r2, #112]	; 0x70
 80025da:	4b5e      	ldr	r3, [pc, #376]	; (8002754 <HAL_RCC_OscConfig+0x4ac>)
 80025dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025de:	4a5d      	ldr	r2, [pc, #372]	; (8002754 <HAL_RCC_OscConfig+0x4ac>)
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	6713      	str	r3, [r2, #112]	; 0x70
 80025e6:	e00b      	b.n	8002600 <HAL_RCC_OscConfig+0x358>
 80025e8:	4b5a      	ldr	r3, [pc, #360]	; (8002754 <HAL_RCC_OscConfig+0x4ac>)
 80025ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ec:	4a59      	ldr	r2, [pc, #356]	; (8002754 <HAL_RCC_OscConfig+0x4ac>)
 80025ee:	f023 0301 	bic.w	r3, r3, #1
 80025f2:	6713      	str	r3, [r2, #112]	; 0x70
 80025f4:	4b57      	ldr	r3, [pc, #348]	; (8002754 <HAL_RCC_OscConfig+0x4ac>)
 80025f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f8:	4a56      	ldr	r2, [pc, #344]	; (8002754 <HAL_RCC_OscConfig+0x4ac>)
 80025fa:	f023 0304 	bic.w	r3, r3, #4
 80025fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d015      	beq.n	8002634 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002608:	f7fe ffe2 	bl	80015d0 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800260e:	e00a      	b.n	8002626 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002610:	f7fe ffde 	bl	80015d0 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	f241 3288 	movw	r2, #5000	; 0x1388
 800261e:	4293      	cmp	r3, r2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e0d7      	b.n	80027d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002626:	4b4b      	ldr	r3, [pc, #300]	; (8002754 <HAL_RCC_OscConfig+0x4ac>)
 8002628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0ee      	beq.n	8002610 <HAL_RCC_OscConfig+0x368>
 8002632:	e014      	b.n	800265e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002634:	f7fe ffcc 	bl	80015d0 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800263a:	e00a      	b.n	8002652 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800263c:	f7fe ffc8 	bl	80015d0 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	f241 3288 	movw	r2, #5000	; 0x1388
 800264a:	4293      	cmp	r3, r2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e0c1      	b.n	80027d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002652:	4b40      	ldr	r3, [pc, #256]	; (8002754 <HAL_RCC_OscConfig+0x4ac>)
 8002654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1ee      	bne.n	800263c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800265e:	7dfb      	ldrb	r3, [r7, #23]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d105      	bne.n	8002670 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002664:	4b3b      	ldr	r3, [pc, #236]	; (8002754 <HAL_RCC_OscConfig+0x4ac>)
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002668:	4a3a      	ldr	r2, [pc, #232]	; (8002754 <HAL_RCC_OscConfig+0x4ac>)
 800266a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800266e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 80ad 	beq.w	80027d4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800267a:	4b36      	ldr	r3, [pc, #216]	; (8002754 <HAL_RCC_OscConfig+0x4ac>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b08      	cmp	r3, #8
 8002684:	d060      	beq.n	8002748 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d145      	bne.n	800271a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268e:	4b33      	ldr	r3, [pc, #204]	; (800275c <HAL_RCC_OscConfig+0x4b4>)
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7fe ff9c 	bl	80015d0 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800269c:	f7fe ff98 	bl	80015d0 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e093      	b.n	80027d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ae:	4b29      	ldr	r3, [pc, #164]	; (8002754 <HAL_RCC_OscConfig+0x4ac>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69da      	ldr	r2, [r3, #28]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	019b      	lsls	r3, r3, #6
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d0:	085b      	lsrs	r3, r3, #1
 80026d2:	3b01      	subs	r3, #1
 80026d4:	041b      	lsls	r3, r3, #16
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026dc:	061b      	lsls	r3, r3, #24
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e4:	071b      	lsls	r3, r3, #28
 80026e6:	491b      	ldr	r1, [pc, #108]	; (8002754 <HAL_RCC_OscConfig+0x4ac>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026ec:	4b1b      	ldr	r3, [pc, #108]	; (800275c <HAL_RCC_OscConfig+0x4b4>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f2:	f7fe ff6d 	bl	80015d0 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fa:	f7fe ff69 	bl	80015d0 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e064      	b.n	80027d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <HAL_RCC_OscConfig+0x4ac>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0f0      	beq.n	80026fa <HAL_RCC_OscConfig+0x452>
 8002718:	e05c      	b.n	80027d4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271a:	4b10      	ldr	r3, [pc, #64]	; (800275c <HAL_RCC_OscConfig+0x4b4>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002720:	f7fe ff56 	bl	80015d0 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002728:	f7fe ff52 	bl	80015d0 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e04d      	b.n	80027d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_RCC_OscConfig+0x4ac>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0x480>
 8002746:	e045      	b.n	80027d4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d107      	bne.n	8002760 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e040      	b.n	80027d6 <HAL_RCC_OscConfig+0x52e>
 8002754:	40023800 	.word	0x40023800
 8002758:	40007000 	.word	0x40007000
 800275c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002760:	4b1f      	ldr	r3, [pc, #124]	; (80027e0 <HAL_RCC_OscConfig+0x538>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d030      	beq.n	80027d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002778:	429a      	cmp	r2, r3
 800277a:	d129      	bne.n	80027d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002786:	429a      	cmp	r2, r3
 8002788:	d122      	bne.n	80027d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002790:	4013      	ands	r3, r2
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002796:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002798:	4293      	cmp	r3, r2
 800279a:	d119      	bne.n	80027d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a6:	085b      	lsrs	r3, r3, #1
 80027a8:	3b01      	subs	r3, #1
 80027aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d10f      	bne.n	80027d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027bc:	429a      	cmp	r2, r3
 80027be:	d107      	bne.n	80027d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d001      	beq.n	80027d4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e000      	b.n	80027d6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40023800 	.word	0x40023800

080027e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e07b      	b.n	80028ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d108      	bne.n	8002810 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002806:	d009      	beq.n	800281c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	61da      	str	r2, [r3, #28]
 800280e:	e005      	b.n	800281c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d106      	bne.n	800283c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7fe fcf2 	bl	8001220 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002852:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	431a      	orrs	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800288c:	431a      	orrs	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a0:	ea42 0103 	orr.w	r1, r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	0c1b      	lsrs	r3, r3, #16
 80028ba:	f003 0104 	and.w	r1, r3, #4
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	f003 0210 	and.w	r2, r3, #16
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	69da      	ldr	r2, [r3, #28]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b088      	sub	sp, #32
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	60f8      	str	r0, [r7, #12]
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	603b      	str	r3, [r7, #0]
 8002902:	4613      	mov	r3, r2
 8002904:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <HAL_SPI_Transmit+0x22>
 8002914:	2302      	movs	r3, #2
 8002916:	e126      	b.n	8002b66 <HAL_SPI_Transmit+0x270>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002920:	f7fe fe56 	bl	80015d0 <HAL_GetTick>
 8002924:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002926:	88fb      	ldrh	r3, [r7, #6]
 8002928:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b01      	cmp	r3, #1
 8002934:	d002      	beq.n	800293c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002936:	2302      	movs	r3, #2
 8002938:	77fb      	strb	r3, [r7, #31]
    goto error;
 800293a:	e10b      	b.n	8002b54 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <HAL_SPI_Transmit+0x52>
 8002942:	88fb      	ldrh	r3, [r7, #6]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d102      	bne.n	800294e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800294c:	e102      	b.n	8002b54 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2203      	movs	r2, #3
 8002952:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	88fa      	ldrh	r2, [r7, #6]
 8002966:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	88fa      	ldrh	r2, [r7, #6]
 800296c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002994:	d10f      	bne.n	80029b6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c0:	2b40      	cmp	r3, #64	; 0x40
 80029c2:	d007      	beq.n	80029d4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029dc:	d14b      	bne.n	8002a76 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <HAL_SPI_Transmit+0xf6>
 80029e6:	8afb      	ldrh	r3, [r7, #22]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d13e      	bne.n	8002a6a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f0:	881a      	ldrh	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fc:	1c9a      	adds	r2, r3, #2
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a10:	e02b      	b.n	8002a6a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d112      	bne.n	8002a46 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	881a      	ldrh	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a30:	1c9a      	adds	r2, r3, #2
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a44:	e011      	b.n	8002a6a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a46:	f7fe fdc3 	bl	80015d0 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d803      	bhi.n	8002a5e <HAL_SPI_Transmit+0x168>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a5c:	d102      	bne.n	8002a64 <HAL_SPI_Transmit+0x16e>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d102      	bne.n	8002a6a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a68:	e074      	b.n	8002b54 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1ce      	bne.n	8002a12 <HAL_SPI_Transmit+0x11c>
 8002a74:	e04c      	b.n	8002b10 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <HAL_SPI_Transmit+0x18e>
 8002a7e:	8afb      	ldrh	r3, [r7, #22]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d140      	bne.n	8002b06 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	330c      	adds	r3, #12
 8002a8e:	7812      	ldrb	r2, [r2, #0]
 8002a90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002aaa:	e02c      	b.n	8002b06 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d113      	bne.n	8002ae2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	330c      	adds	r3, #12
 8002ac4:	7812      	ldrb	r2, [r2, #0]
 8002ac6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002acc:	1c5a      	adds	r2, r3, #1
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ae0:	e011      	b.n	8002b06 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ae2:	f7fe fd75 	bl	80015d0 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d803      	bhi.n	8002afa <HAL_SPI_Transmit+0x204>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af8:	d102      	bne.n	8002b00 <HAL_SPI_Transmit+0x20a>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d102      	bne.n	8002b06 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b04:	e026      	b.n	8002b54 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1cd      	bne.n	8002aac <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	6839      	ldr	r1, [r7, #0]
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 f8b3 	bl	8002c80 <SPI_EndRxTxTransaction>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d002      	beq.n	8002b26 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2220      	movs	r2, #32
 8002b24:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10a      	bne.n	8002b44 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b2e:	2300      	movs	r3, #0
 8002b30:	613b      	str	r3, [r7, #16]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	613b      	str	r3, [r7, #16]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	77fb      	strb	r3, [r7, #31]
 8002b50:	e000      	b.n	8002b54 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002b52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b64:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3720      	adds	r7, #32
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	603b      	str	r3, [r7, #0]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b80:	f7fe fd26 	bl	80015d0 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b90:	f7fe fd1e 	bl	80015d0 <HAL_GetTick>
 8002b94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b96:	4b39      	ldr	r3, [pc, #228]	; (8002c7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	015b      	lsls	r3, r3, #5
 8002b9c:	0d1b      	lsrs	r3, r3, #20
 8002b9e:	69fa      	ldr	r2, [r7, #28]
 8002ba0:	fb02 f303 	mul.w	r3, r2, r3
 8002ba4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ba6:	e054      	b.n	8002c52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bae:	d050      	beq.n	8002c52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bb0:	f7fe fd0e 	bl	80015d0 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	69fa      	ldr	r2, [r7, #28]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d902      	bls.n	8002bc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d13d      	bne.n	8002c42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002bd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bde:	d111      	bne.n	8002c04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002be8:	d004      	beq.n	8002bf4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf2:	d107      	bne.n	8002c04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c0c:	d10f      	bne.n	8002c2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e017      	b.n	8002c72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	bf0c      	ite	eq
 8002c62:	2301      	moveq	r3, #1
 8002c64:	2300      	movne	r3, #0
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	461a      	mov	r2, r3
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d19b      	bne.n	8002ba8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3720      	adds	r7, #32
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	200049fc 	.word	0x200049fc

08002c80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af02      	add	r7, sp, #8
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002c8c:	4b1b      	ldr	r3, [pc, #108]	; (8002cfc <SPI_EndRxTxTransaction+0x7c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a1b      	ldr	r2, [pc, #108]	; (8002d00 <SPI_EndRxTxTransaction+0x80>)
 8002c92:	fba2 2303 	umull	r2, r3, r2, r3
 8002c96:	0d5b      	lsrs	r3, r3, #21
 8002c98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ca0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002caa:	d112      	bne.n	8002cd2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2180      	movs	r1, #128	; 0x80
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f7ff ff5a 	bl	8002b70 <SPI_WaitFlagStateUntilTimeout>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d016      	beq.n	8002cf0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc6:	f043 0220 	orr.w	r2, r3, #32
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e00f      	b.n	8002cf2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00a      	beq.n	8002cee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce8:	2b80      	cmp	r3, #128	; 0x80
 8002cea:	d0f2      	beq.n	8002cd2 <SPI_EndRxTxTransaction+0x52>
 8002cec:	e000      	b.n	8002cf0 <SPI_EndRxTxTransaction+0x70>
        break;
 8002cee:	bf00      	nop
  }

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	200049fc 	.word	0x200049fc
 8002d00:	165e9f81 	.word	0x165e9f81

08002d04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e041      	b.n	8002d9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d106      	bne.n	8002d30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7fe faf0 	bl	8001310 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3304      	adds	r3, #4
 8002d40:	4619      	mov	r1, r3
 8002d42:	4610      	mov	r0, r2
 8002d44:	f000 fa96 	bl	8003274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d001      	beq.n	8002dbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e04e      	b.n	8002e5a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0201 	orr.w	r2, r2, #1
 8002dd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a23      	ldr	r2, [pc, #140]	; (8002e68 <HAL_TIM_Base_Start_IT+0xc4>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d022      	beq.n	8002e24 <HAL_TIM_Base_Start_IT+0x80>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de6:	d01d      	beq.n	8002e24 <HAL_TIM_Base_Start_IT+0x80>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a1f      	ldr	r2, [pc, #124]	; (8002e6c <HAL_TIM_Base_Start_IT+0xc8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d018      	beq.n	8002e24 <HAL_TIM_Base_Start_IT+0x80>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a1e      	ldr	r2, [pc, #120]	; (8002e70 <HAL_TIM_Base_Start_IT+0xcc>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d013      	beq.n	8002e24 <HAL_TIM_Base_Start_IT+0x80>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a1c      	ldr	r2, [pc, #112]	; (8002e74 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d00e      	beq.n	8002e24 <HAL_TIM_Base_Start_IT+0x80>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a1b      	ldr	r2, [pc, #108]	; (8002e78 <HAL_TIM_Base_Start_IT+0xd4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d009      	beq.n	8002e24 <HAL_TIM_Base_Start_IT+0x80>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a19      	ldr	r2, [pc, #100]	; (8002e7c <HAL_TIM_Base_Start_IT+0xd8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d004      	beq.n	8002e24 <HAL_TIM_Base_Start_IT+0x80>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a18      	ldr	r2, [pc, #96]	; (8002e80 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d111      	bne.n	8002e48 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2b06      	cmp	r3, #6
 8002e34:	d010      	beq.n	8002e58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f042 0201 	orr.w	r2, r2, #1
 8002e44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e46:	e007      	b.n	8002e58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	40010000 	.word	0x40010000
 8002e6c:	40000400 	.word	0x40000400
 8002e70:	40000800 	.word	0x40000800
 8002e74:	40000c00 	.word	0x40000c00
 8002e78:	40010400 	.word	0x40010400
 8002e7c:	40014000 	.word	0x40014000
 8002e80:	40001800 	.word	0x40001800

08002e84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d122      	bne.n	8002ee0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d11b      	bne.n	8002ee0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f06f 0202 	mvn.w	r2, #2
 8002eb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f9b5 	bl	8003236 <HAL_TIM_IC_CaptureCallback>
 8002ecc:	e005      	b.n	8002eda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f9a7 	bl	8003222 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 f9b8 	bl	800324a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d122      	bne.n	8002f34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b04      	cmp	r3, #4
 8002efa:	d11b      	bne.n	8002f34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f06f 0204 	mvn.w	r2, #4
 8002f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2202      	movs	r2, #2
 8002f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f98b 	bl	8003236 <HAL_TIM_IC_CaptureCallback>
 8002f20:	e005      	b.n	8002f2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f97d 	bl	8003222 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 f98e 	bl	800324a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d122      	bne.n	8002f88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f003 0308 	and.w	r3, r3, #8
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d11b      	bne.n	8002f88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f06f 0208 	mvn.w	r2, #8
 8002f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2204      	movs	r2, #4
 8002f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f961 	bl	8003236 <HAL_TIM_IC_CaptureCallback>
 8002f74:	e005      	b.n	8002f82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f953 	bl	8003222 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f964 	bl	800324a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f003 0310 	and.w	r3, r3, #16
 8002f92:	2b10      	cmp	r3, #16
 8002f94:	d122      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f003 0310 	and.w	r3, r3, #16
 8002fa0:	2b10      	cmp	r3, #16
 8002fa2:	d11b      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f06f 0210 	mvn.w	r2, #16
 8002fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2208      	movs	r2, #8
 8002fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f937 	bl	8003236 <HAL_TIM_IC_CaptureCallback>
 8002fc8:	e005      	b.n	8002fd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f929 	bl	8003222 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f93a 	bl	800324a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d10e      	bne.n	8003008 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d107      	bne.n	8003008 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f06f 0201 	mvn.w	r2, #1
 8003000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7fe fa44 	bl	8001490 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003012:	2b80      	cmp	r3, #128	; 0x80
 8003014:	d10e      	bne.n	8003034 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003020:	2b80      	cmp	r3, #128	; 0x80
 8003022:	d107      	bne.n	8003034 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800302c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fae0 	bl	80035f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303e:	2b40      	cmp	r3, #64	; 0x40
 8003040:	d10e      	bne.n	8003060 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304c:	2b40      	cmp	r3, #64	; 0x40
 800304e:	d107      	bne.n	8003060 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f8ff 	bl	800325e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	f003 0320 	and.w	r3, r3, #32
 800306a:	2b20      	cmp	r3, #32
 800306c:	d10e      	bne.n	800308c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f003 0320 	and.w	r3, r3, #32
 8003078:	2b20      	cmp	r3, #32
 800307a:	d107      	bne.n	800308c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f06f 0220 	mvn.w	r2, #32
 8003084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 faaa 	bl	80035e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800308c:	bf00      	nop
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d101      	bne.n	80030b0 <HAL_TIM_ConfigClockSource+0x1c>
 80030ac:	2302      	movs	r3, #2
 80030ae:	e0b4      	b.n	800321a <HAL_TIM_ConfigClockSource+0x186>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2202      	movs	r2, #2
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030e8:	d03e      	beq.n	8003168 <HAL_TIM_ConfigClockSource+0xd4>
 80030ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ee:	f200 8087 	bhi.w	8003200 <HAL_TIM_ConfigClockSource+0x16c>
 80030f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030f6:	f000 8086 	beq.w	8003206 <HAL_TIM_ConfigClockSource+0x172>
 80030fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030fe:	d87f      	bhi.n	8003200 <HAL_TIM_ConfigClockSource+0x16c>
 8003100:	2b70      	cmp	r3, #112	; 0x70
 8003102:	d01a      	beq.n	800313a <HAL_TIM_ConfigClockSource+0xa6>
 8003104:	2b70      	cmp	r3, #112	; 0x70
 8003106:	d87b      	bhi.n	8003200 <HAL_TIM_ConfigClockSource+0x16c>
 8003108:	2b60      	cmp	r3, #96	; 0x60
 800310a:	d050      	beq.n	80031ae <HAL_TIM_ConfigClockSource+0x11a>
 800310c:	2b60      	cmp	r3, #96	; 0x60
 800310e:	d877      	bhi.n	8003200 <HAL_TIM_ConfigClockSource+0x16c>
 8003110:	2b50      	cmp	r3, #80	; 0x50
 8003112:	d03c      	beq.n	800318e <HAL_TIM_ConfigClockSource+0xfa>
 8003114:	2b50      	cmp	r3, #80	; 0x50
 8003116:	d873      	bhi.n	8003200 <HAL_TIM_ConfigClockSource+0x16c>
 8003118:	2b40      	cmp	r3, #64	; 0x40
 800311a:	d058      	beq.n	80031ce <HAL_TIM_ConfigClockSource+0x13a>
 800311c:	2b40      	cmp	r3, #64	; 0x40
 800311e:	d86f      	bhi.n	8003200 <HAL_TIM_ConfigClockSource+0x16c>
 8003120:	2b30      	cmp	r3, #48	; 0x30
 8003122:	d064      	beq.n	80031ee <HAL_TIM_ConfigClockSource+0x15a>
 8003124:	2b30      	cmp	r3, #48	; 0x30
 8003126:	d86b      	bhi.n	8003200 <HAL_TIM_ConfigClockSource+0x16c>
 8003128:	2b20      	cmp	r3, #32
 800312a:	d060      	beq.n	80031ee <HAL_TIM_ConfigClockSource+0x15a>
 800312c:	2b20      	cmp	r3, #32
 800312e:	d867      	bhi.n	8003200 <HAL_TIM_ConfigClockSource+0x16c>
 8003130:	2b00      	cmp	r3, #0
 8003132:	d05c      	beq.n	80031ee <HAL_TIM_ConfigClockSource+0x15a>
 8003134:	2b10      	cmp	r3, #16
 8003136:	d05a      	beq.n	80031ee <HAL_TIM_ConfigClockSource+0x15a>
 8003138:	e062      	b.n	8003200 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6818      	ldr	r0, [r3, #0]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	6899      	ldr	r1, [r3, #8]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f000 f9ad 	bl	80034a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800315c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	609a      	str	r2, [r3, #8]
      break;
 8003166:	e04f      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	6899      	ldr	r1, [r3, #8]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f000 f996 	bl	80034a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800318a:	609a      	str	r2, [r3, #8]
      break;
 800318c:	e03c      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6818      	ldr	r0, [r3, #0]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	6859      	ldr	r1, [r3, #4]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	461a      	mov	r2, r3
 800319c:	f000 f90a 	bl	80033b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2150      	movs	r1, #80	; 0x50
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 f963 	bl	8003472 <TIM_ITRx_SetConfig>
      break;
 80031ac:	e02c      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6818      	ldr	r0, [r3, #0]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	6859      	ldr	r1, [r3, #4]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	461a      	mov	r2, r3
 80031bc:	f000 f929 	bl	8003412 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2160      	movs	r1, #96	; 0x60
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 f953 	bl	8003472 <TIM_ITRx_SetConfig>
      break;
 80031cc:	e01c      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	6859      	ldr	r1, [r3, #4]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	461a      	mov	r2, r3
 80031dc:	f000 f8ea 	bl	80033b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2140      	movs	r1, #64	; 0x40
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 f943 	bl	8003472 <TIM_ITRx_SetConfig>
      break;
 80031ec:	e00c      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4619      	mov	r1, r3
 80031f8:	4610      	mov	r0, r2
 80031fa:	f000 f93a 	bl	8003472 <TIM_ITRx_SetConfig>
      break;
 80031fe:	e003      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	73fb      	strb	r3, [r7, #15]
      break;
 8003204:	e000      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003206:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003218:	7bfb      	ldrb	r3, [r7, #15]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
	...

08003274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a40      	ldr	r2, [pc, #256]	; (8003388 <TIM_Base_SetConfig+0x114>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d013      	beq.n	80032b4 <TIM_Base_SetConfig+0x40>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003292:	d00f      	beq.n	80032b4 <TIM_Base_SetConfig+0x40>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a3d      	ldr	r2, [pc, #244]	; (800338c <TIM_Base_SetConfig+0x118>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d00b      	beq.n	80032b4 <TIM_Base_SetConfig+0x40>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a3c      	ldr	r2, [pc, #240]	; (8003390 <TIM_Base_SetConfig+0x11c>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d007      	beq.n	80032b4 <TIM_Base_SetConfig+0x40>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a3b      	ldr	r2, [pc, #236]	; (8003394 <TIM_Base_SetConfig+0x120>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d003      	beq.n	80032b4 <TIM_Base_SetConfig+0x40>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a3a      	ldr	r2, [pc, #232]	; (8003398 <TIM_Base_SetConfig+0x124>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d108      	bne.n	80032c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a2f      	ldr	r2, [pc, #188]	; (8003388 <TIM_Base_SetConfig+0x114>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d02b      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d4:	d027      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a2c      	ldr	r2, [pc, #176]	; (800338c <TIM_Base_SetConfig+0x118>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d023      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a2b      	ldr	r2, [pc, #172]	; (8003390 <TIM_Base_SetConfig+0x11c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d01f      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a2a      	ldr	r2, [pc, #168]	; (8003394 <TIM_Base_SetConfig+0x120>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d01b      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a29      	ldr	r2, [pc, #164]	; (8003398 <TIM_Base_SetConfig+0x124>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d017      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a28      	ldr	r2, [pc, #160]	; (800339c <TIM_Base_SetConfig+0x128>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d013      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a27      	ldr	r2, [pc, #156]	; (80033a0 <TIM_Base_SetConfig+0x12c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00f      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a26      	ldr	r2, [pc, #152]	; (80033a4 <TIM_Base_SetConfig+0x130>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00b      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a25      	ldr	r2, [pc, #148]	; (80033a8 <TIM_Base_SetConfig+0x134>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d007      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a24      	ldr	r2, [pc, #144]	; (80033ac <TIM_Base_SetConfig+0x138>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d003      	beq.n	8003326 <TIM_Base_SetConfig+0xb2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a23      	ldr	r2, [pc, #140]	; (80033b0 <TIM_Base_SetConfig+0x13c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d108      	bne.n	8003338 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800332c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	4313      	orrs	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	4313      	orrs	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a0a      	ldr	r2, [pc, #40]	; (8003388 <TIM_Base_SetConfig+0x114>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d003      	beq.n	800336c <TIM_Base_SetConfig+0xf8>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a0c      	ldr	r2, [pc, #48]	; (8003398 <TIM_Base_SetConfig+0x124>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d103      	bne.n	8003374 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	615a      	str	r2, [r3, #20]
}
 800337a:	bf00      	nop
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	40010000 	.word	0x40010000
 800338c:	40000400 	.word	0x40000400
 8003390:	40000800 	.word	0x40000800
 8003394:	40000c00 	.word	0x40000c00
 8003398:	40010400 	.word	0x40010400
 800339c:	40014000 	.word	0x40014000
 80033a0:	40014400 	.word	0x40014400
 80033a4:	40014800 	.word	0x40014800
 80033a8:	40001800 	.word	0x40001800
 80033ac:	40001c00 	.word	0x40001c00
 80033b0:	40002000 	.word	0x40002000

080033b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	f023 0201 	bic.w	r2, r3, #1
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	011b      	lsls	r3, r3, #4
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f023 030a 	bic.w	r3, r3, #10
 80033f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	621a      	str	r2, [r3, #32]
}
 8003406:	bf00      	nop
 8003408:	371c      	adds	r7, #28
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003412:	b480      	push	{r7}
 8003414:	b087      	sub	sp, #28
 8003416:	af00      	add	r7, sp, #0
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	f023 0210 	bic.w	r2, r3, #16
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800343c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	031b      	lsls	r3, r3, #12
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	4313      	orrs	r3, r2
 8003446:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800344e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4313      	orrs	r3, r2
 8003458:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	621a      	str	r2, [r3, #32]
}
 8003466:	bf00      	nop
 8003468:	371c      	adds	r7, #28
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003472:	b480      	push	{r7}
 8003474:	b085      	sub	sp, #20
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003488:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4313      	orrs	r3, r2
 8003490:	f043 0307 	orr.w	r3, r3, #7
 8003494:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	609a      	str	r2, [r3, #8]
}
 800349c:	bf00      	nop
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
 80034b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	021a      	lsls	r2, r3, #8
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	431a      	orrs	r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	609a      	str	r2, [r3, #8]
}
 80034dc:	bf00      	nop
 80034de:	371c      	adds	r7, #28
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d101      	bne.n	8003500 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034fc:	2302      	movs	r3, #2
 80034fe:	e05a      	b.n	80035b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2202      	movs	r2, #2
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003526:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4313      	orrs	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a21      	ldr	r2, [pc, #132]	; (80035c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d022      	beq.n	800358a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800354c:	d01d      	beq.n	800358a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a1d      	ldr	r2, [pc, #116]	; (80035c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d018      	beq.n	800358a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a1b      	ldr	r2, [pc, #108]	; (80035cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d013      	beq.n	800358a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a1a      	ldr	r2, [pc, #104]	; (80035d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d00e      	beq.n	800358a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a18      	ldr	r2, [pc, #96]	; (80035d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d009      	beq.n	800358a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a17      	ldr	r2, [pc, #92]	; (80035d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d004      	beq.n	800358a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a15      	ldr	r2, [pc, #84]	; (80035dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d10c      	bne.n	80035a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003590:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	4313      	orrs	r3, r2
 800359a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	40010000 	.word	0x40010000
 80035c8:	40000400 	.word	0x40000400
 80035cc:	40000800 	.word	0x40000800
 80035d0:	40000c00 	.word	0x40000c00
 80035d4:	40010400 	.word	0x40010400
 80035d8:	40014000 	.word	0x40014000
 80035dc:	40001800 	.word	0x40001800

080035e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e03f      	b.n	800369a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7fd fe96 	bl	8001360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2224      	movs	r2, #36	; 0x24
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800364a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f829 	bl	80036a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003660:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695a      	ldr	r2, [r3, #20]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003670:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68da      	ldr	r2, [r3, #12]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003680:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
	...

080036a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036a8:	b0c0      	sub	sp, #256	; 0x100
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c0:	68d9      	ldr	r1, [r3, #12]
 80036c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	ea40 0301 	orr.w	r3, r0, r1
 80036cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	431a      	orrs	r2, r3
 80036dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036fc:	f021 010c 	bic.w	r1, r1, #12
 8003700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800370a:	430b      	orrs	r3, r1
 800370c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800370e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800371a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800371e:	6999      	ldr	r1, [r3, #24]
 8003720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	ea40 0301 	orr.w	r3, r0, r1
 800372a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800372c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	4b8f      	ldr	r3, [pc, #572]	; (8003970 <UART_SetConfig+0x2cc>)
 8003734:	429a      	cmp	r2, r3
 8003736:	d005      	beq.n	8003744 <UART_SetConfig+0xa0>
 8003738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	4b8d      	ldr	r3, [pc, #564]	; (8003974 <UART_SetConfig+0x2d0>)
 8003740:	429a      	cmp	r2, r3
 8003742:	d104      	bne.n	800374e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003744:	f7fe fb6c 	bl	8001e20 <HAL_RCC_GetPCLK2Freq>
 8003748:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800374c:	e003      	b.n	8003756 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800374e:	f7fe fb53 	bl	8001df8 <HAL_RCC_GetPCLK1Freq>
 8003752:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003760:	f040 810c 	bne.w	800397c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003768:	2200      	movs	r2, #0
 800376a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800376e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003772:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003776:	4622      	mov	r2, r4
 8003778:	462b      	mov	r3, r5
 800377a:	1891      	adds	r1, r2, r2
 800377c:	65b9      	str	r1, [r7, #88]	; 0x58
 800377e:	415b      	adcs	r3, r3
 8003780:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003782:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003786:	4621      	mov	r1, r4
 8003788:	eb12 0801 	adds.w	r8, r2, r1
 800378c:	4629      	mov	r1, r5
 800378e:	eb43 0901 	adc.w	r9, r3, r1
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800379e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037a6:	4690      	mov	r8, r2
 80037a8:	4699      	mov	r9, r3
 80037aa:	4623      	mov	r3, r4
 80037ac:	eb18 0303 	adds.w	r3, r8, r3
 80037b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80037b4:	462b      	mov	r3, r5
 80037b6:	eb49 0303 	adc.w	r3, r9, r3
 80037ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80037be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80037ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80037ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80037d2:	460b      	mov	r3, r1
 80037d4:	18db      	adds	r3, r3, r3
 80037d6:	653b      	str	r3, [r7, #80]	; 0x50
 80037d8:	4613      	mov	r3, r2
 80037da:	eb42 0303 	adc.w	r3, r2, r3
 80037de:	657b      	str	r3, [r7, #84]	; 0x54
 80037e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80037e8:	f7fc fd0c 	bl	8000204 <__aeabi_uldivmod>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4b61      	ldr	r3, [pc, #388]	; (8003978 <UART_SetConfig+0x2d4>)
 80037f2:	fba3 2302 	umull	r2, r3, r3, r2
 80037f6:	095b      	lsrs	r3, r3, #5
 80037f8:	011c      	lsls	r4, r3, #4
 80037fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037fe:	2200      	movs	r2, #0
 8003800:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003804:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003808:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800380c:	4642      	mov	r2, r8
 800380e:	464b      	mov	r3, r9
 8003810:	1891      	adds	r1, r2, r2
 8003812:	64b9      	str	r1, [r7, #72]	; 0x48
 8003814:	415b      	adcs	r3, r3
 8003816:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003818:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800381c:	4641      	mov	r1, r8
 800381e:	eb12 0a01 	adds.w	sl, r2, r1
 8003822:	4649      	mov	r1, r9
 8003824:	eb43 0b01 	adc.w	fp, r3, r1
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003834:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003838:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800383c:	4692      	mov	sl, r2
 800383e:	469b      	mov	fp, r3
 8003840:	4643      	mov	r3, r8
 8003842:	eb1a 0303 	adds.w	r3, sl, r3
 8003846:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800384a:	464b      	mov	r3, r9
 800384c:	eb4b 0303 	adc.w	r3, fp, r3
 8003850:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003860:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003864:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003868:	460b      	mov	r3, r1
 800386a:	18db      	adds	r3, r3, r3
 800386c:	643b      	str	r3, [r7, #64]	; 0x40
 800386e:	4613      	mov	r3, r2
 8003870:	eb42 0303 	adc.w	r3, r2, r3
 8003874:	647b      	str	r3, [r7, #68]	; 0x44
 8003876:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800387a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800387e:	f7fc fcc1 	bl	8000204 <__aeabi_uldivmod>
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	4611      	mov	r1, r2
 8003888:	4b3b      	ldr	r3, [pc, #236]	; (8003978 <UART_SetConfig+0x2d4>)
 800388a:	fba3 2301 	umull	r2, r3, r3, r1
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	2264      	movs	r2, #100	; 0x64
 8003892:	fb02 f303 	mul.w	r3, r2, r3
 8003896:	1acb      	subs	r3, r1, r3
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800389e:	4b36      	ldr	r3, [pc, #216]	; (8003978 <UART_SetConfig+0x2d4>)
 80038a0:	fba3 2302 	umull	r2, r3, r3, r2
 80038a4:	095b      	lsrs	r3, r3, #5
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038ac:	441c      	add	r4, r3
 80038ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038b2:	2200      	movs	r2, #0
 80038b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80038bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80038c0:	4642      	mov	r2, r8
 80038c2:	464b      	mov	r3, r9
 80038c4:	1891      	adds	r1, r2, r2
 80038c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80038c8:	415b      	adcs	r3, r3
 80038ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038d0:	4641      	mov	r1, r8
 80038d2:	1851      	adds	r1, r2, r1
 80038d4:	6339      	str	r1, [r7, #48]	; 0x30
 80038d6:	4649      	mov	r1, r9
 80038d8:	414b      	adcs	r3, r1
 80038da:	637b      	str	r3, [r7, #52]	; 0x34
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	f04f 0300 	mov.w	r3, #0
 80038e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80038e8:	4659      	mov	r1, fp
 80038ea:	00cb      	lsls	r3, r1, #3
 80038ec:	4651      	mov	r1, sl
 80038ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038f2:	4651      	mov	r1, sl
 80038f4:	00ca      	lsls	r2, r1, #3
 80038f6:	4610      	mov	r0, r2
 80038f8:	4619      	mov	r1, r3
 80038fa:	4603      	mov	r3, r0
 80038fc:	4642      	mov	r2, r8
 80038fe:	189b      	adds	r3, r3, r2
 8003900:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003904:	464b      	mov	r3, r9
 8003906:	460a      	mov	r2, r1
 8003908:	eb42 0303 	adc.w	r3, r2, r3
 800390c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800391c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003920:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003924:	460b      	mov	r3, r1
 8003926:	18db      	adds	r3, r3, r3
 8003928:	62bb      	str	r3, [r7, #40]	; 0x28
 800392a:	4613      	mov	r3, r2
 800392c:	eb42 0303 	adc.w	r3, r2, r3
 8003930:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003932:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003936:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800393a:	f7fc fc63 	bl	8000204 <__aeabi_uldivmod>
 800393e:	4602      	mov	r2, r0
 8003940:	460b      	mov	r3, r1
 8003942:	4b0d      	ldr	r3, [pc, #52]	; (8003978 <UART_SetConfig+0x2d4>)
 8003944:	fba3 1302 	umull	r1, r3, r3, r2
 8003948:	095b      	lsrs	r3, r3, #5
 800394a:	2164      	movs	r1, #100	; 0x64
 800394c:	fb01 f303 	mul.w	r3, r1, r3
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	3332      	adds	r3, #50	; 0x32
 8003956:	4a08      	ldr	r2, [pc, #32]	; (8003978 <UART_SetConfig+0x2d4>)
 8003958:	fba2 2303 	umull	r2, r3, r2, r3
 800395c:	095b      	lsrs	r3, r3, #5
 800395e:	f003 0207 	and.w	r2, r3, #7
 8003962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4422      	add	r2, r4
 800396a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800396c:	e105      	b.n	8003b7a <UART_SetConfig+0x4d6>
 800396e:	bf00      	nop
 8003970:	40011000 	.word	0x40011000
 8003974:	40011400 	.word	0x40011400
 8003978:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800397c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003980:	2200      	movs	r2, #0
 8003982:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003986:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800398a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800398e:	4642      	mov	r2, r8
 8003990:	464b      	mov	r3, r9
 8003992:	1891      	adds	r1, r2, r2
 8003994:	6239      	str	r1, [r7, #32]
 8003996:	415b      	adcs	r3, r3
 8003998:	627b      	str	r3, [r7, #36]	; 0x24
 800399a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800399e:	4641      	mov	r1, r8
 80039a0:	1854      	adds	r4, r2, r1
 80039a2:	4649      	mov	r1, r9
 80039a4:	eb43 0501 	adc.w	r5, r3, r1
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	f04f 0300 	mov.w	r3, #0
 80039b0:	00eb      	lsls	r3, r5, #3
 80039b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039b6:	00e2      	lsls	r2, r4, #3
 80039b8:	4614      	mov	r4, r2
 80039ba:	461d      	mov	r5, r3
 80039bc:	4643      	mov	r3, r8
 80039be:	18e3      	adds	r3, r4, r3
 80039c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039c4:	464b      	mov	r3, r9
 80039c6:	eb45 0303 	adc.w	r3, r5, r3
 80039ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	f04f 0300 	mov.w	r3, #0
 80039e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039ea:	4629      	mov	r1, r5
 80039ec:	008b      	lsls	r3, r1, #2
 80039ee:	4621      	mov	r1, r4
 80039f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039f4:	4621      	mov	r1, r4
 80039f6:	008a      	lsls	r2, r1, #2
 80039f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80039fc:	f7fc fc02 	bl	8000204 <__aeabi_uldivmod>
 8003a00:	4602      	mov	r2, r0
 8003a02:	460b      	mov	r3, r1
 8003a04:	4b60      	ldr	r3, [pc, #384]	; (8003b88 <UART_SetConfig+0x4e4>)
 8003a06:	fba3 2302 	umull	r2, r3, r3, r2
 8003a0a:	095b      	lsrs	r3, r3, #5
 8003a0c:	011c      	lsls	r4, r3, #4
 8003a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a12:	2200      	movs	r2, #0
 8003a14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a20:	4642      	mov	r2, r8
 8003a22:	464b      	mov	r3, r9
 8003a24:	1891      	adds	r1, r2, r2
 8003a26:	61b9      	str	r1, [r7, #24]
 8003a28:	415b      	adcs	r3, r3
 8003a2a:	61fb      	str	r3, [r7, #28]
 8003a2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a30:	4641      	mov	r1, r8
 8003a32:	1851      	adds	r1, r2, r1
 8003a34:	6139      	str	r1, [r7, #16]
 8003a36:	4649      	mov	r1, r9
 8003a38:	414b      	adcs	r3, r1
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	f04f 0200 	mov.w	r2, #0
 8003a40:	f04f 0300 	mov.w	r3, #0
 8003a44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a48:	4659      	mov	r1, fp
 8003a4a:	00cb      	lsls	r3, r1, #3
 8003a4c:	4651      	mov	r1, sl
 8003a4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a52:	4651      	mov	r1, sl
 8003a54:	00ca      	lsls	r2, r1, #3
 8003a56:	4610      	mov	r0, r2
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	4642      	mov	r2, r8
 8003a5e:	189b      	adds	r3, r3, r2
 8003a60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a64:	464b      	mov	r3, r9
 8003a66:	460a      	mov	r2, r1
 8003a68:	eb42 0303 	adc.w	r3, r2, r3
 8003a6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a7c:	f04f 0200 	mov.w	r2, #0
 8003a80:	f04f 0300 	mov.w	r3, #0
 8003a84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a88:	4649      	mov	r1, r9
 8003a8a:	008b      	lsls	r3, r1, #2
 8003a8c:	4641      	mov	r1, r8
 8003a8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a92:	4641      	mov	r1, r8
 8003a94:	008a      	lsls	r2, r1, #2
 8003a96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a9a:	f7fc fbb3 	bl	8000204 <__aeabi_uldivmod>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	4b39      	ldr	r3, [pc, #228]	; (8003b88 <UART_SetConfig+0x4e4>)
 8003aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8003aa8:	095b      	lsrs	r3, r3, #5
 8003aaa:	2164      	movs	r1, #100	; 0x64
 8003aac:	fb01 f303 	mul.w	r3, r1, r3
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	3332      	adds	r3, #50	; 0x32
 8003ab6:	4a34      	ldr	r2, [pc, #208]	; (8003b88 <UART_SetConfig+0x4e4>)
 8003ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8003abc:	095b      	lsrs	r3, r3, #5
 8003abe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ac2:	441c      	add	r4, r3
 8003ac4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ac8:	2200      	movs	r2, #0
 8003aca:	673b      	str	r3, [r7, #112]	; 0x70
 8003acc:	677a      	str	r2, [r7, #116]	; 0x74
 8003ace:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ad2:	4642      	mov	r2, r8
 8003ad4:	464b      	mov	r3, r9
 8003ad6:	1891      	adds	r1, r2, r2
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	415b      	adcs	r3, r3
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ae2:	4641      	mov	r1, r8
 8003ae4:	1851      	adds	r1, r2, r1
 8003ae6:	6039      	str	r1, [r7, #0]
 8003ae8:	4649      	mov	r1, r9
 8003aea:	414b      	adcs	r3, r1
 8003aec:	607b      	str	r3, [r7, #4]
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003afa:	4659      	mov	r1, fp
 8003afc:	00cb      	lsls	r3, r1, #3
 8003afe:	4651      	mov	r1, sl
 8003b00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b04:	4651      	mov	r1, sl
 8003b06:	00ca      	lsls	r2, r1, #3
 8003b08:	4610      	mov	r0, r2
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	4642      	mov	r2, r8
 8003b10:	189b      	adds	r3, r3, r2
 8003b12:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b14:	464b      	mov	r3, r9
 8003b16:	460a      	mov	r2, r1
 8003b18:	eb42 0303 	adc.w	r3, r2, r3
 8003b1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	663b      	str	r3, [r7, #96]	; 0x60
 8003b28:	667a      	str	r2, [r7, #100]	; 0x64
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b36:	4649      	mov	r1, r9
 8003b38:	008b      	lsls	r3, r1, #2
 8003b3a:	4641      	mov	r1, r8
 8003b3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b40:	4641      	mov	r1, r8
 8003b42:	008a      	lsls	r2, r1, #2
 8003b44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b48:	f7fc fb5c 	bl	8000204 <__aeabi_uldivmod>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4b0d      	ldr	r3, [pc, #52]	; (8003b88 <UART_SetConfig+0x4e4>)
 8003b52:	fba3 1302 	umull	r1, r3, r3, r2
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	2164      	movs	r1, #100	; 0x64
 8003b5a:	fb01 f303 	mul.w	r3, r1, r3
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	3332      	adds	r3, #50	; 0x32
 8003b64:	4a08      	ldr	r2, [pc, #32]	; (8003b88 <UART_SetConfig+0x4e4>)
 8003b66:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6a:	095b      	lsrs	r3, r3, #5
 8003b6c:	f003 020f 	and.w	r2, r3, #15
 8003b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4422      	add	r2, r4
 8003b78:	609a      	str	r2, [r3, #8]
}
 8003b7a:	bf00      	nop
 8003b7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b80:	46bd      	mov	sp, r7
 8003b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b86:	bf00      	nop
 8003b88:	51eb851f 	.word	0x51eb851f

08003b8c <__libc_init_array>:
 8003b8c:	b570      	push	{r4, r5, r6, lr}
 8003b8e:	4d0d      	ldr	r5, [pc, #52]	; (8003bc4 <__libc_init_array+0x38>)
 8003b90:	4c0d      	ldr	r4, [pc, #52]	; (8003bc8 <__libc_init_array+0x3c>)
 8003b92:	1b64      	subs	r4, r4, r5
 8003b94:	10a4      	asrs	r4, r4, #2
 8003b96:	2600      	movs	r6, #0
 8003b98:	42a6      	cmp	r6, r4
 8003b9a:	d109      	bne.n	8003bb0 <__libc_init_array+0x24>
 8003b9c:	4d0b      	ldr	r5, [pc, #44]	; (8003bcc <__libc_init_array+0x40>)
 8003b9e:	4c0c      	ldr	r4, [pc, #48]	; (8003bd0 <__libc_init_array+0x44>)
 8003ba0:	f000 f820 	bl	8003be4 <_init>
 8003ba4:	1b64      	subs	r4, r4, r5
 8003ba6:	10a4      	asrs	r4, r4, #2
 8003ba8:	2600      	movs	r6, #0
 8003baa:	42a6      	cmp	r6, r4
 8003bac:	d105      	bne.n	8003bba <__libc_init_array+0x2e>
 8003bae:	bd70      	pop	{r4, r5, r6, pc}
 8003bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bb4:	4798      	blx	r3
 8003bb6:	3601      	adds	r6, #1
 8003bb8:	e7ee      	b.n	8003b98 <__libc_init_array+0xc>
 8003bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bbe:	4798      	blx	r3
 8003bc0:	3601      	adds	r6, #1
 8003bc2:	e7f2      	b.n	8003baa <__libc_init_array+0x1e>
 8003bc4:	08003c38 	.word	0x08003c38
 8003bc8:	08003c38 	.word	0x08003c38
 8003bcc:	08003c38 	.word	0x08003c38
 8003bd0:	08003c3c 	.word	0x08003c3c

08003bd4 <memset>:
 8003bd4:	4402      	add	r2, r0
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d100      	bne.n	8003bde <memset+0xa>
 8003bdc:	4770      	bx	lr
 8003bde:	f803 1b01 	strb.w	r1, [r3], #1
 8003be2:	e7f9      	b.n	8003bd8 <memset+0x4>

08003be4 <_init>:
 8003be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be6:	bf00      	nop
 8003be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bea:	bc08      	pop	{r3}
 8003bec:	469e      	mov	lr, r3
 8003bee:	4770      	bx	lr

08003bf0 <_fini>:
 8003bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf2:	bf00      	nop
 8003bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bf6:	bc08      	pop	{r3}
 8003bf8:	469e      	mov	lr, r3
 8003bfa:	4770      	bx	lr
