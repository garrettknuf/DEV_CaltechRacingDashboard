
DisplayILI9488.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029e8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002bac  08002bac  00012bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bc4  08002bc4  000249f8  2**0
                  CONTENTS
  4 .ARM          00000008  08002bc4  08002bc4  00012bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002bcc  08002bcc  000249f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bcc  08002bcc  00012bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bd0  08002bd0  00012bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000049f8  20000000  08002bd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  200049f8  080075cc  000249f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ab4  080075cc  00024ab4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000249f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b039  00000000  00000000  00024a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000199a  00000000  00000000  0002fa61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f0  00000000  00000000  00031400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000848  00000000  00000000  00031cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001831  00000000  00000000  00032538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b57f  00000000  00000000  00033d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6487  00000000  00000000  0003f2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010576f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023d0  00000000  00000000  001057c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200049f8 	.word	0x200049f8
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002b94 	.word	0x08002b94

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200049fc 	.word	0x200049fc
 8000200:	08002b94 	.word	0x08002b94

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <Display_Init>:

/* Auto-generated includes */
#include "main.h"

void Display_Init(SPI_HandleTypeDef *hspi)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	/* Hardware reset display */
	Display_HWReset(hspi);
 8000510:	6878      	ldr	r0, [r7, #4]
 8000512:	f000 f82d 	bl	8000570 <Display_HWReset>

	/* Software reset */
	Display_TransmitCmd(hspi, DISPLAY_SWRESET);
 8000516:	2101      	movs	r1, #1
 8000518:	6878      	ldr	r0, [r7, #4]
 800051a:	f000 f843 	bl	80005a4 <Display_TransmitCmd>
	HAL_Delay(250);
 800051e:	20fa      	movs	r0, #250	; 0xfa
 8000520:	f000 fd1a 	bl	8000f58 <HAL_Delay>

	/* Exit sleep mode */
	Display_TransmitCmd(hspi, DISPLAY_SLEEPOUT);
 8000524:	2111      	movs	r1, #17
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f000 f83c 	bl	80005a4 <Display_TransmitCmd>
	HAL_Delay(100);
 800052c:	2064      	movs	r0, #100	; 0x64
 800052e:	f000 fd13 	bl	8000f58 <HAL_Delay>

	/* 4-line serial interface mode control */
	Display_TransmitCmdParam(hspi, DISPLAY_INTMCTRL, 0x00);
 8000532:	2200      	movs	r2, #0
 8000534:	21b0      	movs	r1, #176	; 0xb0
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f000 f878 	bl	800062c <Display_TransmitCmdParam>

	/* 3-bit RGB interface pixel format */
	Display_TransmitCmdParam(hspi, DISPLAY_INTPXLFMT, 0x01);
 800053c:	2201      	movs	r2, #1
 800053e:	213a      	movs	r1, #58	; 0x3a
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f000 f873 	bl	800062c <Display_TransmitCmdParam>

	/* Memory access control sets scanning direction of frame memory */
	Display_TransmitCmdParam(hspi, DISPLAY_MEMACTRL, 0x08);
 8000546:	2208      	movs	r2, #8
 8000548:	2136      	movs	r1, #54	; 0x36
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f000 f86e 	bl	800062c <Display_TransmitCmdParam>

	/* TODO modify positive, negative, and digital gamma settings */

	/* Exit sleep mode */
	Display_TransmitCmd(hspi, DISPLAY_SLEEPOUT);
 8000550:	2111      	movs	r1, #17
 8000552:	6878      	ldr	r0, [r7, #4]
 8000554:	f000 f826 	bl	80005a4 <Display_TransmitCmd>
	HAL_Delay(250);
 8000558:	20fa      	movs	r0, #250	; 0xfa
 800055a:	f000 fcfd 	bl	8000f58 <HAL_Delay>

	/* Turn display on */
	Display_TransmitCmd(hspi, DISPLAY_DISPON);
 800055e:	2129      	movs	r1, #41	; 0x29
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f000 f81f 	bl	80005a4 <Display_TransmitCmd>
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
	...

08000570 <Display_HWReset>:

void Display_HWReset(SPI_HandleTypeDef *hspi)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	/* Hold RESET pin LOW with delay */
	HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2101      	movs	r1, #1
 800057c:	4808      	ldr	r0, [pc, #32]	; (80005a0 <Display_HWReset+0x30>)
 800057e:	f000 ff89 	bl	8001494 <HAL_GPIO_WritePin>
	HAL_Delay(DISPLAY_RESET_TIME_MS);
 8000582:	200a      	movs	r0, #10
 8000584:	f000 fce8 	bl	8000f58 <HAL_Delay>

	/* Set RESET pin HIGH and wait for system reset to complete */
	HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_SET);
 8000588:	2201      	movs	r2, #1
 800058a:	2101      	movs	r1, #1
 800058c:	4804      	ldr	r0, [pc, #16]	; (80005a0 <Display_HWReset+0x30>)
 800058e:	f000 ff81 	bl	8001494 <HAL_GPIO_WritePin>
	HAL_Delay(DISPLAY_RESET_TIME_MS);
 8000592:	200a      	movs	r0, #10
 8000594:	f000 fce0 	bl	8000f58 <HAL_Delay>
}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40020800 	.word	0x40020800

080005a4 <Display_TransmitCmd>:

void Display_TransmitCmd(SPI_HandleTypeDef *hspi, uint8_t cmd)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	460b      	mov	r3, r1
 80005ae:	70fb      	strb	r3, [r7, #3]
	/* DC/RS LOW since writing command */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2101      	movs	r1, #1
 80005b4:	480b      	ldr	r0, [pc, #44]	; (80005e4 <Display_TransmitCmd+0x40>)
 80005b6:	f000 ff6d 	bl	8001494 <HAL_GPIO_WritePin>

	/* Set CS LOW */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2110      	movs	r1, #16
 80005be:	4809      	ldr	r0, [pc, #36]	; (80005e4 <Display_TransmitCmd+0x40>)
 80005c0:	f000 ff68 	bl	8001494 <HAL_GPIO_WritePin>

	/* Write SPI data */
	HAL_SPI_Transmit(hspi, &cmd, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80005c4:	1cf9      	adds	r1, r7, #3
 80005c6:	2364      	movs	r3, #100	; 0x64
 80005c8:	2201      	movs	r2, #1
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f001 fded 	bl	80021aa <HAL_SPI_Transmit>

	/* Set CS HIGH */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2110      	movs	r1, #16
 80005d4:	4803      	ldr	r0, [pc, #12]	; (80005e4 <Display_TransmitCmd+0x40>)
 80005d6:	f000 ff5d 	bl	8001494 <HAL_GPIO_WritePin>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40020400 	.word	0x40020400

080005e8 <Display_TransmitParam>:

void Display_TransmitParam(SPI_HandleTypeDef *hspi, uint8_t param)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	70fb      	strb	r3, [r7, #3]
	/* DC/RS HIGH since writing data */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_SET);
 80005f4:	2201      	movs	r2, #1
 80005f6:	2101      	movs	r1, #1
 80005f8:	480b      	ldr	r0, [pc, #44]	; (8000628 <Display_TransmitParam+0x40>)
 80005fa:	f000 ff4b 	bl	8001494 <HAL_GPIO_WritePin>

	/* Set CS LOW */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2110      	movs	r1, #16
 8000602:	4809      	ldr	r0, [pc, #36]	; (8000628 <Display_TransmitParam+0x40>)
 8000604:	f000 ff46 	bl	8001494 <HAL_GPIO_WritePin>

	/* Write SPI data */
	HAL_SPI_Transmit(hspi, &param, sizeof(uint8_t), SPI_TIMEOUT_MS);
 8000608:	1cf9      	adds	r1, r7, #3
 800060a:	2364      	movs	r3, #100	; 0x64
 800060c:	2201      	movs	r2, #1
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f001 fdcb 	bl	80021aa <HAL_SPI_Transmit>

	/* Set CS HIGH */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000614:	2201      	movs	r2, #1
 8000616:	2110      	movs	r1, #16
 8000618:	4803      	ldr	r0, [pc, #12]	; (8000628 <Display_TransmitParam+0x40>)
 800061a:	f000 ff3b 	bl	8001494 <HAL_GPIO_WritePin>
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40020400 	.word	0x40020400

0800062c <Display_TransmitCmdParam>:

void Display_TransmitCmdParam(SPI_HandleTypeDef *hspi, uint8_t cmd, uint8_t param)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	460b      	mov	r3, r1
 8000636:	70fb      	strb	r3, [r7, #3]
 8000638:	4613      	mov	r3, r2
 800063a:	70bb      	strb	r3, [r7, #2]
	/* Send command */
	Display_TransmitCmd(hspi, cmd);
 800063c:	78fb      	ldrb	r3, [r7, #3]
 800063e:	4619      	mov	r1, r3
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f7ff ffaf 	bl	80005a4 <Display_TransmitCmd>

	/* Send parameter */
	Display_TransmitParam(hspi, param);
 8000646:	78bb      	ldrb	r3, [r7, #2]
 8000648:	4619      	mov	r1, r3
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f7ff ffcc 	bl	80005e8 <Display_TransmitParam>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <Display_SetWindow>:

void Display_SetWindow(SPI_HandleTypeDef *hspi, uint16_t xs, uint16_t ys, uint16_t xe, uint16_t ye)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	4608      	mov	r0, r1
 8000662:	4611      	mov	r1, r2
 8000664:	461a      	mov	r2, r3
 8000666:	4603      	mov	r3, r0
 8000668:	817b      	strh	r3, [r7, #10]
 800066a:	460b      	mov	r3, r1
 800066c:	813b      	strh	r3, [r7, #8]
 800066e:	4613      	mov	r3, r2
 8000670:	80fb      	strh	r3, [r7, #6]
	/* Check coordinate are not out of range */
	if ((xs > xe) || (xe > DISPLAY_MAX_X) || (ys > ye) || (ye > DISPLAY_MAX_Y)) {
 8000672:	897a      	ldrh	r2, [r7, #10]
 8000674:	88fb      	ldrh	r3, [r7, #6]
 8000676:	429a      	cmp	r2, r3
 8000678:	f200 808d 	bhi.w	8000796 <Display_SetWindow+0x13e>
 800067c:	88fb      	ldrh	r3, [r7, #6]
 800067e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000682:	f080 8088 	bcs.w	8000796 <Display_SetWindow+0x13e>
 8000686:	893a      	ldrh	r2, [r7, #8]
 8000688:	8c3b      	ldrh	r3, [r7, #32]
 800068a:	429a      	cmp	r2, r3
 800068c:	f200 8083 	bhi.w	8000796 <Display_SetWindow+0x13e>
 8000690:	8c3b      	ldrh	r3, [r7, #32]
 8000692:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000696:	d27e      	bcs.n	8000796 <Display_SetWindow+0x13e>
		/* Error so do nothing */
		return;
	}

	/* Set column range */
	Display_TransmitCmd(hspi, DISPLAY_COLADDRSET);
 8000698:	212a      	movs	r1, #42	; 0x2a
 800069a:	68f8      	ldr	r0, [r7, #12]
 800069c:	f7ff ff82 	bl	80005a4 <Display_TransmitCmd>

	/* Set DC/RS LOW since transmitting date */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2101      	movs	r1, #1
 80006a4:	483e      	ldr	r0, [pc, #248]	; (80007a0 <Display_SetWindow+0x148>)
 80006a6:	f000 fef5 	bl	8001494 <HAL_GPIO_WritePin>

	/* Hold CS LOW until all parameters have been sent */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2110      	movs	r1, #16
 80006ae:	483c      	ldr	r0, [pc, #240]	; (80007a0 <Display_SetWindow+0x148>)
 80006b0:	f000 fef0 	bl	8001494 <HAL_GPIO_WritePin>

	/* Write column start and end data */
	uint8_t byte = xs >> 8;	// SC[15:8]
 80006b4:	897b      	ldrh	r3, [r7, #10]
 80006b6:	0a1b      	lsrs	r3, r3, #8
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(hspi, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80006be:	f107 0117 	add.w	r1, r7, #23
 80006c2:	2364      	movs	r3, #100	; 0x64
 80006c4:	2201      	movs	r2, #1
 80006c6:	68f8      	ldr	r0, [r7, #12]
 80006c8:	f001 fd6f 	bl	80021aa <HAL_SPI_Transmit>
	byte = xs & 0xFF;		// SC[7:0]
 80006cc:	897b      	ldrh	r3, [r7, #10]
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(hspi, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80006d2:	f107 0117 	add.w	r1, r7, #23
 80006d6:	2364      	movs	r3, #100	; 0x64
 80006d8:	2201      	movs	r2, #1
 80006da:	68f8      	ldr	r0, [r7, #12]
 80006dc:	f001 fd65 	bl	80021aa <HAL_SPI_Transmit>
	byte = xe >> 8;			// EC[15:8]
 80006e0:	88fb      	ldrh	r3, [r7, #6]
 80006e2:	0a1b      	lsrs	r3, r3, #8
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(hspi, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80006ea:	f107 0117 	add.w	r1, r7, #23
 80006ee:	2364      	movs	r3, #100	; 0x64
 80006f0:	2201      	movs	r2, #1
 80006f2:	68f8      	ldr	r0, [r7, #12]
 80006f4:	f001 fd59 	bl	80021aa <HAL_SPI_Transmit>
	byte = xe & 0xFF;		// EC[7:0]
 80006f8:	88fb      	ldrh	r3, [r7, #6]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(hspi, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80006fe:	f107 0117 	add.w	r1, r7, #23
 8000702:	2364      	movs	r3, #100	; 0x64
 8000704:	2201      	movs	r2, #1
 8000706:	68f8      	ldr	r0, [r7, #12]
 8000708:	f001 fd4f 	bl	80021aa <HAL_SPI_Transmit>

	/* Last parameter sent so end transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800070c:	2201      	movs	r2, #1
 800070e:	2110      	movs	r1, #16
 8000710:	4823      	ldr	r0, [pc, #140]	; (80007a0 <Display_SetWindow+0x148>)
 8000712:	f000 febf 	bl	8001494 <HAL_GPIO_WritePin>

	/* Set page range */
	Display_TransmitCmd(hspi, DISPLAY_PGADDRSET);
 8000716:	212b      	movs	r1, #43	; 0x2b
 8000718:	68f8      	ldr	r0, [r7, #12]
 800071a:	f7ff ff43 	bl	80005a4 <Display_TransmitCmd>

	/* Set DC/RS LOW since transmitting date */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_SET);
 800071e:	2201      	movs	r2, #1
 8000720:	2101      	movs	r1, #1
 8000722:	481f      	ldr	r0, [pc, #124]	; (80007a0 <Display_SetWindow+0x148>)
 8000724:	f000 feb6 	bl	8001494 <HAL_GPIO_WritePin>

	/* Begin multi-parameter transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	2110      	movs	r1, #16
 800072c:	481c      	ldr	r0, [pc, #112]	; (80007a0 <Display_SetWindow+0x148>)
 800072e:	f000 feb1 	bl	8001494 <HAL_GPIO_WritePin>

	/* Write page start and end data */
	byte = ys >> 8;		// SP[15:8]
 8000732:	893b      	ldrh	r3, [r7, #8]
 8000734:	0a1b      	lsrs	r3, r3, #8
 8000736:	b29b      	uxth	r3, r3
 8000738:	b2db      	uxtb	r3, r3
 800073a:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(hspi, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 800073c:	f107 0117 	add.w	r1, r7, #23
 8000740:	2364      	movs	r3, #100	; 0x64
 8000742:	2201      	movs	r2, #1
 8000744:	68f8      	ldr	r0, [r7, #12]
 8000746:	f001 fd30 	bl	80021aa <HAL_SPI_Transmit>
	byte = ys & 0xFF;	// SP[7:0]
 800074a:	893b      	ldrh	r3, [r7, #8]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(hspi, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 8000750:	f107 0117 	add.w	r1, r7, #23
 8000754:	2364      	movs	r3, #100	; 0x64
 8000756:	2201      	movs	r2, #1
 8000758:	68f8      	ldr	r0, [r7, #12]
 800075a:	f001 fd26 	bl	80021aa <HAL_SPI_Transmit>
	byte = ye >> 8;		// EP[15:8]
 800075e:	8c3b      	ldrh	r3, [r7, #32]
 8000760:	0a1b      	lsrs	r3, r3, #8
 8000762:	b29b      	uxth	r3, r3
 8000764:	b2db      	uxtb	r3, r3
 8000766:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(hspi, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 8000768:	f107 0117 	add.w	r1, r7, #23
 800076c:	2364      	movs	r3, #100	; 0x64
 800076e:	2201      	movs	r2, #1
 8000770:	68f8      	ldr	r0, [r7, #12]
 8000772:	f001 fd1a 	bl	80021aa <HAL_SPI_Transmit>
	byte = ye & 0xFF;	// EP[7:0]
 8000776:	8c3b      	ldrh	r3, [r7, #32]
 8000778:	b2db      	uxtb	r3, r3
 800077a:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(hspi, &byte, sizeof(uint8_t), SPI_TIMEOUT_MS);
 800077c:	f107 0117 	add.w	r1, r7, #23
 8000780:	2364      	movs	r3, #100	; 0x64
 8000782:	2201      	movs	r2, #1
 8000784:	68f8      	ldr	r0, [r7, #12]
 8000786:	f001 fd10 	bl	80021aa <HAL_SPI_Transmit>

	/* Last parameter sent so end transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800078a:	2201      	movs	r2, #1
 800078c:	2110      	movs	r1, #16
 800078e:	4804      	ldr	r0, [pc, #16]	; (80007a0 <Display_SetWindow+0x148>)
 8000790:	f000 fe80 	bl	8001494 <HAL_GPIO_WritePin>
 8000794:	e000      	b.n	8000798 <Display_SetWindow+0x140>
		return;
 8000796:	bf00      	nop
}
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40020400 	.word	0x40020400

080007a4 <Display_FillScreen>:
	/* Set CS HIGH to end transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
}

void Display_FillScreen(SPI_HandleTypeDef *hspi, uint8_t color)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af02      	add	r7, sp, #8
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	460b      	mov	r3, r1
 80007ae:	70fb      	strb	r3, [r7, #3]
	/* Set entire display as window */
	Display_SetWindow(hspi, 0, 0, DISPLAY_MAX_X, DISPLAY_MAX_Y);
 80007b0:	f240 13df 	movw	r3, #479	; 0x1df
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	f240 133f 	movw	r3, #319	; 0x13f
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff ff4a 	bl	8000658 <Display_SetWindow>

	/* Set up writing to frame buffer */
	Display_TransmitCmd(hspi, DISPLAY_MEMWR);
 80007c4:	212c      	movs	r1, #44	; 0x2c
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f7ff feec 	bl	80005a4 <Display_TransmitCmd>

	/* Set up sending data to display */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_SET);
 80007cc:	2201      	movs	r2, #1
 80007ce:	2101      	movs	r1, #1
 80007d0:	4810      	ldr	r0, [pc, #64]	; (8000814 <Display_FillScreen+0x70>)
 80007d2:	f000 fe5f 	bl	8001494 <HAL_GPIO_WritePin>

	/* Set CS LOW to begin transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2110      	movs	r1, #16
 80007da:	480e      	ldr	r0, [pc, #56]	; (8000814 <Display_FillScreen+0x70>)
 80007dc:	f000 fe5a 	bl	8001494 <HAL_GPIO_WritePin>

	/* Write the color to every pixel in the frame buffer. Since 3-bit RGB
	 * stores color data for 2 pixels in 1 byte, the total number of data
	 * bytes is the total number of pixels divided by 2 */
	for (uint32_t i = 0; i < DISPLAY_CACHE_MEM / 2; i++) {
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	e008      	b.n	80007f8 <Display_FillScreen+0x54>
		HAL_SPI_Transmit(hspi, &color, sizeof(uint8_t), SPI_TIMEOUT_MS);
 80007e6:	1cf9      	adds	r1, r7, #3
 80007e8:	2364      	movs	r3, #100	; 0x64
 80007ea:	2201      	movs	r2, #1
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f001 fcdc 	bl	80021aa <HAL_SPI_Transmit>
	for (uint32_t i = 0; i < DISPLAY_CACHE_MEM / 2; i++) {
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	3301      	adds	r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 80007fe:	d3f2      	bcc.n	80007e6 <Display_FillScreen+0x42>
	}

	/* Set CS HIGH to end transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000800:	2201      	movs	r2, #1
 8000802:	2110      	movs	r1, #16
 8000804:	4803      	ldr	r0, [pc, #12]	; (8000814 <Display_FillScreen+0x70>)
 8000806:	f000 fe45 	bl	8001494 <HAL_GPIO_WritePin>
}
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40020400 	.word	0x40020400

08000818 <Display_Image>:
void Display_ClearScreen(SPI_HandleTypeDef *hspi, uint16_t color) {
	// TODO
}

void Display_Image(SPI_HandleTypeDef *hspi, uint16_t x, uint16_t y,
					uint16_t w, uint16_t h, uint8_t *pixels) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b088      	sub	sp, #32
 800081c:	af02      	add	r7, sp, #8
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	4608      	mov	r0, r1
 8000822:	4611      	mov	r1, r2
 8000824:	461a      	mov	r2, r3
 8000826:	4603      	mov	r3, r0
 8000828:	817b      	strh	r3, [r7, #10]
 800082a:	460b      	mov	r3, r1
 800082c:	813b      	strh	r3, [r7, #8]
 800082e:	4613      	mov	r3, r2
 8000830:	80fb      	strh	r3, [r7, #6]

	/* Set window to display image */
	Display_SetWindow(hspi, x, y, x+w-1, y+h-1);
 8000832:	897a      	ldrh	r2, [r7, #10]
 8000834:	88fb      	ldrh	r3, [r7, #6]
 8000836:	4413      	add	r3, r2
 8000838:	b29b      	uxth	r3, r3
 800083a:	3b01      	subs	r3, #1
 800083c:	b298      	uxth	r0, r3
 800083e:	893a      	ldrh	r2, [r7, #8]
 8000840:	8c3b      	ldrh	r3, [r7, #32]
 8000842:	4413      	add	r3, r2
 8000844:	b29b      	uxth	r3, r3
 8000846:	3b01      	subs	r3, #1
 8000848:	b29b      	uxth	r3, r3
 800084a:	893a      	ldrh	r2, [r7, #8]
 800084c:	8979      	ldrh	r1, [r7, #10]
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	4603      	mov	r3, r0
 8000852:	68f8      	ldr	r0, [r7, #12]
 8000854:	f7ff ff00 	bl	8000658 <Display_SetWindow>

	/* Set up writing to frame buffer */
	Display_TransmitCmd(hspi, DISPLAY_MEMWR);
 8000858:	212c      	movs	r1, #44	; 0x2c
 800085a:	68f8      	ldr	r0, [r7, #12]
 800085c:	f7ff fea2 	bl	80005a4 <Display_TransmitCmd>

	/* Set up sending data to display */
	HAL_GPIO_WritePin(SPI_DCRS_GPIO_Port, SPI_DCRS_Pin, GPIO_PIN_SET);
 8000860:	2201      	movs	r2, #1
 8000862:	2101      	movs	r1, #1
 8000864:	4814      	ldr	r0, [pc, #80]	; (80008b8 <Display_Image+0xa0>)
 8000866:	f000 fe15 	bl	8001494 <HAL_GPIO_WritePin>

	/* Set CS LOW to begin transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2110      	movs	r1, #16
 800086e:	4812      	ldr	r0, [pc, #72]	; (80008b8 <Display_Image+0xa0>)
 8000870:	f000 fe10 	bl	8001494 <HAL_GPIO_WritePin>

	for (uint32_t i = 0; i < w*h / 2; i++) {
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	e00a      	b.n	8000890 <Display_Image+0x78>
		HAL_SPI_Transmit(hspi, &(pixels[i]), sizeof(uint8_t), SPI_TIMEOUT_MS);
 800087a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	18d1      	adds	r1, r2, r3
 8000880:	2364      	movs	r3, #100	; 0x64
 8000882:	2201      	movs	r2, #1
 8000884:	68f8      	ldr	r0, [r7, #12]
 8000886:	f001 fc90 	bl	80021aa <HAL_SPI_Transmit>
	for (uint32_t i = 0; i < w*h / 2; i++) {
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	3301      	adds	r3, #1
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	88fb      	ldrh	r3, [r7, #6]
 8000892:	8c3a      	ldrh	r2, [r7, #32]
 8000894:	fb02 f303 	mul.w	r3, r2, r3
 8000898:	0fda      	lsrs	r2, r3, #31
 800089a:	4413      	add	r3, r2
 800089c:	105b      	asrs	r3, r3, #1
 800089e:	461a      	mov	r2, r3
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d3e9      	bcc.n	800087a <Display_Image+0x62>
	}

	/* Set CS HIGH to end transaction */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80008a6:	2201      	movs	r2, #1
 80008a8:	2110      	movs	r1, #16
 80008aa:	4803      	ldr	r0, [pc, #12]	; (80008b8 <Display_Image+0xa0>)
 80008ac:	f000 fdf2 	bl	8001494 <HAL_GPIO_WritePin>
}
 80008b0:	bf00      	nop
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40020400 	.word	0x40020400

080008bc <SystemClock_Config>:
/* Global variables */
SPI_HandleTypeDef hspi2;	// spi interface to control display
UART_HandleTypeDef huart2;	// uart interface for debugging

void SystemClock_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b094      	sub	sp, #80	; 0x50
 80008c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	2234      	movs	r2, #52	; 0x34
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f002 f95a 	bl	8002b84 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d0:	f107 0308 	add.w	r3, r7, #8
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]

	/* Configure the main internal regulator output voltage */
	__HAL_RCC_PWR_CLK_ENABLE();
 80008e0:	2300      	movs	r3, #0
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	4b2a      	ldr	r3, [pc, #168]	; (8000990 <SystemClock_Config+0xd4>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e8:	4a29      	ldr	r2, [pc, #164]	; (8000990 <SystemClock_Config+0xd4>)
 80008ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ee:	6413      	str	r3, [r2, #64]	; 0x40
 80008f0:	4b27      	ldr	r3, [pc, #156]	; (8000990 <SystemClock_Config+0xd4>)
 80008f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008fc:	2300      	movs	r3, #0
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	4b24      	ldr	r3, [pc, #144]	; (8000994 <SystemClock_Config+0xd8>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000908:	4a22      	ldr	r2, [pc, #136]	; (8000994 <SystemClock_Config+0xd8>)
 800090a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800090e:	6013      	str	r3, [r2, #0]
 8000910:	4b20      	ldr	r3, [pc, #128]	; (8000994 <SystemClock_Config+0xd8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	683b      	ldr	r3, [r7, #0]

	/* Initialize the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800091c:	2302      	movs	r3, #2
 800091e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000920:	2301      	movs	r3, #1
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000924:	2310      	movs	r3, #16
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000928:	2302      	movs	r3, #2
 800092a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800092c:	2300      	movs	r3, #0
 800092e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000930:	2310      	movs	r3, #16
 8000932:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000934:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000938:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800093a:	2304      	movs	r3, #4
 800093c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800093e:	2302      	movs	r3, #2
 8000940:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000942:	2302      	movs	r3, #2
 8000944:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4618      	mov	r0, r3
 800094c:	f001 f906 	bl	8001b5c <HAL_RCC_OscConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0x9e>
		Error_Handler();
 8000956:	f000 f915 	bl	8000b84 <Error_Handler>
	}

	/* Initializes the CPU, AHB and APB buses clocks */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095a:	230f      	movs	r3, #15
 800095c:	60bb      	str	r3, [r7, #8]
							  	  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095e:	2302      	movs	r3, #2
 8000960:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000970:	f107 0308 	add.w	r3, r7, #8
 8000974:	2102      	movs	r1, #2
 8000976:	4618      	mov	r0, r3
 8000978:	f000 fda6 	bl	80014c8 <HAL_RCC_ClockConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0xca>
		Error_Handler();
 8000982:	f000 f8ff 	bl	8000b84 <Error_Handler>
	}
}
 8000986:	bf00      	nop
 8000988:	3750      	adds	r7, #80	; 0x50
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800
 8000994:	40007000 	.word	0x40007000

08000998 <MX_SPI2_Init>:


void MX_SPI2_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800099c:	4b17      	ldr	r3, [pc, #92]	; (80009fc <MX_SPI2_Init+0x64>)
 800099e:	4a18      	ldr	r2, [pc, #96]	; (8000a00 <MX_SPI2_Init+0x68>)
 80009a0:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <MX_SPI2_Init+0x64>)
 80009a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009a8:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009aa:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_SPI2_Init+0x64>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <MX_SPI2_Init+0x64>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_SPI2_Init+0x64>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_SPI2_Init+0x64>)
 80009be:	2200      	movs	r2, #0
 80009c0:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_SPI2_Init+0x64>)
 80009c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009c8:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_SPI2_Init+0x64>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009d0:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <MX_SPI2_Init+0x64>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_SPI2_Init+0x64>)
 80009d8:	2200      	movs	r2, #0
 80009da:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009dc:	4b07      	ldr	r3, [pc, #28]	; (80009fc <MX_SPI2_Init+0x64>)
 80009de:	2200      	movs	r2, #0
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_SPI2_Init+0x64>)
 80009e4:	220a      	movs	r2, #10
 80009e6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <MX_SPI2_Init+0x64>)
 80009ea:	f001 fb55 	bl	8002098 <HAL_SPI_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_SPI2_Init+0x60>
		Error_Handler();
 80009f4:	f000 f8c6 	bl	8000b84 <Error_Handler>
	}
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20004a14 	.word	0x20004a14
 8000a00:	40003800 	.word	0x40003800

08000a04 <MX_USART2_UART_Init>:


void MX_USART2_UART_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	/* USART2 parameter configuration */
	huart2.Instance = USART2;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a0a:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <MX_USART2_UART_Init+0x50>)
 8000a0c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a14:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a3c:	f001 fdbc 	bl	80025b8 <HAL_UART_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000a46:	f000 f89d 	bl	8000b84 <Error_Handler>
	}
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20004a6c 	.word	0x20004a6c
 8000a54:	40004400 	.word	0x40004400

08000a58 <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	4b40      	ldr	r3, [pc, #256]	; (8000b74 <MX_GPIO_Init+0x11c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a3f      	ldr	r2, [pc, #252]	; (8000b74 <MX_GPIO_Init+0x11c>)
 8000a78:	f043 0304 	orr.w	r3, r3, #4
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b3d      	ldr	r3, [pc, #244]	; (8000b74 <MX_GPIO_Init+0x11c>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0304 	and.w	r3, r3, #4
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	4b39      	ldr	r3, [pc, #228]	; (8000b74 <MX_GPIO_Init+0x11c>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a38      	ldr	r2, [pc, #224]	; (8000b74 <MX_GPIO_Init+0x11c>)
 8000a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b36      	ldr	r3, [pc, #216]	; (8000b74 <MX_GPIO_Init+0x11c>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	4b32      	ldr	r3, [pc, #200]	; (8000b74 <MX_GPIO_Init+0x11c>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a31      	ldr	r2, [pc, #196]	; (8000b74 <MX_GPIO_Init+0x11c>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b2f      	ldr	r3, [pc, #188]	; (8000b74 <MX_GPIO_Init+0x11c>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b2b      	ldr	r3, [pc, #172]	; (8000b74 <MX_GPIO_Init+0x11c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a2a      	ldr	r2, [pc, #168]	; (8000b74 <MX_GPIO_Init+0x11c>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <MX_GPIO_Init+0x11c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]

	/* Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	4825      	ldr	r0, [pc, #148]	; (8000b78 <MX_GPIO_Init+0x120>)
 8000ae4:	f000 fcd6 	bl	8001494 <HAL_GPIO_WritePin>

	/* Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2120      	movs	r1, #32
 8000aec:	4823      	ldr	r0, [pc, #140]	; (8000b7c <MX_GPIO_Init+0x124>)
 8000aee:	f000 fcd1 	bl	8001494 <HAL_GPIO_WritePin>

	/* Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, SPI_DCRS_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2111      	movs	r1, #17
 8000af6:	4822      	ldr	r0, [pc, #136]	; (8000b80 <MX_GPIO_Init+0x128>)
 8000af8:	f000 fccc 	bl	8001494 <HAL_GPIO_WritePin>

	/* Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000afc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b00:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b02:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b06:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	4819      	ldr	r0, [pc, #100]	; (8000b78 <MX_GPIO_Init+0x120>)
 8000b14:	f000 fb2a 	bl	800116c <HAL_GPIO_Init>

	/* Configure GPIO pin : SPI_RESET_Pin */
	GPIO_InitStruct.Pin = SPI_RESET_Pin;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI_RESET_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4812      	ldr	r0, [pc, #72]	; (8000b78 <MX_GPIO_Init+0x120>)
 8000b30:	f000 fb1c 	bl	800116c <HAL_GPIO_Init>

	/* Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000b34:	2320      	movs	r3, #32
 8000b36:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4619      	mov	r1, r3
 8000b4a:	480c      	ldr	r0, [pc, #48]	; (8000b7c <MX_GPIO_Init+0x124>)
 8000b4c:	f000 fb0e 	bl	800116c <HAL_GPIO_Init>

	/* Configure GPIO pins : SPI_DCRS_Pin SPI_CS_Pin */
	GPIO_InitStruct.Pin = SPI_DCRS_Pin|SPI_CS_Pin;
 8000b50:	2311      	movs	r3, #17
 8000b52:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	4806      	ldr	r0, [pc, #24]	; (8000b80 <MX_GPIO_Init+0x128>)
 8000b68:	f000 fb00 	bl	800116c <HAL_GPIO_Init>
}
 8000b6c:	bf00      	nop
 8000b6e:	3728      	adds	r7, #40	; 0x28
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020800 	.word	0x40020800
 8000b7c:	40020000 	.word	0x40020000
 8000b80:	40020400 	.word	0x40020400

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * Auto-generated by CubeIDE.
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <Error_Handler+0x8>
	...

08000b90 <main>:
#include "img.h"

extern SPI_HandleTypeDef hspi2;

int main(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af02      	add	r7, sp, #8
	/* Reset of all peripherals, initializes the flash interface and the systick */
	HAL_Init();
 8000b96:	f000 f96d 	bl	8000e74 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000b9a:	f7ff fe8f 	bl	80008bc <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b9e:	f7ff ff5b 	bl	8000a58 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000ba2:	f7ff ff2f 	bl	8000a04 <MX_USART2_UART_Init>
	MX_SPI2_Init();
 8000ba6:	f7ff fef7 	bl	8000998 <MX_SPI2_Init>



	/* Initialize display */
	Display_Init(&hspi2);
 8000baa:	4809      	ldr	r0, [pc, #36]	; (8000bd0 <main+0x40>)
 8000bac:	f7ff fcac 	bl	8000508 <Display_Init>

	/* Display Caltech Racing Logo with black background */
	Display_FillScreen(&hspi2, COLOR_BLACK);
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4807      	ldr	r0, [pc, #28]	; (8000bd0 <main+0x40>)
 8000bb4:	f7ff fdf6 	bl	80007a4 <Display_FillScreen>
	Display_Image(&hspi2, 120, 20, 87, 435, caltech_racing_logo_img);
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <main+0x44>)
 8000bba:	9301      	str	r3, [sp, #4]
 8000bbc:	f240 13b3 	movw	r3, #435	; 0x1b3
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	2357      	movs	r3, #87	; 0x57
 8000bc4:	2214      	movs	r2, #20
 8000bc6:	2178      	movs	r1, #120	; 0x78
 8000bc8:	4801      	ldr	r0, [pc, #4]	; (8000bd0 <main+0x40>)
 8000bca:	f7ff fe25 	bl	8000818 <Display_Image>

	/* Infinite main loop */
	while (1)
 8000bce:	e7fe      	b.n	8000bce <main+0x3e>
 8000bd0:	20004a14 	.word	0x20004a14
 8000bd4:	20000000 	.word	0x20000000

08000bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <HAL_MspInit+0x4c>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	4a0f      	ldr	r2, [pc, #60]	; (8000c24 <HAL_MspInit+0x4c>)
 8000be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bec:	6453      	str	r3, [r2, #68]	; 0x44
 8000bee:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <HAL_MspInit+0x4c>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	603b      	str	r3, [r7, #0]
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <HAL_MspInit+0x4c>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <HAL_MspInit+0x4c>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c08:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_MspInit+0x4c>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c16:	2007      	movs	r0, #7
 8000c18:	f000 fa74 	bl	8001104 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40023800 	.word	0x40023800

08000c28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	; 0x28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a30      	ldr	r2, [pc, #192]	; (8000d08 <HAL_SPI_MspInit+0xe0>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d15a      	bne.n	8000d00 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	4b2f      	ldr	r3, [pc, #188]	; (8000d0c <HAL_SPI_MspInit+0xe4>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	4a2e      	ldr	r2, [pc, #184]	; (8000d0c <HAL_SPI_MspInit+0xe4>)
 8000c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c58:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5a:	4b2c      	ldr	r3, [pc, #176]	; (8000d0c <HAL_SPI_MspInit+0xe4>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	4b28      	ldr	r3, [pc, #160]	; (8000d0c <HAL_SPI_MspInit+0xe4>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a27      	ldr	r2, [pc, #156]	; (8000d0c <HAL_SPI_MspInit+0xe4>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b25      	ldr	r3, [pc, #148]	; (8000d0c <HAL_SPI_MspInit+0xe4>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <HAL_SPI_MspInit+0xe4>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a20      	ldr	r2, [pc, #128]	; (8000d0c <HAL_SPI_MspInit+0xe4>)
 8000c8c:	f043 0302 	orr.w	r3, r3, #2
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <HAL_SPI_MspInit+0xe4>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000cae:	2307      	movs	r3, #7
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4815      	ldr	r0, [pc, #84]	; (8000d10 <HAL_SPI_MspInit+0xe8>)
 8000cba:	f000 fa57 	bl	800116c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cce:	2305      	movs	r3, #5
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	480d      	ldr	r0, [pc, #52]	; (8000d10 <HAL_SPI_MspInit+0xe8>)
 8000cda:	f000 fa47 	bl	800116c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cf0:	2305      	movs	r3, #5
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4806      	ldr	r0, [pc, #24]	; (8000d14 <HAL_SPI_MspInit+0xec>)
 8000cfc:	f000 fa36 	bl	800116c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000d00:	bf00      	nop
 8000d02:	3728      	adds	r7, #40	; 0x28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40003800 	.word	0x40003800
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020800 	.word	0x40020800
 8000d14:	40020400 	.word	0x40020400

08000d18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	; 0x28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a19      	ldr	r2, [pc, #100]	; (8000d9c <HAL_UART_MspInit+0x84>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d12b      	bne.n	8000d92 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <HAL_UART_MspInit+0x88>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	4a17      	ldr	r2, [pc, #92]	; (8000da0 <HAL_UART_MspInit+0x88>)
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d48:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <HAL_UART_MspInit+0x88>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <HAL_UART_MspInit+0x88>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a10      	ldr	r2, [pc, #64]	; (8000da0 <HAL_UART_MspInit+0x88>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <HAL_UART_MspInit+0x88>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d72:	230c      	movs	r3, #12
 8000d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d82:	2307      	movs	r3, #7
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4805      	ldr	r0, [pc, #20]	; (8000da4 <HAL_UART_MspInit+0x8c>)
 8000d8e:	f000 f9ed 	bl	800116c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	; 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40004400 	.word	0x40004400
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020000 	.word	0x40020000

08000da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <NMI_Handler+0x4>

08000dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <HardFault_Handler+0x4>

08000db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <MemManage_Handler+0x4>

08000dba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <BusFault_Handler+0x4>

08000dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <UsageFault_Handler+0x4>

08000dc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df4:	f000 f890 	bl	8000f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <SystemInit+0x20>)
 8000e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e06:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <SystemInit+0x20>)
 8000e08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e24:	480d      	ldr	r0, [pc, #52]	; (8000e5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e26:	490e      	ldr	r1, [pc, #56]	; (8000e60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e28:	4a0e      	ldr	r2, [pc, #56]	; (8000e64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a0b      	ldr	r2, [pc, #44]	; (8000e68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e3c:	4c0b      	ldr	r4, [pc, #44]	; (8000e6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e4a:	f7ff ffd7 	bl	8000dfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e4e:	f001 fe75 	bl	8002b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e52:	f7ff fe9d 	bl	8000b90 <main>
  bx  lr    
 8000e56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e60:	200049f8 	.word	0x200049f8
  ldr r2, =_sidata
 8000e64:	08002bd4 	.word	0x08002bd4
  ldr r2, =_sbss
 8000e68:	200049f8 	.word	0x200049f8
  ldr r4, =_ebss
 8000e6c:	20004ab4 	.word	0x20004ab4

08000e70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC_IRQHandler>
	...

08000e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e78:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_Init+0x40>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <HAL_Init+0x40>)
 8000e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <HAL_Init+0x40>)
 8000e8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a07      	ldr	r2, [pc, #28]	; (8000eb4 <HAL_Init+0x40>)
 8000e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f000 f931 	bl	8001104 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f000 f808 	bl	8000eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea8:	f7ff fe96 	bl	8000bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023c00 	.word	0x40023c00

08000eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_InitTick+0x54>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_InitTick+0x58>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f93b 	bl	8001152 <HAL_SYSTICK_Config>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00e      	b.n	8000f04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b0f      	cmp	r3, #15
 8000eea:	d80a      	bhi.n	8000f02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eec:	2200      	movs	r2, #0
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef4:	f000 f911 	bl	800111a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef8:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <HAL_InitTick+0x5c>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	e000      	b.n	8000f04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200049ec 	.word	0x200049ec
 8000f10:	200049f4 	.word	0x200049f4
 8000f14:	200049f0 	.word	0x200049f0

08000f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_IncTick+0x20>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x24>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <HAL_IncTick+0x24>)
 8000f2a:	6013      	str	r3, [r2, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	200049f4 	.word	0x200049f4
 8000f3c:	20004ab0 	.word	0x20004ab0

08000f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return uwTick;
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <HAL_GetTick+0x14>)
 8000f46:	681b      	ldr	r3, [r3, #0]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20004ab0 	.word	0x20004ab0

08000f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f60:	f7ff ffee 	bl	8000f40 <HAL_GetTick>
 8000f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f70:	d005      	beq.n	8000f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f72:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <HAL_Delay+0x44>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f7e:	bf00      	nop
 8000f80:	f7ff ffde 	bl	8000f40 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d8f7      	bhi.n	8000f80 <HAL_Delay+0x28>
  {
  }
}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200049f4 	.word	0x200049f4

08000fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd2:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	60d3      	str	r3, [r2, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <__NVIC_GetPriorityGrouping+0x18>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	f003 0307 	and.w	r3, r3, #7
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	6039      	str	r1, [r7, #0]
 800100e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001014:	2b00      	cmp	r3, #0
 8001016:	db0a      	blt.n	800102e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	b2da      	uxtb	r2, r3
 800101c:	490c      	ldr	r1, [pc, #48]	; (8001050 <__NVIC_SetPriority+0x4c>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	0112      	lsls	r2, r2, #4
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	440b      	add	r3, r1
 8001028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800102c:	e00a      	b.n	8001044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4908      	ldr	r1, [pc, #32]	; (8001054 <__NVIC_SetPriority+0x50>)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	f003 030f 	and.w	r3, r3, #15
 800103a:	3b04      	subs	r3, #4
 800103c:	0112      	lsls	r2, r2, #4
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	440b      	add	r3, r1
 8001042:	761a      	strb	r2, [r3, #24]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000e100 	.word	0xe000e100
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001058:	b480      	push	{r7}
 800105a:	b089      	sub	sp, #36	; 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f1c3 0307 	rsb	r3, r3, #7
 8001072:	2b04      	cmp	r3, #4
 8001074:	bf28      	it	cs
 8001076:	2304      	movcs	r3, #4
 8001078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3304      	adds	r3, #4
 800107e:	2b06      	cmp	r3, #6
 8001080:	d902      	bls.n	8001088 <NVIC_EncodePriority+0x30>
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3b03      	subs	r3, #3
 8001086:	e000      	b.n	800108a <NVIC_EncodePriority+0x32>
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	f04f 32ff 	mov.w	r2, #4294967295
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43da      	mvns	r2, r3
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	401a      	ands	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a0:	f04f 31ff 	mov.w	r1, #4294967295
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	43d9      	mvns	r1, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	4313      	orrs	r3, r2
         );
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3724      	adds	r7, #36	; 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d0:	d301      	bcc.n	80010d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00f      	b.n	80010f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d6:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <SysTick_Config+0x40>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010de:	210f      	movs	r1, #15
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f7ff ff8e 	bl	8001004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <SysTick_Config+0x40>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <SysTick_Config+0x40>)
 80010f0:	2207      	movs	r2, #7
 80010f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	e000e010 	.word	0xe000e010

08001104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff47 	bl	8000fa0 <__NVIC_SetPriorityGrouping>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
 8001126:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800112c:	f7ff ff5c 	bl	8000fe8 <__NVIC_GetPriorityGrouping>
 8001130:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	68b9      	ldr	r1, [r7, #8]
 8001136:	6978      	ldr	r0, [r7, #20]
 8001138:	f7ff ff8e 	bl	8001058 <NVIC_EncodePriority>
 800113c:	4602      	mov	r2, r0
 800113e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001142:	4611      	mov	r1, r2
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff5d 	bl	8001004 <__NVIC_SetPriority>
}
 800114a:	bf00      	nop
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ffb0 	bl	80010c0 <SysTick_Config>
 8001160:	4603      	mov	r3, r0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
 8001186:	e165      	b.n	8001454 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001188:	2201      	movs	r2, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	f040 8154 	bne.w	800144e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d005      	beq.n	80011be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d130      	bne.n	8001220 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	2203      	movs	r2, #3
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	68da      	ldr	r2, [r3, #12]
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f4:	2201      	movs	r2, #1
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	091b      	lsrs	r3, r3, #4
 800120a:	f003 0201 	and.w	r2, r3, #1
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	2b03      	cmp	r3, #3
 800122a:	d017      	beq.n	800125c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d123      	bne.n	80012b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	08da      	lsrs	r2, r3, #3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3208      	adds	r2, #8
 8001270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001274:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	220f      	movs	r2, #15
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	691a      	ldr	r2, [r3, #16]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	08da      	lsrs	r2, r3, #3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3208      	adds	r2, #8
 80012aa:	69b9      	ldr	r1, [r7, #24]
 80012ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	2203      	movs	r2, #3
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0203 	and.w	r2, r3, #3
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 80ae 	beq.w	800144e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b5d      	ldr	r3, [pc, #372]	; (800146c <HAL_GPIO_Init+0x300>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	4a5c      	ldr	r2, [pc, #368]	; (800146c <HAL_GPIO_Init+0x300>)
 80012fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001300:	6453      	str	r3, [r2, #68]	; 0x44
 8001302:	4b5a      	ldr	r3, [pc, #360]	; (800146c <HAL_GPIO_Init+0x300>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800130e:	4a58      	ldr	r2, [pc, #352]	; (8001470 <HAL_GPIO_Init+0x304>)
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	3302      	adds	r3, #2
 8001316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	220f      	movs	r2, #15
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4f      	ldr	r2, [pc, #316]	; (8001474 <HAL_GPIO_Init+0x308>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d025      	beq.n	8001386 <HAL_GPIO_Init+0x21a>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4e      	ldr	r2, [pc, #312]	; (8001478 <HAL_GPIO_Init+0x30c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d01f      	beq.n	8001382 <HAL_GPIO_Init+0x216>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4d      	ldr	r2, [pc, #308]	; (800147c <HAL_GPIO_Init+0x310>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d019      	beq.n	800137e <HAL_GPIO_Init+0x212>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4c      	ldr	r2, [pc, #304]	; (8001480 <HAL_GPIO_Init+0x314>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d013      	beq.n	800137a <HAL_GPIO_Init+0x20e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4b      	ldr	r2, [pc, #300]	; (8001484 <HAL_GPIO_Init+0x318>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d00d      	beq.n	8001376 <HAL_GPIO_Init+0x20a>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4a      	ldr	r2, [pc, #296]	; (8001488 <HAL_GPIO_Init+0x31c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d007      	beq.n	8001372 <HAL_GPIO_Init+0x206>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a49      	ldr	r2, [pc, #292]	; (800148c <HAL_GPIO_Init+0x320>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d101      	bne.n	800136e <HAL_GPIO_Init+0x202>
 800136a:	2306      	movs	r3, #6
 800136c:	e00c      	b.n	8001388 <HAL_GPIO_Init+0x21c>
 800136e:	2307      	movs	r3, #7
 8001370:	e00a      	b.n	8001388 <HAL_GPIO_Init+0x21c>
 8001372:	2305      	movs	r3, #5
 8001374:	e008      	b.n	8001388 <HAL_GPIO_Init+0x21c>
 8001376:	2304      	movs	r3, #4
 8001378:	e006      	b.n	8001388 <HAL_GPIO_Init+0x21c>
 800137a:	2303      	movs	r3, #3
 800137c:	e004      	b.n	8001388 <HAL_GPIO_Init+0x21c>
 800137e:	2302      	movs	r3, #2
 8001380:	e002      	b.n	8001388 <HAL_GPIO_Init+0x21c>
 8001382:	2301      	movs	r3, #1
 8001384:	e000      	b.n	8001388 <HAL_GPIO_Init+0x21c>
 8001386:	2300      	movs	r3, #0
 8001388:	69fa      	ldr	r2, [r7, #28]
 800138a:	f002 0203 	and.w	r2, r2, #3
 800138e:	0092      	lsls	r2, r2, #2
 8001390:	4093      	lsls	r3, r2
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001398:	4935      	ldr	r1, [pc, #212]	; (8001470 <HAL_GPIO_Init+0x304>)
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	089b      	lsrs	r3, r3, #2
 800139e:	3302      	adds	r3, #2
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013a6:	4b3a      	ldr	r3, [pc, #232]	; (8001490 <HAL_GPIO_Init+0x324>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ca:	4a31      	ldr	r2, [pc, #196]	; (8001490 <HAL_GPIO_Init+0x324>)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013d0:	4b2f      	ldr	r3, [pc, #188]	; (8001490 <HAL_GPIO_Init+0x324>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013f4:	4a26      	ldr	r2, [pc, #152]	; (8001490 <HAL_GPIO_Init+0x324>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013fa:	4b25      	ldr	r3, [pc, #148]	; (8001490 <HAL_GPIO_Init+0x324>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800141e:	4a1c      	ldr	r2, [pc, #112]	; (8001490 <HAL_GPIO_Init+0x324>)
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001424:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <HAL_GPIO_Init+0x324>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001448:	4a11      	ldr	r2, [pc, #68]	; (8001490 <HAL_GPIO_Init+0x324>)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3301      	adds	r3, #1
 8001452:	61fb      	str	r3, [r7, #28]
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	2b0f      	cmp	r3, #15
 8001458:	f67f ae96 	bls.w	8001188 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	3724      	adds	r7, #36	; 0x24
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800
 8001470:	40013800 	.word	0x40013800
 8001474:	40020000 	.word	0x40020000
 8001478:	40020400 	.word	0x40020400
 800147c:	40020800 	.word	0x40020800
 8001480:	40020c00 	.word	0x40020c00
 8001484:	40021000 	.word	0x40021000
 8001488:	40021400 	.word	0x40021400
 800148c:	40021800 	.word	0x40021800
 8001490:	40013c00 	.word	0x40013c00

08001494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	807b      	strh	r3, [r7, #2]
 80014a0:	4613      	mov	r3, r2
 80014a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014a4:	787b      	ldrb	r3, [r7, #1]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014aa:	887a      	ldrh	r2, [r7, #2]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014b0:	e003      	b.n	80014ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014b2:	887b      	ldrh	r3, [r7, #2]
 80014b4:	041a      	lsls	r2, r3, #16
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	619a      	str	r2, [r3, #24]
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d101      	bne.n	80014dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e0cc      	b.n	8001676 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014dc:	4b68      	ldr	r3, [pc, #416]	; (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 030f 	and.w	r3, r3, #15
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d90c      	bls.n	8001504 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ea:	4b65      	ldr	r3, [pc, #404]	; (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014f2:	4b63      	ldr	r3, [pc, #396]	; (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d001      	beq.n	8001504 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e0b8      	b.n	8001676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d020      	beq.n	8001552 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	d005      	beq.n	8001528 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800151c:	4b59      	ldr	r3, [pc, #356]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	4a58      	ldr	r2, [pc, #352]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 8001522:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001526:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0308 	and.w	r3, r3, #8
 8001530:	2b00      	cmp	r3, #0
 8001532:	d005      	beq.n	8001540 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001534:	4b53      	ldr	r3, [pc, #332]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	4a52      	ldr	r2, [pc, #328]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 800153a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800153e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001540:	4b50      	ldr	r3, [pc, #320]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	494d      	ldr	r1, [pc, #308]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	4313      	orrs	r3, r2
 8001550:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d044      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d107      	bne.n	8001576 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001566:	4b47      	ldr	r3, [pc, #284]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d119      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e07f      	b.n	8001676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b02      	cmp	r3, #2
 800157c:	d003      	beq.n	8001586 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001582:	2b03      	cmp	r3, #3
 8001584:	d107      	bne.n	8001596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001586:	4b3f      	ldr	r3, [pc, #252]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d109      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e06f      	b.n	8001676 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001596:	4b3b      	ldr	r3, [pc, #236]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e067      	b.n	8001676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015a6:	4b37      	ldr	r3, [pc, #220]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f023 0203 	bic.w	r2, r3, #3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	4934      	ldr	r1, [pc, #208]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015b8:	f7ff fcc2 	bl	8000f40 <HAL_GetTick>
 80015bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015be:	e00a      	b.n	80015d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c0:	f7ff fcbe 	bl	8000f40 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e04f      	b.n	8001676 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015d6:	4b2b      	ldr	r3, [pc, #172]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 020c 	and.w	r2, r3, #12
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d1eb      	bne.n	80015c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015e8:	4b25      	ldr	r3, [pc, #148]	; (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 030f 	and.w	r3, r3, #15
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d20c      	bcs.n	8001610 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015f6:	4b22      	ldr	r3, [pc, #136]	; (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015fe:	4b20      	ldr	r3, [pc, #128]	; (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	429a      	cmp	r2, r3
 800160a:	d001      	beq.n	8001610 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e032      	b.n	8001676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	d008      	beq.n	800162e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800161c:	4b19      	ldr	r3, [pc, #100]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	4916      	ldr	r1, [pc, #88]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	4313      	orrs	r3, r2
 800162c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	2b00      	cmp	r3, #0
 8001638:	d009      	beq.n	800164e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	490e      	ldr	r1, [pc, #56]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	4313      	orrs	r3, r2
 800164c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800164e:	f000 f855 	bl	80016fc <HAL_RCC_GetSysClockFreq>
 8001652:	4602      	mov	r2, r0
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	091b      	lsrs	r3, r3, #4
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	490a      	ldr	r1, [pc, #40]	; (8001688 <HAL_RCC_ClockConfig+0x1c0>)
 8001660:	5ccb      	ldrb	r3, [r1, r3]
 8001662:	fa22 f303 	lsr.w	r3, r2, r3
 8001666:	4a09      	ldr	r2, [pc, #36]	; (800168c <HAL_RCC_ClockConfig+0x1c4>)
 8001668:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <HAL_RCC_ClockConfig+0x1c8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fc22 	bl	8000eb8 <HAL_InitTick>

  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40023c00 	.word	0x40023c00
 8001684:	40023800 	.word	0x40023800
 8001688:	08002bac 	.word	0x08002bac
 800168c:	200049ec 	.word	0x200049ec
 8001690:	200049f0 	.word	0x200049f0

08001694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001698:	4b03      	ldr	r3, [pc, #12]	; (80016a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800169a:	681b      	ldr	r3, [r3, #0]
}
 800169c:	4618      	mov	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	200049ec 	.word	0x200049ec

080016ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80016b0:	f7ff fff0 	bl	8001694 <HAL_RCC_GetHCLKFreq>
 80016b4:	4602      	mov	r2, r0
 80016b6:	4b05      	ldr	r3, [pc, #20]	; (80016cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	0a9b      	lsrs	r3, r3, #10
 80016bc:	f003 0307 	and.w	r3, r3, #7
 80016c0:	4903      	ldr	r1, [pc, #12]	; (80016d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016c2:	5ccb      	ldrb	r3, [r1, r3]
 80016c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40023800 	.word	0x40023800
 80016d0:	08002bbc 	.word	0x08002bbc

080016d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80016d8:	f7ff ffdc 	bl	8001694 <HAL_RCC_GetHCLKFreq>
 80016dc:	4602      	mov	r2, r0
 80016de:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	0b5b      	lsrs	r3, r3, #13
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	4903      	ldr	r1, [pc, #12]	; (80016f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016ea:	5ccb      	ldrb	r3, [r1, r3]
 80016ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40023800 	.word	0x40023800
 80016f8:	08002bbc 	.word	0x08002bbc

080016fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001700:	b0ae      	sub	sp, #184	; 0xb8
 8001702:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001704:	2300      	movs	r3, #0
 8001706:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800170a:	2300      	movs	r3, #0
 800170c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001710:	2300      	movs	r3, #0
 8001712:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001716:	2300      	movs	r3, #0
 8001718:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800171c:	2300      	movs	r3, #0
 800171e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001722:	4bcb      	ldr	r3, [pc, #812]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x354>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	2b0c      	cmp	r3, #12
 800172c:	f200 8206 	bhi.w	8001b3c <HAL_RCC_GetSysClockFreq+0x440>
 8001730:	a201      	add	r2, pc, #4	; (adr r2, 8001738 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001736:	bf00      	nop
 8001738:	0800176d 	.word	0x0800176d
 800173c:	08001b3d 	.word	0x08001b3d
 8001740:	08001b3d 	.word	0x08001b3d
 8001744:	08001b3d 	.word	0x08001b3d
 8001748:	08001775 	.word	0x08001775
 800174c:	08001b3d 	.word	0x08001b3d
 8001750:	08001b3d 	.word	0x08001b3d
 8001754:	08001b3d 	.word	0x08001b3d
 8001758:	0800177d 	.word	0x0800177d
 800175c:	08001b3d 	.word	0x08001b3d
 8001760:	08001b3d 	.word	0x08001b3d
 8001764:	08001b3d 	.word	0x08001b3d
 8001768:	0800196d 	.word	0x0800196d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800176c:	4bb9      	ldr	r3, [pc, #740]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x358>)
 800176e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001772:	e1e7      	b.n	8001b44 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001774:	4bb8      	ldr	r3, [pc, #736]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001776:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800177a:	e1e3      	b.n	8001b44 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800177c:	4bb4      	ldr	r3, [pc, #720]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x354>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001784:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001788:	4bb1      	ldr	r3, [pc, #708]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x354>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d071      	beq.n	8001878 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001794:	4bae      	ldr	r3, [pc, #696]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x354>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	099b      	lsrs	r3, r3, #6
 800179a:	2200      	movs	r2, #0
 800179c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80017a0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80017a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80017b0:	2300      	movs	r3, #0
 80017b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80017b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80017ba:	4622      	mov	r2, r4
 80017bc:	462b      	mov	r3, r5
 80017be:	f04f 0000 	mov.w	r0, #0
 80017c2:	f04f 0100 	mov.w	r1, #0
 80017c6:	0159      	lsls	r1, r3, #5
 80017c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017cc:	0150      	lsls	r0, r2, #5
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4621      	mov	r1, r4
 80017d4:	1a51      	subs	r1, r2, r1
 80017d6:	6439      	str	r1, [r7, #64]	; 0x40
 80017d8:	4629      	mov	r1, r5
 80017da:	eb63 0301 	sbc.w	r3, r3, r1
 80017de:	647b      	str	r3, [r7, #68]	; 0x44
 80017e0:	f04f 0200 	mov.w	r2, #0
 80017e4:	f04f 0300 	mov.w	r3, #0
 80017e8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80017ec:	4649      	mov	r1, r9
 80017ee:	018b      	lsls	r3, r1, #6
 80017f0:	4641      	mov	r1, r8
 80017f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017f6:	4641      	mov	r1, r8
 80017f8:	018a      	lsls	r2, r1, #6
 80017fa:	4641      	mov	r1, r8
 80017fc:	1a51      	subs	r1, r2, r1
 80017fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8001800:	4649      	mov	r1, r9
 8001802:	eb63 0301 	sbc.w	r3, r3, r1
 8001806:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001814:	4649      	mov	r1, r9
 8001816:	00cb      	lsls	r3, r1, #3
 8001818:	4641      	mov	r1, r8
 800181a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800181e:	4641      	mov	r1, r8
 8001820:	00ca      	lsls	r2, r1, #3
 8001822:	4610      	mov	r0, r2
 8001824:	4619      	mov	r1, r3
 8001826:	4603      	mov	r3, r0
 8001828:	4622      	mov	r2, r4
 800182a:	189b      	adds	r3, r3, r2
 800182c:	633b      	str	r3, [r7, #48]	; 0x30
 800182e:	462b      	mov	r3, r5
 8001830:	460a      	mov	r2, r1
 8001832:	eb42 0303 	adc.w	r3, r2, r3
 8001836:	637b      	str	r3, [r7, #52]	; 0x34
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	f04f 0300 	mov.w	r3, #0
 8001840:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001844:	4629      	mov	r1, r5
 8001846:	024b      	lsls	r3, r1, #9
 8001848:	4621      	mov	r1, r4
 800184a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800184e:	4621      	mov	r1, r4
 8001850:	024a      	lsls	r2, r1, #9
 8001852:	4610      	mov	r0, r2
 8001854:	4619      	mov	r1, r3
 8001856:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800185a:	2200      	movs	r2, #0
 800185c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001860:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001864:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001868:	f7fe fccc 	bl	8000204 <__aeabi_uldivmod>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4613      	mov	r3, r2
 8001872:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001876:	e067      	b.n	8001948 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001878:	4b75      	ldr	r3, [pc, #468]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x354>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	099b      	lsrs	r3, r3, #6
 800187e:	2200      	movs	r2, #0
 8001880:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001884:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001888:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800188c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001890:	67bb      	str	r3, [r7, #120]	; 0x78
 8001892:	2300      	movs	r3, #0
 8001894:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001896:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800189a:	4622      	mov	r2, r4
 800189c:	462b      	mov	r3, r5
 800189e:	f04f 0000 	mov.w	r0, #0
 80018a2:	f04f 0100 	mov.w	r1, #0
 80018a6:	0159      	lsls	r1, r3, #5
 80018a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018ac:	0150      	lsls	r0, r2, #5
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4621      	mov	r1, r4
 80018b4:	1a51      	subs	r1, r2, r1
 80018b6:	62b9      	str	r1, [r7, #40]	; 0x28
 80018b8:	4629      	mov	r1, r5
 80018ba:	eb63 0301 	sbc.w	r3, r3, r1
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80018cc:	4649      	mov	r1, r9
 80018ce:	018b      	lsls	r3, r1, #6
 80018d0:	4641      	mov	r1, r8
 80018d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018d6:	4641      	mov	r1, r8
 80018d8:	018a      	lsls	r2, r1, #6
 80018da:	4641      	mov	r1, r8
 80018dc:	ebb2 0a01 	subs.w	sl, r2, r1
 80018e0:	4649      	mov	r1, r9
 80018e2:	eb63 0b01 	sbc.w	fp, r3, r1
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	f04f 0300 	mov.w	r3, #0
 80018ee:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80018f2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80018f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80018fa:	4692      	mov	sl, r2
 80018fc:	469b      	mov	fp, r3
 80018fe:	4623      	mov	r3, r4
 8001900:	eb1a 0303 	adds.w	r3, sl, r3
 8001904:	623b      	str	r3, [r7, #32]
 8001906:	462b      	mov	r3, r5
 8001908:	eb4b 0303 	adc.w	r3, fp, r3
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	f04f 0300 	mov.w	r3, #0
 8001916:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800191a:	4629      	mov	r1, r5
 800191c:	028b      	lsls	r3, r1, #10
 800191e:	4621      	mov	r1, r4
 8001920:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001924:	4621      	mov	r1, r4
 8001926:	028a      	lsls	r2, r1, #10
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001930:	2200      	movs	r2, #0
 8001932:	673b      	str	r3, [r7, #112]	; 0x70
 8001934:	677a      	str	r2, [r7, #116]	; 0x74
 8001936:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800193a:	f7fe fc63 	bl	8000204 <__aeabi_uldivmod>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4613      	mov	r3, r2
 8001944:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001948:	4b41      	ldr	r3, [pc, #260]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x354>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	0c1b      	lsrs	r3, r3, #16
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	3301      	adds	r3, #1
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800195a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800195e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001962:	fbb2 f3f3 	udiv	r3, r2, r3
 8001966:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800196a:	e0eb      	b.n	8001b44 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800196c:	4b38      	ldr	r3, [pc, #224]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x354>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001974:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001978:	4b35      	ldr	r3, [pc, #212]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x354>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d06b      	beq.n	8001a5c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001984:	4b32      	ldr	r3, [pc, #200]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x354>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	099b      	lsrs	r3, r3, #6
 800198a:	2200      	movs	r2, #0
 800198c:	66bb      	str	r3, [r7, #104]	; 0x68
 800198e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001990:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001996:	663b      	str	r3, [r7, #96]	; 0x60
 8001998:	2300      	movs	r3, #0
 800199a:	667b      	str	r3, [r7, #100]	; 0x64
 800199c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80019a0:	4622      	mov	r2, r4
 80019a2:	462b      	mov	r3, r5
 80019a4:	f04f 0000 	mov.w	r0, #0
 80019a8:	f04f 0100 	mov.w	r1, #0
 80019ac:	0159      	lsls	r1, r3, #5
 80019ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019b2:	0150      	lsls	r0, r2, #5
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4621      	mov	r1, r4
 80019ba:	1a51      	subs	r1, r2, r1
 80019bc:	61b9      	str	r1, [r7, #24]
 80019be:	4629      	mov	r1, r5
 80019c0:	eb63 0301 	sbc.w	r3, r3, r1
 80019c4:	61fb      	str	r3, [r7, #28]
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80019d2:	4659      	mov	r1, fp
 80019d4:	018b      	lsls	r3, r1, #6
 80019d6:	4651      	mov	r1, sl
 80019d8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019dc:	4651      	mov	r1, sl
 80019de:	018a      	lsls	r2, r1, #6
 80019e0:	4651      	mov	r1, sl
 80019e2:	ebb2 0801 	subs.w	r8, r2, r1
 80019e6:	4659      	mov	r1, fp
 80019e8:	eb63 0901 	sbc.w	r9, r3, r1
 80019ec:	f04f 0200 	mov.w	r2, #0
 80019f0:	f04f 0300 	mov.w	r3, #0
 80019f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a00:	4690      	mov	r8, r2
 8001a02:	4699      	mov	r9, r3
 8001a04:	4623      	mov	r3, r4
 8001a06:	eb18 0303 	adds.w	r3, r8, r3
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	462b      	mov	r3, r5
 8001a0e:	eb49 0303 	adc.w	r3, r9, r3
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001a20:	4629      	mov	r1, r5
 8001a22:	024b      	lsls	r3, r1, #9
 8001a24:	4621      	mov	r1, r4
 8001a26:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a2a:	4621      	mov	r1, r4
 8001a2c:	024a      	lsls	r2, r1, #9
 8001a2e:	4610      	mov	r0, r2
 8001a30:	4619      	mov	r1, r3
 8001a32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a36:	2200      	movs	r2, #0
 8001a38:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a3a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001a3c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001a40:	f7fe fbe0 	bl	8000204 <__aeabi_uldivmod>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4613      	mov	r3, r2
 8001a4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001a4e:	e065      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x420>
 8001a50:	40023800 	.word	0x40023800
 8001a54:	00f42400 	.word	0x00f42400
 8001a58:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a5c:	4b3d      	ldr	r3, [pc, #244]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x458>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	099b      	lsrs	r3, r3, #6
 8001a62:	2200      	movs	r2, #0
 8001a64:	4618      	mov	r0, r3
 8001a66:	4611      	mov	r1, r2
 8001a68:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a6c:	653b      	str	r3, [r7, #80]	; 0x50
 8001a6e:	2300      	movs	r3, #0
 8001a70:	657b      	str	r3, [r7, #84]	; 0x54
 8001a72:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001a76:	4642      	mov	r2, r8
 8001a78:	464b      	mov	r3, r9
 8001a7a:	f04f 0000 	mov.w	r0, #0
 8001a7e:	f04f 0100 	mov.w	r1, #0
 8001a82:	0159      	lsls	r1, r3, #5
 8001a84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a88:	0150      	lsls	r0, r2, #5
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	4641      	mov	r1, r8
 8001a90:	1a51      	subs	r1, r2, r1
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	4649      	mov	r1, r9
 8001a96:	eb63 0301 	sbc.w	r3, r3, r1
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001aa8:	4659      	mov	r1, fp
 8001aaa:	018b      	lsls	r3, r1, #6
 8001aac:	4651      	mov	r1, sl
 8001aae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ab2:	4651      	mov	r1, sl
 8001ab4:	018a      	lsls	r2, r1, #6
 8001ab6:	4651      	mov	r1, sl
 8001ab8:	1a54      	subs	r4, r2, r1
 8001aba:	4659      	mov	r1, fp
 8001abc:	eb63 0501 	sbc.w	r5, r3, r1
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	00eb      	lsls	r3, r5, #3
 8001aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ace:	00e2      	lsls	r2, r4, #3
 8001ad0:	4614      	mov	r4, r2
 8001ad2:	461d      	mov	r5, r3
 8001ad4:	4643      	mov	r3, r8
 8001ad6:	18e3      	adds	r3, r4, r3
 8001ad8:	603b      	str	r3, [r7, #0]
 8001ada:	464b      	mov	r3, r9
 8001adc:	eb45 0303 	adc.w	r3, r5, r3
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aee:	4629      	mov	r1, r5
 8001af0:	028b      	lsls	r3, r1, #10
 8001af2:	4621      	mov	r1, r4
 8001af4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001af8:	4621      	mov	r1, r4
 8001afa:	028a      	lsls	r2, r1, #10
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b04:	2200      	movs	r2, #0
 8001b06:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b08:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001b0a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001b0e:	f7fe fb79 	bl	8000204 <__aeabi_uldivmod>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4613      	mov	r3, r2
 8001b18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001b1c:	4b0d      	ldr	r3, [pc, #52]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x458>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	0f1b      	lsrs	r3, r3, #28
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001b2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001b2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b3a:	e003      	b.n	8001b44 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b3c:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001b3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b42:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	37b8      	adds	r7, #184	; 0xb8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800
 8001b58:	00f42400 	.word	0x00f42400

08001b5c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e28d      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 8083 	beq.w	8001c82 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b7c:	4b94      	ldr	r3, [pc, #592]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 030c 	and.w	r3, r3, #12
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d019      	beq.n	8001bbc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b88:	4b91      	ldr	r3, [pc, #580]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d106      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b94:	4b8e      	ldr	r3, [pc, #568]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ba0:	d00c      	beq.n	8001bbc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ba2:	4b8b      	ldr	r3, [pc, #556]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001baa:	2b0c      	cmp	r3, #12
 8001bac:	d112      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bae:	4b88      	ldr	r3, [pc, #544]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bba:	d10b      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bbc:	4b84      	ldr	r3, [pc, #528]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d05b      	beq.n	8001c80 <HAL_RCC_OscConfig+0x124>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d157      	bne.n	8001c80 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e25a      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bdc:	d106      	bne.n	8001bec <HAL_RCC_OscConfig+0x90>
 8001bde:	4b7c      	ldr	r3, [pc, #496]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a7b      	ldr	r2, [pc, #492]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	e01d      	b.n	8001c28 <HAL_RCC_OscConfig+0xcc>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bf4:	d10c      	bne.n	8001c10 <HAL_RCC_OscConfig+0xb4>
 8001bf6:	4b76      	ldr	r3, [pc, #472]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a75      	ldr	r2, [pc, #468]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	4b73      	ldr	r3, [pc, #460]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a72      	ldr	r2, [pc, #456]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	e00b      	b.n	8001c28 <HAL_RCC_OscConfig+0xcc>
 8001c10:	4b6f      	ldr	r3, [pc, #444]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a6e      	ldr	r2, [pc, #440]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c1a:	6013      	str	r3, [r2, #0]
 8001c1c:	4b6c      	ldr	r3, [pc, #432]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a6b      	ldr	r2, [pc, #428]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d013      	beq.n	8001c58 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7ff f986 	bl	8000f40 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c38:	f7ff f982 	bl	8000f40 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b64      	cmp	r3, #100	; 0x64
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e21f      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4a:	4b61      	ldr	r3, [pc, #388]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0xdc>
 8001c56:	e014      	b.n	8001c82 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c58:	f7ff f972 	bl	8000f40 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c60:	f7ff f96e 	bl	8000f40 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b64      	cmp	r3, #100	; 0x64
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e20b      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c72:	4b57      	ldr	r3, [pc, #348]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x104>
 8001c7e:	e000      	b.n	8001c82 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d06f      	beq.n	8001d6e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c8e:	4b50      	ldr	r3, [pc, #320]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 030c 	and.w	r3, r3, #12
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d017      	beq.n	8001cca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c9a:	4b4d      	ldr	r3, [pc, #308]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d105      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ca6:	4b4a      	ldr	r3, [pc, #296]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00b      	beq.n	8001cca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cb2:	4b47      	ldr	r3, [pc, #284]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001cba:	2b0c      	cmp	r3, #12
 8001cbc:	d11c      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cbe:	4b44      	ldr	r3, [pc, #272]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d116      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cca:	4b41      	ldr	r3, [pc, #260]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d005      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x186>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d001      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e1d3      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce2:	4b3b      	ldr	r3, [pc, #236]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	4937      	ldr	r1, [pc, #220]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf6:	e03a      	b.n	8001d6e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d020      	beq.n	8001d42 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d00:	4b34      	ldr	r3, [pc, #208]	; (8001dd4 <HAL_RCC_OscConfig+0x278>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d06:	f7ff f91b 	bl	8000f40 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d0e:	f7ff f917 	bl	8000f40 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e1b4      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d20:	4b2b      	ldr	r3, [pc, #172]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2c:	4b28      	ldr	r3, [pc, #160]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	4925      	ldr	r1, [pc, #148]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	600b      	str	r3, [r1, #0]
 8001d40:	e015      	b.n	8001d6e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d42:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <HAL_RCC_OscConfig+0x278>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d48:	f7ff f8fa 	bl	8000f40 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d50:	f7ff f8f6 	bl	8000f40 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e193      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d62:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f0      	bne.n	8001d50 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d036      	beq.n	8001de8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d016      	beq.n	8001db0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d88:	f7ff f8da 	bl	8000f40 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d90:	f7ff f8d6 	bl	8000f40 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e173      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001da2:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0f0      	beq.n	8001d90 <HAL_RCC_OscConfig+0x234>
 8001dae:	e01b      	b.n	8001de8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <HAL_RCC_OscConfig+0x27c>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db6:	f7ff f8c3 	bl	8000f40 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dbc:	e00e      	b.n	8001ddc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dbe:	f7ff f8bf 	bl	8000f40 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d907      	bls.n	8001ddc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e15c      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	42470000 	.word	0x42470000
 8001dd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ddc:	4b8a      	ldr	r3, [pc, #552]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1ea      	bne.n	8001dbe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 8097 	beq.w	8001f24 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df6:	2300      	movs	r3, #0
 8001df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dfa:	4b83      	ldr	r3, [pc, #524]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10f      	bne.n	8001e26 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	4b7f      	ldr	r3, [pc, #508]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	4a7e      	ldr	r2, [pc, #504]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e14:	6413      	str	r3, [r2, #64]	; 0x40
 8001e16:	4b7c      	ldr	r3, [pc, #496]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e22:	2301      	movs	r3, #1
 8001e24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e26:	4b79      	ldr	r3, [pc, #484]	; (800200c <HAL_RCC_OscConfig+0x4b0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d118      	bne.n	8001e64 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e32:	4b76      	ldr	r3, [pc, #472]	; (800200c <HAL_RCC_OscConfig+0x4b0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a75      	ldr	r2, [pc, #468]	; (800200c <HAL_RCC_OscConfig+0x4b0>)
 8001e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e3e:	f7ff f87f 	bl	8000f40 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e46:	f7ff f87b 	bl	8000f40 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e118      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e58:	4b6c      	ldr	r3, [pc, #432]	; (800200c <HAL_RCC_OscConfig+0x4b0>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0f0      	beq.n	8001e46 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d106      	bne.n	8001e7a <HAL_RCC_OscConfig+0x31e>
 8001e6c:	4b66      	ldr	r3, [pc, #408]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e70:	4a65      	ldr	r2, [pc, #404]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	6713      	str	r3, [r2, #112]	; 0x70
 8001e78:	e01c      	b.n	8001eb4 <HAL_RCC_OscConfig+0x358>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	2b05      	cmp	r3, #5
 8001e80:	d10c      	bne.n	8001e9c <HAL_RCC_OscConfig+0x340>
 8001e82:	4b61      	ldr	r3, [pc, #388]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e86:	4a60      	ldr	r2, [pc, #384]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001e88:	f043 0304 	orr.w	r3, r3, #4
 8001e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e8e:	4b5e      	ldr	r3, [pc, #376]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e92:	4a5d      	ldr	r2, [pc, #372]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6713      	str	r3, [r2, #112]	; 0x70
 8001e9a:	e00b      	b.n	8001eb4 <HAL_RCC_OscConfig+0x358>
 8001e9c:	4b5a      	ldr	r3, [pc, #360]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea0:	4a59      	ldr	r2, [pc, #356]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001ea2:	f023 0301 	bic.w	r3, r3, #1
 8001ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea8:	4b57      	ldr	r3, [pc, #348]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eac:	4a56      	ldr	r2, [pc, #344]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001eae:	f023 0304 	bic.w	r3, r3, #4
 8001eb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d015      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ebc:	f7ff f840 	bl	8000f40 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec2:	e00a      	b.n	8001eda <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ec4:	f7ff f83c 	bl	8000f40 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e0d7      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eda:	4b4b      	ldr	r3, [pc, #300]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0ee      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x368>
 8001ee6:	e014      	b.n	8001f12 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee8:	f7ff f82a 	bl	8000f40 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eee:	e00a      	b.n	8001f06 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ef0:	f7ff f826 	bl	8000f40 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e0c1      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f06:	4b40      	ldr	r3, [pc, #256]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1ee      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f12:	7dfb      	ldrb	r3, [r7, #23]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d105      	bne.n	8001f24 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f18:	4b3b      	ldr	r3, [pc, #236]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	4a3a      	ldr	r2, [pc, #232]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001f1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 80ad 	beq.w	8002088 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f2e:	4b36      	ldr	r3, [pc, #216]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 030c 	and.w	r3, r3, #12
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d060      	beq.n	8001ffc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d145      	bne.n	8001fce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f42:	4b33      	ldr	r3, [pc, #204]	; (8002010 <HAL_RCC_OscConfig+0x4b4>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7fe fffa 	bl	8000f40 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f50:	f7fe fff6 	bl	8000f40 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e093      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f62:	4b29      	ldr	r3, [pc, #164]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f0      	bne.n	8001f50 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69da      	ldr	r2, [r3, #28]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	019b      	lsls	r3, r3, #6
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f84:	085b      	lsrs	r3, r3, #1
 8001f86:	3b01      	subs	r3, #1
 8001f88:	041b      	lsls	r3, r3, #16
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f90:	061b      	lsls	r3, r3, #24
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f98:	071b      	lsls	r3, r3, #28
 8001f9a:	491b      	ldr	r1, [pc, #108]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fa0:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <HAL_RCC_OscConfig+0x4b4>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa6:	f7fe ffcb 	bl	8000f40 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fae:	f7fe ffc7 	bl	8000f40 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e064      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc0:	4b11      	ldr	r3, [pc, #68]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x452>
 8001fcc:	e05c      	b.n	8002088 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fce:	4b10      	ldr	r3, [pc, #64]	; (8002010 <HAL_RCC_OscConfig+0x4b4>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd4:	f7fe ffb4 	bl	8000f40 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fdc:	f7fe ffb0 	bl	8000f40 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e04d      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_RCC_OscConfig+0x4ac>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f0      	bne.n	8001fdc <HAL_RCC_OscConfig+0x480>
 8001ffa:	e045      	b.n	8002088 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d107      	bne.n	8002014 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e040      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
 8002008:	40023800 	.word	0x40023800
 800200c:	40007000 	.word	0x40007000
 8002010:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002014:	4b1f      	ldr	r3, [pc, #124]	; (8002094 <HAL_RCC_OscConfig+0x538>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d030      	beq.n	8002084 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800202c:	429a      	cmp	r2, r3
 800202e:	d129      	bne.n	8002084 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203a:	429a      	cmp	r2, r3
 800203c:	d122      	bne.n	8002084 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002044:	4013      	ands	r3, r2
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800204a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800204c:	4293      	cmp	r3, r2
 800204e:	d119      	bne.n	8002084 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205a:	085b      	lsrs	r3, r3, #1
 800205c:	3b01      	subs	r3, #1
 800205e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002060:	429a      	cmp	r2, r3
 8002062:	d10f      	bne.n	8002084 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002070:	429a      	cmp	r2, r3
 8002072:	d107      	bne.n	8002084 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002080:	429a      	cmp	r2, r3
 8002082:	d001      	beq.n	8002088 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e000      	b.n	800208a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40023800 	.word	0x40023800

08002098 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e07b      	b.n	80021a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d108      	bne.n	80020c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020ba:	d009      	beq.n	80020d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	61da      	str	r2, [r3, #28]
 80020c2:	e005      	b.n	80020d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d106      	bne.n	80020f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7fe fd9c 	bl	8000c28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2202      	movs	r2, #2
 80020f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002106:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002140:	431a      	orrs	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002154:	ea42 0103 	orr.w	r1, r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	0c1b      	lsrs	r3, r3, #16
 800216e:	f003 0104 	and.w	r1, r3, #4
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	f003 0210 	and.w	r2, r3, #16
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	69da      	ldr	r2, [r3, #28]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002190:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b088      	sub	sp, #32
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	60f8      	str	r0, [r7, #12]
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	603b      	str	r3, [r7, #0]
 80021b6:	4613      	mov	r3, r2
 80021b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <HAL_SPI_Transmit+0x22>
 80021c8:	2302      	movs	r3, #2
 80021ca:	e126      	b.n	800241a <HAL_SPI_Transmit+0x270>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021d4:	f7fe feb4 	bl	8000f40 <HAL_GetTick>
 80021d8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80021da:	88fb      	ldrh	r3, [r7, #6]
 80021dc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d002      	beq.n	80021f0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80021ea:	2302      	movs	r3, #2
 80021ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021ee:	e10b      	b.n	8002408 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d002      	beq.n	80021fc <HAL_SPI_Transmit+0x52>
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d102      	bne.n	8002202 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002200:	e102      	b.n	8002408 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2203      	movs	r2, #3
 8002206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	88fa      	ldrh	r2, [r7, #6]
 800221a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	88fa      	ldrh	r2, [r7, #6]
 8002220:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002248:	d10f      	bne.n	800226a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002258:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002268:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002274:	2b40      	cmp	r3, #64	; 0x40
 8002276:	d007      	beq.n	8002288 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002286:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002290:	d14b      	bne.n	800232a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <HAL_SPI_Transmit+0xf6>
 800229a:	8afb      	ldrh	r3, [r7, #22]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d13e      	bne.n	800231e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a4:	881a      	ldrh	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b0:	1c9a      	adds	r2, r3, #2
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	3b01      	subs	r3, #1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80022c4:	e02b      	b.n	800231e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d112      	bne.n	80022fa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	881a      	ldrh	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	1c9a      	adds	r2, r3, #2
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80022f8:	e011      	b.n	800231e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022fa:	f7fe fe21 	bl	8000f40 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d803      	bhi.n	8002312 <HAL_SPI_Transmit+0x168>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002310:	d102      	bne.n	8002318 <HAL_SPI_Transmit+0x16e>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d102      	bne.n	800231e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800231c:	e074      	b.n	8002408 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002322:	b29b      	uxth	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1ce      	bne.n	80022c6 <HAL_SPI_Transmit+0x11c>
 8002328:	e04c      	b.n	80023c4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <HAL_SPI_Transmit+0x18e>
 8002332:	8afb      	ldrh	r3, [r7, #22]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d140      	bne.n	80023ba <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	330c      	adds	r3, #12
 8002342:	7812      	ldrb	r2, [r2, #0]
 8002344:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	1c5a      	adds	r2, r3, #1
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002354:	b29b      	uxth	r3, r3
 8002356:	3b01      	subs	r3, #1
 8002358:	b29a      	uxth	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800235e:	e02c      	b.n	80023ba <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b02      	cmp	r3, #2
 800236c:	d113      	bne.n	8002396 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	330c      	adds	r3, #12
 8002378:	7812      	ldrb	r2, [r2, #0]
 800237a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800238a:	b29b      	uxth	r3, r3
 800238c:	3b01      	subs	r3, #1
 800238e:	b29a      	uxth	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	86da      	strh	r2, [r3, #54]	; 0x36
 8002394:	e011      	b.n	80023ba <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002396:	f7fe fdd3 	bl	8000f40 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d803      	bhi.n	80023ae <HAL_SPI_Transmit+0x204>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ac:	d102      	bne.n	80023b4 <HAL_SPI_Transmit+0x20a>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d102      	bne.n	80023ba <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80023b8:	e026      	b.n	8002408 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023be:	b29b      	uxth	r3, r3
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1cd      	bne.n	8002360 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	6839      	ldr	r1, [r7, #0]
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 f8b3 	bl	8002534 <SPI_EndRxTxTransaction>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d002      	beq.n	80023da <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2220      	movs	r2, #32
 80023d8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10a      	bne.n	80023f8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	613b      	str	r3, [r7, #16]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d002      	beq.n	8002406 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	77fb      	strb	r3, [r7, #31]
 8002404:	e000      	b.n	8002408 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002406:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002418:	7ffb      	ldrb	r3, [r7, #31]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3720      	adds	r7, #32
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	603b      	str	r3, [r7, #0]
 8002430:	4613      	mov	r3, r2
 8002432:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002434:	f7fe fd84 	bl	8000f40 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243c:	1a9b      	subs	r3, r3, r2
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	4413      	add	r3, r2
 8002442:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002444:	f7fe fd7c 	bl	8000f40 <HAL_GetTick>
 8002448:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800244a:	4b39      	ldr	r3, [pc, #228]	; (8002530 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	015b      	lsls	r3, r3, #5
 8002450:	0d1b      	lsrs	r3, r3, #20
 8002452:	69fa      	ldr	r2, [r7, #28]
 8002454:	fb02 f303 	mul.w	r3, r2, r3
 8002458:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800245a:	e054      	b.n	8002506 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002462:	d050      	beq.n	8002506 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002464:	f7fe fd6c 	bl	8000f40 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	69fa      	ldr	r2, [r7, #28]
 8002470:	429a      	cmp	r2, r3
 8002472:	d902      	bls.n	800247a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d13d      	bne.n	80024f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002488:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002492:	d111      	bne.n	80024b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800249c:	d004      	beq.n	80024a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024a6:	d107      	bne.n	80024b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024c0:	d10f      	bne.n	80024e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e017      	b.n	8002526 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	3b01      	subs	r3, #1
 8002504:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	4013      	ands	r3, r2
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	429a      	cmp	r2, r3
 8002514:	bf0c      	ite	eq
 8002516:	2301      	moveq	r3, #1
 8002518:	2300      	movne	r3, #0
 800251a:	b2db      	uxtb	r3, r3
 800251c:	461a      	mov	r2, r3
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	429a      	cmp	r2, r3
 8002522:	d19b      	bne.n	800245c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3720      	adds	r7, #32
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	200049ec 	.word	0x200049ec

08002534 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af02      	add	r7, sp, #8
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002540:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <SPI_EndRxTxTransaction+0x7c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a1b      	ldr	r2, [pc, #108]	; (80025b4 <SPI_EndRxTxTransaction+0x80>)
 8002546:	fba2 2303 	umull	r2, r3, r2, r3
 800254a:	0d5b      	lsrs	r3, r3, #21
 800254c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002550:	fb02 f303 	mul.w	r3, r2, r3
 8002554:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800255e:	d112      	bne.n	8002586 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2200      	movs	r2, #0
 8002568:	2180      	movs	r1, #128	; 0x80
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f7ff ff5a 	bl	8002424 <SPI_WaitFlagStateUntilTimeout>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d016      	beq.n	80025a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257a:	f043 0220 	orr.w	r2, r3, #32
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e00f      	b.n	80025a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00a      	beq.n	80025a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	3b01      	subs	r3, #1
 8002590:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259c:	2b80      	cmp	r3, #128	; 0x80
 800259e:	d0f2      	beq.n	8002586 <SPI_EndRxTxTransaction+0x52>
 80025a0:	e000      	b.n	80025a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80025a2:	bf00      	nop
  }

  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	200049ec 	.word	0x200049ec
 80025b4:	165e9f81 	.word	0x165e9f81

080025b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e03f      	b.n	800264a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d106      	bne.n	80025e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7fe fb9a 	bl	8000d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2224      	movs	r2, #36	; 0x24
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f829 	bl	8002654 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	691a      	ldr	r2, [r3, #16]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002610:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	695a      	ldr	r2, [r3, #20]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002620:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002630:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2220      	movs	r2, #32
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2220      	movs	r2, #32
 8002644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002658:	b0c0      	sub	sp, #256	; 0x100
 800265a:	af00      	add	r7, sp, #0
 800265c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800266c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002670:	68d9      	ldr	r1, [r3, #12]
 8002672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	ea40 0301 	orr.w	r3, r0, r1
 800267c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800267e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	431a      	orrs	r2, r3
 800268c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	431a      	orrs	r2, r3
 8002694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	4313      	orrs	r3, r2
 800269c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80026a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80026ac:	f021 010c 	bic.w	r1, r1, #12
 80026b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80026ba:	430b      	orrs	r3, r1
 80026bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80026ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ce:	6999      	ldr	r1, [r3, #24]
 80026d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	ea40 0301 	orr.w	r3, r0, r1
 80026da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	4b8f      	ldr	r3, [pc, #572]	; (8002920 <UART_SetConfig+0x2cc>)
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d005      	beq.n	80026f4 <UART_SetConfig+0xa0>
 80026e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	4b8d      	ldr	r3, [pc, #564]	; (8002924 <UART_SetConfig+0x2d0>)
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d104      	bne.n	80026fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80026f4:	f7fe ffee 	bl	80016d4 <HAL_RCC_GetPCLK2Freq>
 80026f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80026fc:	e003      	b.n	8002706 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80026fe:	f7fe ffd5 	bl	80016ac <HAL_RCC_GetPCLK1Freq>
 8002702:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002710:	f040 810c 	bne.w	800292c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002714:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002718:	2200      	movs	r2, #0
 800271a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800271e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002722:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002726:	4622      	mov	r2, r4
 8002728:	462b      	mov	r3, r5
 800272a:	1891      	adds	r1, r2, r2
 800272c:	65b9      	str	r1, [r7, #88]	; 0x58
 800272e:	415b      	adcs	r3, r3
 8002730:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002732:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002736:	4621      	mov	r1, r4
 8002738:	eb12 0801 	adds.w	r8, r2, r1
 800273c:	4629      	mov	r1, r5
 800273e:	eb43 0901 	adc.w	r9, r3, r1
 8002742:	f04f 0200 	mov.w	r2, #0
 8002746:	f04f 0300 	mov.w	r3, #0
 800274a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800274e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002752:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002756:	4690      	mov	r8, r2
 8002758:	4699      	mov	r9, r3
 800275a:	4623      	mov	r3, r4
 800275c:	eb18 0303 	adds.w	r3, r8, r3
 8002760:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002764:	462b      	mov	r3, r5
 8002766:	eb49 0303 	adc.w	r3, r9, r3
 800276a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800276e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800277a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800277e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002782:	460b      	mov	r3, r1
 8002784:	18db      	adds	r3, r3, r3
 8002786:	653b      	str	r3, [r7, #80]	; 0x50
 8002788:	4613      	mov	r3, r2
 800278a:	eb42 0303 	adc.w	r3, r2, r3
 800278e:	657b      	str	r3, [r7, #84]	; 0x54
 8002790:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002794:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002798:	f7fd fd34 	bl	8000204 <__aeabi_uldivmod>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	4b61      	ldr	r3, [pc, #388]	; (8002928 <UART_SetConfig+0x2d4>)
 80027a2:	fba3 2302 	umull	r2, r3, r3, r2
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	011c      	lsls	r4, r3, #4
 80027aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027ae:	2200      	movs	r2, #0
 80027b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80027b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80027b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80027bc:	4642      	mov	r2, r8
 80027be:	464b      	mov	r3, r9
 80027c0:	1891      	adds	r1, r2, r2
 80027c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80027c4:	415b      	adcs	r3, r3
 80027c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80027cc:	4641      	mov	r1, r8
 80027ce:	eb12 0a01 	adds.w	sl, r2, r1
 80027d2:	4649      	mov	r1, r9
 80027d4:	eb43 0b01 	adc.w	fp, r3, r1
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027ec:	4692      	mov	sl, r2
 80027ee:	469b      	mov	fp, r3
 80027f0:	4643      	mov	r3, r8
 80027f2:	eb1a 0303 	adds.w	r3, sl, r3
 80027f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80027fa:	464b      	mov	r3, r9
 80027fc:	eb4b 0303 	adc.w	r3, fp, r3
 8002800:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002810:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002814:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002818:	460b      	mov	r3, r1
 800281a:	18db      	adds	r3, r3, r3
 800281c:	643b      	str	r3, [r7, #64]	; 0x40
 800281e:	4613      	mov	r3, r2
 8002820:	eb42 0303 	adc.w	r3, r2, r3
 8002824:	647b      	str	r3, [r7, #68]	; 0x44
 8002826:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800282a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800282e:	f7fd fce9 	bl	8000204 <__aeabi_uldivmod>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4611      	mov	r1, r2
 8002838:	4b3b      	ldr	r3, [pc, #236]	; (8002928 <UART_SetConfig+0x2d4>)
 800283a:	fba3 2301 	umull	r2, r3, r3, r1
 800283e:	095b      	lsrs	r3, r3, #5
 8002840:	2264      	movs	r2, #100	; 0x64
 8002842:	fb02 f303 	mul.w	r3, r2, r3
 8002846:	1acb      	subs	r3, r1, r3
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800284e:	4b36      	ldr	r3, [pc, #216]	; (8002928 <UART_SetConfig+0x2d4>)
 8002850:	fba3 2302 	umull	r2, r3, r3, r2
 8002854:	095b      	lsrs	r3, r3, #5
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800285c:	441c      	add	r4, r3
 800285e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002862:	2200      	movs	r2, #0
 8002864:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002868:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800286c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002870:	4642      	mov	r2, r8
 8002872:	464b      	mov	r3, r9
 8002874:	1891      	adds	r1, r2, r2
 8002876:	63b9      	str	r1, [r7, #56]	; 0x38
 8002878:	415b      	adcs	r3, r3
 800287a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800287c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002880:	4641      	mov	r1, r8
 8002882:	1851      	adds	r1, r2, r1
 8002884:	6339      	str	r1, [r7, #48]	; 0x30
 8002886:	4649      	mov	r1, r9
 8002888:	414b      	adcs	r3, r1
 800288a:	637b      	str	r3, [r7, #52]	; 0x34
 800288c:	f04f 0200 	mov.w	r2, #0
 8002890:	f04f 0300 	mov.w	r3, #0
 8002894:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002898:	4659      	mov	r1, fp
 800289a:	00cb      	lsls	r3, r1, #3
 800289c:	4651      	mov	r1, sl
 800289e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028a2:	4651      	mov	r1, sl
 80028a4:	00ca      	lsls	r2, r1, #3
 80028a6:	4610      	mov	r0, r2
 80028a8:	4619      	mov	r1, r3
 80028aa:	4603      	mov	r3, r0
 80028ac:	4642      	mov	r2, r8
 80028ae:	189b      	adds	r3, r3, r2
 80028b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028b4:	464b      	mov	r3, r9
 80028b6:	460a      	mov	r2, r1
 80028b8:	eb42 0303 	adc.w	r3, r2, r3
 80028bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80028cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80028d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80028d4:	460b      	mov	r3, r1
 80028d6:	18db      	adds	r3, r3, r3
 80028d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80028da:	4613      	mov	r3, r2
 80028dc:	eb42 0303 	adc.w	r3, r2, r3
 80028e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80028ea:	f7fd fc8b 	bl	8000204 <__aeabi_uldivmod>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	4b0d      	ldr	r3, [pc, #52]	; (8002928 <UART_SetConfig+0x2d4>)
 80028f4:	fba3 1302 	umull	r1, r3, r3, r2
 80028f8:	095b      	lsrs	r3, r3, #5
 80028fa:	2164      	movs	r1, #100	; 0x64
 80028fc:	fb01 f303 	mul.w	r3, r1, r3
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	3332      	adds	r3, #50	; 0x32
 8002906:	4a08      	ldr	r2, [pc, #32]	; (8002928 <UART_SetConfig+0x2d4>)
 8002908:	fba2 2303 	umull	r2, r3, r2, r3
 800290c:	095b      	lsrs	r3, r3, #5
 800290e:	f003 0207 	and.w	r2, r3, #7
 8002912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4422      	add	r2, r4
 800291a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800291c:	e105      	b.n	8002b2a <UART_SetConfig+0x4d6>
 800291e:	bf00      	nop
 8002920:	40011000 	.word	0x40011000
 8002924:	40011400 	.word	0x40011400
 8002928:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800292c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002930:	2200      	movs	r2, #0
 8002932:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002936:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800293a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800293e:	4642      	mov	r2, r8
 8002940:	464b      	mov	r3, r9
 8002942:	1891      	adds	r1, r2, r2
 8002944:	6239      	str	r1, [r7, #32]
 8002946:	415b      	adcs	r3, r3
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
 800294a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800294e:	4641      	mov	r1, r8
 8002950:	1854      	adds	r4, r2, r1
 8002952:	4649      	mov	r1, r9
 8002954:	eb43 0501 	adc.w	r5, r3, r1
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	f04f 0300 	mov.w	r3, #0
 8002960:	00eb      	lsls	r3, r5, #3
 8002962:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002966:	00e2      	lsls	r2, r4, #3
 8002968:	4614      	mov	r4, r2
 800296a:	461d      	mov	r5, r3
 800296c:	4643      	mov	r3, r8
 800296e:	18e3      	adds	r3, r4, r3
 8002970:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002974:	464b      	mov	r3, r9
 8002976:	eb45 0303 	adc.w	r3, r5, r3
 800297a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800297e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800298a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800299a:	4629      	mov	r1, r5
 800299c:	008b      	lsls	r3, r1, #2
 800299e:	4621      	mov	r1, r4
 80029a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029a4:	4621      	mov	r1, r4
 80029a6:	008a      	lsls	r2, r1, #2
 80029a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80029ac:	f7fd fc2a 	bl	8000204 <__aeabi_uldivmod>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4b60      	ldr	r3, [pc, #384]	; (8002b38 <UART_SetConfig+0x4e4>)
 80029b6:	fba3 2302 	umull	r2, r3, r3, r2
 80029ba:	095b      	lsrs	r3, r3, #5
 80029bc:	011c      	lsls	r4, r3, #4
 80029be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029c2:	2200      	movs	r2, #0
 80029c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80029c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80029cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80029d0:	4642      	mov	r2, r8
 80029d2:	464b      	mov	r3, r9
 80029d4:	1891      	adds	r1, r2, r2
 80029d6:	61b9      	str	r1, [r7, #24]
 80029d8:	415b      	adcs	r3, r3
 80029da:	61fb      	str	r3, [r7, #28]
 80029dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029e0:	4641      	mov	r1, r8
 80029e2:	1851      	adds	r1, r2, r1
 80029e4:	6139      	str	r1, [r7, #16]
 80029e6:	4649      	mov	r1, r9
 80029e8:	414b      	adcs	r3, r1
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029f8:	4659      	mov	r1, fp
 80029fa:	00cb      	lsls	r3, r1, #3
 80029fc:	4651      	mov	r1, sl
 80029fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a02:	4651      	mov	r1, sl
 8002a04:	00ca      	lsls	r2, r1, #3
 8002a06:	4610      	mov	r0, r2
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	4642      	mov	r2, r8
 8002a0e:	189b      	adds	r3, r3, r2
 8002a10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a14:	464b      	mov	r3, r9
 8002a16:	460a      	mov	r2, r1
 8002a18:	eb42 0303 	adc.w	r3, r2, r3
 8002a1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	f04f 0300 	mov.w	r3, #0
 8002a34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002a38:	4649      	mov	r1, r9
 8002a3a:	008b      	lsls	r3, r1, #2
 8002a3c:	4641      	mov	r1, r8
 8002a3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a42:	4641      	mov	r1, r8
 8002a44:	008a      	lsls	r2, r1, #2
 8002a46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002a4a:	f7fd fbdb 	bl	8000204 <__aeabi_uldivmod>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	4b39      	ldr	r3, [pc, #228]	; (8002b38 <UART_SetConfig+0x4e4>)
 8002a54:	fba3 1302 	umull	r1, r3, r3, r2
 8002a58:	095b      	lsrs	r3, r3, #5
 8002a5a:	2164      	movs	r1, #100	; 0x64
 8002a5c:	fb01 f303 	mul.w	r3, r1, r3
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	3332      	adds	r3, #50	; 0x32
 8002a66:	4a34      	ldr	r2, [pc, #208]	; (8002b38 <UART_SetConfig+0x4e4>)
 8002a68:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6c:	095b      	lsrs	r3, r3, #5
 8002a6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a72:	441c      	add	r4, r3
 8002a74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a78:	2200      	movs	r2, #0
 8002a7a:	673b      	str	r3, [r7, #112]	; 0x70
 8002a7c:	677a      	str	r2, [r7, #116]	; 0x74
 8002a7e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002a82:	4642      	mov	r2, r8
 8002a84:	464b      	mov	r3, r9
 8002a86:	1891      	adds	r1, r2, r2
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	415b      	adcs	r3, r3
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a92:	4641      	mov	r1, r8
 8002a94:	1851      	adds	r1, r2, r1
 8002a96:	6039      	str	r1, [r7, #0]
 8002a98:	4649      	mov	r1, r9
 8002a9a:	414b      	adcs	r3, r1
 8002a9c:	607b      	str	r3, [r7, #4]
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	f04f 0300 	mov.w	r3, #0
 8002aa6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002aaa:	4659      	mov	r1, fp
 8002aac:	00cb      	lsls	r3, r1, #3
 8002aae:	4651      	mov	r1, sl
 8002ab0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ab4:	4651      	mov	r1, sl
 8002ab6:	00ca      	lsls	r2, r1, #3
 8002ab8:	4610      	mov	r0, r2
 8002aba:	4619      	mov	r1, r3
 8002abc:	4603      	mov	r3, r0
 8002abe:	4642      	mov	r2, r8
 8002ac0:	189b      	adds	r3, r3, r2
 8002ac2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ac4:	464b      	mov	r3, r9
 8002ac6:	460a      	mov	r2, r1
 8002ac8:	eb42 0303 	adc.w	r3, r2, r3
 8002acc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	663b      	str	r3, [r7, #96]	; 0x60
 8002ad8:	667a      	str	r2, [r7, #100]	; 0x64
 8002ada:	f04f 0200 	mov.w	r2, #0
 8002ade:	f04f 0300 	mov.w	r3, #0
 8002ae2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002ae6:	4649      	mov	r1, r9
 8002ae8:	008b      	lsls	r3, r1, #2
 8002aea:	4641      	mov	r1, r8
 8002aec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002af0:	4641      	mov	r1, r8
 8002af2:	008a      	lsls	r2, r1, #2
 8002af4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002af8:	f7fd fb84 	bl	8000204 <__aeabi_uldivmod>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4b0d      	ldr	r3, [pc, #52]	; (8002b38 <UART_SetConfig+0x4e4>)
 8002b02:	fba3 1302 	umull	r1, r3, r3, r2
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	2164      	movs	r1, #100	; 0x64
 8002b0a:	fb01 f303 	mul.w	r3, r1, r3
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	3332      	adds	r3, #50	; 0x32
 8002b14:	4a08      	ldr	r2, [pc, #32]	; (8002b38 <UART_SetConfig+0x4e4>)
 8002b16:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1a:	095b      	lsrs	r3, r3, #5
 8002b1c:	f003 020f 	and.w	r2, r3, #15
 8002b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4422      	add	r2, r4
 8002b28:	609a      	str	r2, [r3, #8]
}
 8002b2a:	bf00      	nop
 8002b2c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002b30:	46bd      	mov	sp, r7
 8002b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b36:	bf00      	nop
 8002b38:	51eb851f 	.word	0x51eb851f

08002b3c <__libc_init_array>:
 8002b3c:	b570      	push	{r4, r5, r6, lr}
 8002b3e:	4d0d      	ldr	r5, [pc, #52]	; (8002b74 <__libc_init_array+0x38>)
 8002b40:	4c0d      	ldr	r4, [pc, #52]	; (8002b78 <__libc_init_array+0x3c>)
 8002b42:	1b64      	subs	r4, r4, r5
 8002b44:	10a4      	asrs	r4, r4, #2
 8002b46:	2600      	movs	r6, #0
 8002b48:	42a6      	cmp	r6, r4
 8002b4a:	d109      	bne.n	8002b60 <__libc_init_array+0x24>
 8002b4c:	4d0b      	ldr	r5, [pc, #44]	; (8002b7c <__libc_init_array+0x40>)
 8002b4e:	4c0c      	ldr	r4, [pc, #48]	; (8002b80 <__libc_init_array+0x44>)
 8002b50:	f000 f820 	bl	8002b94 <_init>
 8002b54:	1b64      	subs	r4, r4, r5
 8002b56:	10a4      	asrs	r4, r4, #2
 8002b58:	2600      	movs	r6, #0
 8002b5a:	42a6      	cmp	r6, r4
 8002b5c:	d105      	bne.n	8002b6a <__libc_init_array+0x2e>
 8002b5e:	bd70      	pop	{r4, r5, r6, pc}
 8002b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b64:	4798      	blx	r3
 8002b66:	3601      	adds	r6, #1
 8002b68:	e7ee      	b.n	8002b48 <__libc_init_array+0xc>
 8002b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b6e:	4798      	blx	r3
 8002b70:	3601      	adds	r6, #1
 8002b72:	e7f2      	b.n	8002b5a <__libc_init_array+0x1e>
 8002b74:	08002bcc 	.word	0x08002bcc
 8002b78:	08002bcc 	.word	0x08002bcc
 8002b7c:	08002bcc 	.word	0x08002bcc
 8002b80:	08002bd0 	.word	0x08002bd0

08002b84 <memset>:
 8002b84:	4402      	add	r2, r0
 8002b86:	4603      	mov	r3, r0
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d100      	bne.n	8002b8e <memset+0xa>
 8002b8c:	4770      	bx	lr
 8002b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b92:	e7f9      	b.n	8002b88 <memset+0x4>

08002b94 <_init>:
 8002b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b96:	bf00      	nop
 8002b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b9a:	bc08      	pop	{r3}
 8002b9c:	469e      	mov	lr, r3
 8002b9e:	4770      	bx	lr

08002ba0 <_fini>:
 8002ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba2:	bf00      	nop
 8002ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ba6:	bc08      	pop	{r3}
 8002ba8:	469e      	mov	lr, r3
 8002baa:	4770      	bx	lr
